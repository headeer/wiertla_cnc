{% comment %}
  Wiertla Categories Component
  A component to display product categories and search functionality for the Wiertla CNC Shopify theme.
{% endcomment %}
{{ 'wiertla-filter-modal.css' | asset_url | stylesheet_tag }}
{{ 'wiertla-categories-filter.js' | asset_url | script_tag }}

{% assign section_id = section.id %}
{% assign items_per_page = section.settings.items_per_page | default: 100 %}

{% if section.settings.selected_collection != blank %}
  {% assign selected_collection = collections[section.settings.selected_collection] %}
{% else %}
  {% assign selected_collection = collections.all %}
{% endif %}

{% assign current_language = request.locale.iso_code | default: 'pl' %}

{% comment %} pagination removed: hydrating via JS {% endcomment %}
  <div class="wiertla-categories__container">
    <div class="wiertla-categories__tabs desktop">
      <button class="wiertla-categories__tab active" data-tab-type="wiertla" data-translate="header.nav.drills">WIERTŁA</button>
      <button
        class="wiertla-categories__tab"
        data-translate="wiertla_categories.tabs.plates_for_drills"
        data-tab-type="plytki"
      >
        PŁYTKI DO WIERTEŁ
      </button>
      <button
        class="wiertla-categories__tab"
        data-translate="wiertla_categories.tabs.crowns_for_drills"
        data-tab-type="koronki"
      >
        KORONKI DO WIERTEŁ
      </button>
    </div>
  </div>
  <div class="wiertla-categories">
    <div class="wiertla-categories__container">
      <div class="wiertla-logos--mobile">
        {% render 'wiertla-categories-logos' %}
      </div>

      <div class="wiertla-categories__tabs mobile">
        <button class="wiertla-categories__tab active" data-tab-type="wiertla" data-translate="header.nav.drills">WIERTŁA</button>
        <button
          class="wiertla-categories__tab"
          data-translate="wiertla_categories.tabs.plates_short"
          data-tab-type="plytki"
        >
          PŁYTKI
        </button>
        <button
          class="wiertla-categories__tab"
          data-translate="wiertla_categories.tabs.crowns_short"
          data-tab-type="koronki"
        >
          KORONKI
        </button>
      </div>

      <div class="wiertla-categories__icons mobile">
        <div class="wiertla-categories__icon-item" data-category="wszystkie">
          <img
            src="{{ 'ico_big_all.svg' | asset_url }}"
            alt="Wszystkie"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.all">WSZYSTKIE</span>
        </div>

        <!-- Wiertła Categories (default) -->
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="koronkowe">
          <img
            src="{{ 'ico_big_koronkowe.svg' | asset_url }}"
            alt="Koronkowe"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.crown">KORONKOWE</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="plytkowe">
          <img
            src="{{ 'ico_big_plytkowe.svg' | asset_url }}"
            alt="Płytkowe"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.plate">PŁYTKOWE</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="vhm">
          <img
            src="{{ 'ico_big_vhm.svg' | asset_url }}"
            alt="VHM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.vhm">VHM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="sandvik">
          <img
            src="{{ 'ico_big_sandvik.svg' | asset_url }}"
            alt="Sandvik 880"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.sandvik"
            >SANDVIK 880</span
          >
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="amec">
          <img
            src="{{ 'ico_big_amec.svg' | asset_url }}"
            alt="AMEC"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.amec">AMEC</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="ksem">
          <img
            src="{{ 'ico_big_ksem.svg' | asset_url }}"
            alt="KSEM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.ksem">KSEM</span>
        </div>

        <!-- Płytki Categories -->
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="wcmx" style="display: none;">
          <img
            src="{{ 'ico_wcmx.png' | asset_url }}"
            alt="WCMX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">WCMX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="lcmx" style="display: none;">
          <img
            src="{{ 'ico_lcmx-881.svg' | asset_url }}"
            alt="LCMX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">LCMX,811</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="dft" style="display: none;">
          <img
            src="{{ 'ico_dft.svg' | asset_url }}"
            alt="DFT"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">DFT</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="880" style="display: none;">
          <img
            src="{{ 'ico_880.svg' | asset_url }}"
            alt="880"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">880</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="wogx" style="display: none;">
          <img
            src="{{ 'ico_wogx.svg' | asset_url }}"
            alt="WOGX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">WOGX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="spgx" style="display: none;">
          <img
            src="{{ 'ico_spgx.svg' | asset_url }}"
            alt="SPGX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">SPGX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="p284" style="display: none;">
          <img
            src="{{ 'ico_p284.svg' | asset_url }}"
            alt="P284"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">P284</span>
        </div>

        <!-- Koronki Categories -->
        <div
          class="wiertla-categories__icon-item wiertla-tab-koronki"
          data-category="ksem_koronki"
          style="display: none;"
        >
          <img
            src="{{ 'ico_ksem.svg' | asset_url }}"
            alt="KSEM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">KSEM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="idi" style="display: none;">
          <img
            src="{{ 'ico_idi.svg' | asset_url }}"
            alt="IDI"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">IDI</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="p600" style="display: none;">
          <img
            src="{{ 'ico_p600.svg' | asset_url }}"
            alt="P600"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">P600</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="icm" style="display: none;">
          <img
            src="{{ 'ico_icm.svg' | asset_url }}"
            alt="ICM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">ICM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="icp" style="display: none;">
          <img
            src="{{ 'ico_icp.svg' | asset_url }}"
            alt="ICP"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">ICP</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="870" style="display: none;">
          <img
            src="{{ 'ico_870.svg' | asset_url }}"
            alt="870"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">870</span>
        </div>
        <div
          class="wiertla-categories__icon-item wiertla-tab-koronki"
          data-category="amec_koronki"
          style="display: none;"
        >
          <img
            src="{{ 'ico_amec.svg' | asset_url }}"
            alt="AMEC"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">AMEC</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="ktip" style="display: none;">
          <img
            src="{{ 'ico_ktip.svg' | asset_url }}"
            alt="KTIP"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">KTIP</span>
        </div>
      </div>

      <!-- Mobile Header (Only visible on mobile) -->
      {% render 'wiertla-categories-mobile-header', section: section %}

      <!-- Desktop Header (Only visible on desktop) -->
      <div class="wiertla-categories__header desktop">
        <div class="wiertla-categories__filters">
          <!-- Filter button -->
          <div class="wiertla-categories__filters-button-wrapper mobile">
            <button class="wiertla-categories__filters-button">
              <span data-translate="wiertla_categories.filters.button">Filtry</span>
              <div class="wiertla-categories__filters-button-icon"></div>
            </button>
          </div>

          <!-- Include Category Filters Component -->
          {% render 'wiertla-categories-filters' %}
        </div>
      </div>

      <!-- Mobile Filter Modal (Hidden by default) -->
      {% render 'wiertla-categories-mobile' %}
    </div>
  </div>
  <div class="wiertla-categories bg_neutral">
    <div class="wiertla-categories__container">
      <!-- Table Content -->
      <div class="wiertla-categories__content wiertla-categories__layout">
        <!-- Left Column -->
        <div class="wiertla-categories__left-column">
          <!-- Include Search Component -->
          {% render 'wiertla-categories-search' %}

          <!-- Include Mobile Tabs (Only visible on mobile) -->
          {% render 'wiertla-categories-tabs-mobile' %}
        </div>

        <!-- Right Column -->
        <div class="wiertla-categories__right-column">
          <!-- Include Table Component -->
          {% render 'wiertla-categories-table' %}
        </div>
      </div>
    </div>
  </div>
  <!-- Include Fullscreen Component -->
  {% render 'wiertla-categories-fullscreen' %}

  <!-- Include scripts directly -->
  <script>
      // Define isMobileView at the very start so it's available throughout the codebase
      let isMobileView = window.innerWidth <= 1024;
    
      // Ensure we call applyFilters when the script runs
      document.addEventListener('DOMContentLoaded', function() {
    
    // Force check mobile view
    isMobileView = window.innerWidth <= 1024;
    
          // Initialize WiertlaCNC object and filters if they don't exist
      if (!window.WiertlaCNC) {
        window.WiertlaCNC = {};
      }
      
      if (!window.WiertlaCNC.filters) {
        window.WiertlaCNC.filters = {
          typ: '',
          crown: '',
          manufacturer: '',
          category: '',
          condition: null
        };
      }
      
      // Initialize the active tab type (wiertla, plytki, koronki)
      window.WiertlaCNC.activeTabType = 'wiertla';
      
      // Define SKU prefix mapping for each tab type
      window.WiertlaCNC.tabPrefixMapping = {
        'wiertla': ['VW', 'WV', 'PR', 'WW', 'PS', 'WK', 'WA'],
        'plytki': ['PW', 'PD'],
        'koronki': ['KK', 'KW', 'KI', 'KT', 'KS', 'KA', 'KG']
      };
      // Sub-categories for the Wiertła tab mapped to SKU prefixes
      window.WiertlaCNC.wiertlaCategoryToPrefixes = {
        'koronkowe': ['VW', 'WV'],
        'plytkowe': ['PR'],
        'vhm': ['WW'],
        'sandvik': ['PS'],
        'ksem': ['WK'],
        'amec': ['WA']
      };

      // Normalize UI category labels (PL/EN) to internal keys used above
      window.normalizeCategory = function(value) {
        const v = (value || '').toLowerCase().trim();
        switch (v) {
          case 'crown':
          case 'koronkowe':
            return 'koronkowe';
          case 'plate':
          case 'plytkowe':
          case 'płytkowe':
            return 'plytkowe';
          case 'vhm':
            return 'vhm';
          case 'sandvik 880':
          case 'sandvik':
            return 'sandvik';
          case 'ksem':
            return 'ksem';
          case 'amec':
            return 'amec';
          case 'wszystkie':
          case 'all':
            return 'wszystkie';
          default:
            return v;
        }
      };

      // Expose fullscreen helpers to window for manual debugging
      try {
        if (!window.WiertlaCNC) window.WiertlaCNC = {};
        window.WiertlaCNC.applyFullscreenFilters = function() {
          try { console.log('[Wiertla] manual call → applyFullscreenFilters'); } catch (e) {}
          try { applyFullscreenFilters(); } catch (e) { console.error(e); }
        };
        window.WiertlaCNC.debugState = function() {
          const state = {
            activeTabType: window.WiertlaCNC.activeTabType,
            itemsPerPage: window.itemsPerPage,
            currentPage: window.currentPage,
            productsLen: window.WiertlaCNC && window.WiertlaCNC.products ? window.WiertlaCNC.products.length : 'n/a'
          };
          console.table(state);
          return state;
        };
      } catch (e) {}

      // Log and trigger when fullscreen is toggled via button
      document.addEventListener('click', function(e) {
        const fsBtn = e.target.closest('.wiertla-categories__fullscreen-btn');
        if (!fsBtn) return;

        // If the button is inside the fullscreen header, it's the CLOSE button → do nothing here
        if (fsBtn.closest('.wiertla-categories__fullscreen-header')) return;

        try { console.log('[Wiertla] fullscreen open button clicked'); } catch (e2) {}
        // Open fullscreen and clone content
        setTimeout(function(){
          try { window.openWiertlaFullscreen && window.openWiertlaFullscreen(); } catch (e4) { console.error(e4); }
        }, 100);
      });

      // Observe fullscreen activation and render
      (function observeFullscreen() {
        const fs = document.querySelector('.wiertla-categories__fullscreen-view');
        if (!fs || !window.MutationObserver) return;
        const obs = new MutationObserver(function(muts){
          muts.forEach(m => {
            if (m.attributeName === 'class') {
              const isActive = fs.classList.contains('active');
              try { console.log('[Wiertla] fullscreen active:', isActive); } catch (e) {}
              if (isActive) {
                try { applyFullscreenFilters(); } catch (e) { console.error(e); }
              }
            }
          });
        });
        obs.observe(fs, { attributes: true });
      })();
    
    // Add event listeners for the status filter buttons (Nowe/Używane)
    const statusFilterButtons = document.querySelectorAll('.wiertla-categories__status-filter');
          // Create a filterState object if it doesn't exist
      window.filterState = window.filterState || {};
      
      statusFilterButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Check if this button is already active
          const isAlreadyActive = this.classList.contains('active');
          
          // Remove active class from all status filter buttons
          statusFilterButtons.forEach(btn => btn.classList.remove('active'));
          
          // If it was already active, reset the filter
          if (isAlreadyActive) {
            window.WiertlaCNC.filters.condition = null;
            window.filterState.condition = null;
          } else {
            // Add active class to clicked button
            this.classList.add('active');
            
            // Set the condition filter based on the button text
            if (this.textContent.trim().toLowerCase().includes('nowe')) {
              window.WiertlaCNC.filters.condition = 'nowe';
              window.filterState.condition = 'nowe';
            } else {
              window.WiertlaCNC.filters.condition = 'uzywane';
              window.filterState.condition = 'uzywane';
            }
          }
          
          // Apply filters to update the product list
          window.currentPage = 1;
          applyFilters();
        });
      });
    
          // Set default condition filter to 'nowe' on page load
      window.WiertlaCNC.filters.condition = 'nowe';
      window.filterState = window.filterState || {};
      window.filterState.condition = 'nowe';
      
      // Add event listeners for tab buttons
      const tabButtons = document.querySelectorAll('.wiertla-categories__tab');
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabType = this.getAttribute('data-tab-type');
          if (!tabType) {
            console.error('❌ No tab type found!');
            return;
          }
          
          // Remove active class from all tabs
          tabButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Update active tab type
          window.WiertlaCNC.activeTabType = tabType;
          
          // Update URL with mainType parameter
          const url = new URL(window.location);
          url.searchParams.set('mainType', tabType);
          window.history.pushState({}, '', url);
          
          // Reset pagination
          window.currentPage = 1;
          
          // Reset any active category selection when switching tabs
          document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
            icon.classList.remove('active');
          });
          // Set "wszystkie" as active by default
          const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
          if (wszystkieIcon) {
            wszystkieIcon.classList.add('active');
          }
          
          // Update category icons based on the active tab
          updateCategoryIcons();
          
          // Apply filters with the new tab type
          applyFilters();
        });
      });
    
    // Small delay to ensure everything is loaded
    setTimeout(function() {
      // Update category icons based on the active tab
      updateCategoryIcons();
      
      applyFilters();
      
      // Background: fetch full catalog lazily (incremental pages)
      try {
        if (window.WiertlaCNC && typeof window.WiertlaCNC.hydrateAllShopProductsIncremental === 'function') {
          window.WiertlaCNC.hydrateAllShopProductsIncremental();
        }
      } catch (e) {}
      
      // Force another check after a short delay in case of any race conditions
      setTimeout(function() {
        const currentIsMobileView = window.innerWidth <= 1024;
        if (currentIsMobileView !== isMobileView) {
          isMobileView = currentIsMobileView;
          applyFilters();
        }
      }, 500);
    }, 100);
      });
    
      // Initialize global products array; data will be hydrated from JSON views
      window.WiertlaCNC = window.WiertlaCNC || {};
      window.WiertlaCNC.products = [];

      // Background: lazy fetch all products from JSON view and merge
      window.WiertlaCNC.fetchAllShopProducts = async function() {
        try {
          const url = '/collections/all?view=wiertla-products-json&limit=2500';
          const res = await fetch(url, { credentials: 'same-origin' });
          if (!res.ok) {
            return [];
          }
          const data = await res.json();
          const products = Array.isArray(data.products) ? data.products : [];
          return products;
        } catch (e) {
          console.error('[Wiertla] Hydration: fetch failed', e);
          try { console.timeEnd('[Wiertla] Hydration fetch'); } catch (_) {}
          return [];
        }
      };

      window.WiertlaCNC.mergeAndRefresh = function(newProducts) {
        if (!Array.isArray(newProducts) || newProducts.length === 0) {
          return;
        }
        // Strictly drop items without SKU or without any available quantity before merging
        try {
          function getNum(val){ var n = Number((val || '').toString().replace(',', '.')); return isNaN(n) ? 0 : n; }
          newProducts = newProducts.filter(function(p){
            try {
              var sku = String(p && (p.sku || p.custom_symbol || p.custom_kod_producenta) || '').trim();
              if (!sku || sku === '-') return false;
              // Only accept products with Shopify availability - require actual inventory
              if (getNum(p && p.inventory_quantity) > 0) return true;
              if (Array.isArray(p && p.variants)){
                for (var i=0;i<p.variants.length;i++){
                  var v = p.variants[i] || {};
                  if (getNum(v && v.inventory_quantity) > 0) return true;
                }
              }
              // Don't trust product.available flag alone - require inventory
              return false;
            } catch(_) { return false; }
          });
        } catch(_) {}
        const before = (window.WiertlaCNC.products || []).length;
        const byId = new Map();
        (window.WiertlaCNC.products || []).forEach(p => byId.set(p.id || p.handle || p.sku, p));
        newProducts.forEach(p => {
          const key = p.id || p.handle || p.sku;
          if (key && !byId.has(key)) byId.set(key, p);
        });
        window.WiertlaCNC.products = Array.from(byId.values());
        try { if (window.WiertlaDebug && typeof window.WiertlaDebug.onHydrateBatch === 'function') window.WiertlaDebug.onHydrateBatch(newProducts); } catch(_) {}
        const after = window.WiertlaCNC.products.length;
        
        // Keep current page if possible
        const prevPage = window.currentPage || 1;
        window.currentPage = prevPage;
        setTimeout(function(){ if (typeof window.applyFilters === 'function') window.applyFilters(); }, 0);
        try {
          window.dispatchEvent(new CustomEvent('wiertla:productsUpdated', { detail: { total: after } }));
        } catch (_) {}
      };
      
      // Incremental background hydration across all pages
      window.WiertlaCNC.hydrateAllShopProductsIncremental = async function() {
        const baseUrl = '/collections/all?view=wiertla-products-json';
        try {
          // Fetch page 1
          let res = await fetch(baseUrl + '&page=1', { credentials: 'same-origin' });
          if (!res.ok) {
            console.warn('[Wiertla] Hydration: page 1 not OK', res.status);
            return;
          }
          let data = await res.json();
          let products = Array.isArray(data.products) ? data.products : [];
          const totalPages = Number(data.pagination && data.pagination.pages) || 1;
          if (products.length) {
            window.WiertlaCNC.mergeAndRefresh(products);
          }
          // Remaining pages
          for (let p = 2; p <= totalPages; p++) {
            console.time(`[Wiertla] Hydration page ${p}`);
            res = await fetch(baseUrl + '&page=' + p, { credentials: 'same-origin' });
            console.timeEnd(`[Wiertla] Hydration page ${p}`);
            if (!res.ok) {
              console.warn('[Wiertla] Hydration: page', p, 'not OK', res.status);
              continue;
            }
            data = await res.json();
            products = Array.isArray(data.products) ? data.products : [];
            if (products.length) {
              window.WiertlaCNC.mergeAndRefresh(products);
            }
            await new Promise(r => setTimeout(r, 50));
          }
          try {
            window.dispatchEvent(new CustomEvent('wiertla:hydrateComplete', { detail: { total: (window.WiertlaCNC.products || []).length } }));
          } catch (_) {}
        } catch (e) {
          console.error('[Wiertla] Hydration: incremental fetch failed', e);
        }
      };
      // Helper function to list all TYP field values]

      window.listAllTypValues = function() {
        const typValues = new Set();
        const productsWithTyp = [];
        
        (Array.isArray(allProducts) ? allProducts : []).forEach((product, index) => {
          if (product.custom_typ && product.custom_typ.trim() !== '') {
            typValues.add(product.custom_typ.toLowerCase());
            productsWithTyp.push({
              index: index + 1,
              title: product.title,
              sku: product.sku,
              custom_typ: product.custom_typ,
              vendor: product.vendor
            });
          }
        });
        
        
        return {
          totalProducts: (Array.isArray(allProducts) ? allProducts.length : 0),
          productsWithTyp: productsWithTyp.length,
          uniqueTypValues: Array.from(typValues).sort(),
          sampleProducts: productsWithTyp.slice(0, 10)
        };
      };
      
      // Define openRentModal function
      window.WiertlaCNC.openRentModal = function(product) {
        const modal = document.querySelector('.wiertla-categories__mobile-rent-modal');
        if (!modal) {
          console.error('Rent modal not found');
          return;
        }

        // Update modal content
        const title = modal.querySelector('.wiertla-categories__mobile-rent-title');
        if (title) {
          title.textContent = product.title;
        }

        // Show the modal
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        // Add close handler
        const closeButton = modal.querySelector('.wiertla-categories__mobile-rent-close');
        if (closeButton) {
          closeButton.onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
        }

        // Add click outside handler
        modal.onclick = function(event) {
          if (event.target === modal) {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          }
        };
      };
      
      // Language switcher API - This is being replaced by our new translation system
      window.WiertlaCNC.changeLanguage = function(language) {
    // Use our new WiertlaTranslator instead
    if (window.WiertlaTranslator && typeof window.WiertlaTranslator.changeLanguage === 'function') {
      window.WiertlaTranslator.changeLanguage(language);
    }
      };
      
      document.addEventListener('DOMContentLoaded', function() {
    
    // Initialize mobile filter bar
    const mobileFilterBar = document.querySelector('.wiertla-categories__mobile-filter-bar');
    const mobileFilterModal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    
    if (mobileFilterBar) {
      // Add click event for the filter button
      const filterButton = mobileFilterBar.querySelector('.wiertla-categories__mobile-filter-left');
      if (filterButton) {
        filterButton.addEventListener('click', function() {
          if (mobileFilterModal) {
            mobileFilterModal.classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent scrolling
          }
        });
      }
      
      // Add click events for per page buttons
      const perPageButtons = mobileFilterBar.querySelectorAll('.wiertla-categories__mobile-per-page-button');
      perPageButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          perPageButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          button.classList.add('active');
          
          // Update items per page
          const newItemsPerPage = parseInt(button.getAttribute('data-items'));
          if (newItemsPerPage && !isNaN(newItemsPerPage)) {
            itemsPerPage = newItemsPerPage;
            currentPage = 1; // Reset to first page
            applyFilters(); // Refresh the table
          }
        });
      });
    }
    
    // Handle mobile per-page buttons independently since they might not be in the filter bar
    const mobilePerPageButtons = document.querySelectorAll('.wiertla-categories__mobile-per-page-button');
    mobilePerPageButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        mobilePerPageButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Update items per page
        const newItemsPerPage = parseInt(button.getAttribute('data-items') || button.getAttribute('data-value'));
        if (newItemsPerPage && !isNaN(newItemsPerPage)) {
          itemsPerPage = newItemsPerPage;
          currentPage = 1; // Reset to first page
          applyFilters(); // Refresh the table
        }
      });
    });
    
    // Make sure the filter modal close button works
    const filterModalCloseButton = document.querySelector('.wiertla-categories__mobile-filter-close');
    if (filterModalCloseButton) {
      filterModalCloseButton.addEventListener('click', function() {
        if (mobileFilterModal) {
          mobileFilterModal.classList.remove('active');
          document.body.style.overflow = ''; // Allow scrolling again
        }
      });
    }
    
    
    // Initialize product table data
    let allProducts = Array.isArray(window.WiertlaCNC?.products) ? window.WiertlaCNC.products : [];
    
    // Debug function to display initial products
    window.showInitialProducts = function(limit = 20) {
      allProducts.slice(0, limit).forEach((product, index) => {
        
        
        // Show all custom fields
        const customFields = {};
        Object.keys(product).forEach(key => {
          if (key.startsWith('custom_')) {
            customFields[key] = product[key];
          }
        });
      });
      
      // Show summary statistics
      const withTyp = allProducts.filter(p => p.custom_typ && p.custom_typ !== null && p.custom_typ !== 'N/A').length;
      const withRodzaj = allProducts.filter(p => p.rodzaj && p.rodzaj !== null && p.rodzaj !== 'N/A').length;
      const withVendor = allProducts.filter(p => p.vendor && p.vendor !== null).length;
      const withSku = allProducts.filter(p => p.sku && p.sku !== null).length;
      
      
      // Show unique values for key fields
      const uniqueTyps = [...new Set(allProducts.map(p => p.custom_typ).filter(Boolean))];
      const uniqueRodzaj = [...new Set(allProducts.map(p => p.rodzaj).filter(Boolean))];
      const uniqueVendors = [...new Set(allProducts.map(p => p.vendor).filter(Boolean))];
      
      return {
        totalProducts: allProducts.length,
        withTyp,
        withRodzaj,
        withVendor,
        withSku,
        uniqueTyps,
        uniqueRodzaj,
        uniqueVendors,
        sampleProducts: allProducts.slice(0, limit)
      };
    };

    // Debug: log 20 płytki products with quantity-related fields
    window.logPlytkiSamples = function(limit = 20) {
      try {
        const products = (window.WiertlaCNC && Array.isArray(window.WiertlaCNC.products) && window.WiertlaCNC.products.length)
          ? window.WiertlaCNC.products
          : (Array.isArray(allProducts) ? allProducts : []);
        const toLower = (v) => (v || '').toString().toLowerCase();
        const isPlytki = (p) => {
          const typ = toLower(p.custom_typ || p.rodzaj || '');
          const sku = (p.sku || '').toString();
          return typ.includes('płytkowe') || typ.includes('plytkowe') || typ.includes('plate') || sku.startsWith('PR');
        };
        const plytki = products.filter(isPlytki);
       
        return plytki.slice(0, limit);
      } catch (e) {
        try { console.error('[DEBUG] logPlytkiSamples failed', e); } catch (_) {}
        return [];
      }
    };

    // Auto-log on initial load and after hydration completes
    try { window.logPlytkiSamples(20); } catch (_) {}
    try {
      window.addEventListener('wiertla:hydrateComplete', function() {
        try { window.logPlytkiSamples(20); } catch (_) {}
      });
    } catch (_) {}

    // Render a table with counts of products by custom_typ
    window.renderTypStats = function() {
      try {
        const products = window.WiertlaCNC?.products || allProducts || [];
        const counts = {};
        products.forEach(p => {
          const key = (p.custom_typ || '').toString().trim() || '—';
          counts[key] = (counts[key] || 0) + 1;
        });

        // Create or find container below the main table
        let container = document.getElementById('typStatsContainer');
        if (!container) {
          container = document.createElement('div');
          container.id = 'typStatsContainer';
          container.style.marginTop = '20px';
          const host = document.querySelector('.wiertla-categories');
          if (host) host.appendChild(container);
        }

        // Build table
        const rows = Object.entries(counts)
          .sort((a,b) => b[1]-a[1])
          .map(([typ, count]) => `<tr><td class="wiertla-categories__table-cell">${typ}</td><td class="wiertla-categories__table-cell" style="text-align:right;">${count}</td></tr>`) 
          .join('');

        container.innerHTML = `
          <h3 style="margin:16px 0 8px;">Statystyki TYP</h3>
          <table class="wiertla-categories__table" style="margin-bottom:24px;">
            <thead>
              <tr>
                <th class="wiertla-categories__table-header">TYP</th>
                <th class="wiertla-categories__table-header" style="text-align:right;">Ilość</th>
              </tr>
            </thead>
            <tbody>
              ${rows}
            </tbody>
          </table>
        `;
      } catch (_) {}
    };
    
    // Simple RODZAJ stats (debug): outputs lines like "icm: 20" across ALL products
    window.renderRodzajStatsSimple = function() {
       try {
         const products = window.WiertlaCNC?.products || allProducts || [];
         const counts = {};
         const labels = {};
         products.forEach(p => {
           const raw = (p.custom_rodzaj || p?.metafields?.custom?.rodzaj || '').toString().trim();
           if (!raw || raw === '-' || raw === 'N/A') return;
           const key = raw.toLowerCase();
           labels[key] = labels[key] || raw;
           counts[key] = (counts[key] || 0) + 1;
         });
 
         let container = document.getElementById('rodzajStatsSimple');
         if (!container) {
           container = document.createElement('div');
           container.id = 'rodzajStatsSimple';
           container.style.marginTop = '12px';
           const host = document.querySelector('.wiertla-categories');
           if (host) host.appendChild(container);
         }
 
         const entries = Object.entries(counts).sort((a,b) => b[1]-a[1]);
         const lines = entries.length
           ? entries.map(([k,v]) => `${labels[k]}: ${v}`).join('<br>')
           : 'brak danych';
 
         container.innerHTML = `
           <h3 style=\"margin:16px 0 8px; display:none;\">Rodzaj (custom_rodzaj)</h3>
           <div style=\"font-family:monospace; white-space:pre-line; display:none;\">${lines}</div>
         `;
       } catch (_) {}
     };

    // Initial simple rodzaj stats render
    try { window.renderRodzajStatsSimple(); } catch (_) {}

    // Update when switching to PŁYTKI tab
    try {
      document.querySelectorAll('.wiertla-categories__tab').forEach(function(tab) {
        tab.addEventListener('click', function() {
          var tabType = this.getAttribute('data-tab-type');
          if (tabType === 'plytki') {
            window.renderRodzajStatsSimple();
          }
        });
      });
    } catch (_) {}
    
    // Also update after hydration completes (when products array becomes available)
    try {
      window.addEventListener('wiertla:hydrateComplete', function() {
        try { window.renderRodzajStatsSimple(); } catch (_) {}
      });
    } catch (_) {}
    
    // Create hover preview element
    const hoverPreview = document.createElement('div');
    hoverPreview.className = 'wiertla-categories__hover-preview';
    hoverPreview.innerHTML = `
      <div class="wiertla-categories__hover-preview-inner">
        <img src="" alt="Preview" class="wiertla-categories__hover-preview-img">
        <div class="wiertla-categories__hover-preview-arrow"></div>
      </div>
    `;
    document.body.appendChild(hoverPreview);
    // Create new image hover element
    const newImageHover = document.createElement('div');
    newImageHover.className = 'wiertla-categories__image-hover';
    newImageHover.innerHTML = `
      <div class="wiertla-categories__image-hover-inner">
        <img src="" alt="Preview" class="wiertla-categories__image-hover-img">
        <div class="wiertla-categories__image-hover-diamond">
          <img src="{{ 'diamond.svg' | asset_url }}" alt="Diamond" width="14" height="28">
        </div>
      </div>
    `;
    document.body.appendChild(newImageHover);
    
    // Set search input placeholder
    const searchInput = document.querySelector('.wiertla-search__input');
    if (searchInput) {
      // Respect translation system placeholder if present
    } else {
      console.error('Search input not found');
    }
    
    // Initialize variables
    window.currentPage = 1;
    window.itemsPerPage = {{ section.settings.items_per_page | default: 100 }};
    window.totalPages = 1;
    window.selectedCategory = 'wszystkie';
    window.currentFilters = {
      typ: '',
      crown: '',
      manufacturer: '',
      search: ''
    };
    
    // Detect Shopify language from the html lang attribute
    let shopifyLanguage = document.documentElement.lang || 'pl';
    
    // Initialize translations based on Shopify language
    const translations = {
      'pl': {
        // Table and filters
        'no_results': 'Brak wyników spełniających kryteria',
        'results_format': '{0}-{1} z {2}',
        'show_previous': 'POKAŻ POPRZEDNIE',
        'show_next': 'POKAŻ NASTĘPNE',
        'preview_title': 'ZOBACZ OBRAZ POGLĄDOWY',
        'preview_instruction': 'Najedź kursorem na wiertło w tabeli, aby wyświetlić tu powiększony podgląd',
        'fullscreen_title': 'Przeglądaj wiertła w tabeli',
        'fullscreen_description': 'Stale poszerzamy stan magazynowy, aktualizując ofertę o nowe modele wierteł CNC',
        'close_fullscreen': 'Zamknij tryb pełnoekranowy',
        
        // Categories and filters
        'all': 'Wszystkie',
        'drill_type': 'Typ wiertła',
        'crown_type': 'Wykaz koronek',
        'manufacturer': 'Producent',
        'show': 'Pokaż',
        'per_page': '/ na stronę',
        
        // Table headers
        'type': 'Typ',
        'diameter': '⌀ Fi',
        'length': 'D/mm',
        'symbol': 'Symbol',
        'vendor': 'Producent',
        'price': 'Cena netto',
        
        // Categories
        'crown': 'KORONKOWE',
        'plate': 'PŁYTKOWE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'WSZYSTKIE',
        'show_previous_mobile': 'POPRZEDNIE',
        'show_next_mobile': 'NASTĘPNE'
      },
      'en': {
        // Table and filters
        'no_results': 'No results match your criteria',
        'results_format': '{0}-{1} of {2}',
        'show_previous': 'SHOW PREVIOUS',
        'show_next': 'SHOW NEXT',
        'preview_title': 'VIEW PREVIEW IMAGE',
        'preview_instruction': 'Hover over a drill in the table to display an enlarged preview here',
        'fullscreen_title': 'CNC DRILLS',
        'fullscreen_description': 'Choose the drill you are interested in from our store\'s extensive selection.',
        'close_fullscreen': 'CLOSE FULLSCREEN',
        
        // Categories and filters
        'all': 'All',
        'drill_type': 'Drill type',
        'crown_type': 'Crown type',
        'manufacturer': 'Manufacturer',
        'show': 'Show',
        'per_page': '/ per page',
        
        // Table headers
        'type': 'Type',
        'diameter': '⌀ Diameter',
        'length': 'L/mm',
        'symbol': 'Symbol',
        'vendor': 'Manufacturer',
        'price': 'Net price',
        
        // Categories
        'crown': 'CROWN',
        'plate': 'PLATE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'ALL',
        'show_previous_mobile': 'PREVIOUS',
        'show_next_mobile': 'NEXT'
      },
      'de': {
        'no_results': 'Keine Ergebnisse entsprechen Ihren Kriterien',
        'results_format': '{0}-{1} von {2}',
        'show_previous': 'VORHERIGE ANZEIGEN',
        'show_next': 'NÄCHSTE ANZEIGEN',
        'preview_title': 'VORSCHAUBILD ANZEIGEN',
        'preview_instruction': 'Fahren Sie mit dem Mauszeiger über einen Bohrer in der Tabelle, um hier eine vergrößerte Vorschau anzuzeigen',
        'fullscreen_title': 'CNC-BOHRER',
        'fullscreen_description': 'Wählen Sie den gewünschten Bohrer aus unserem umfangreichen Sortiment.',
        'close_fullscreen': 'VOLLBILD SCHLIESSEN',
        
        // Categories and filters
        'all': 'Alle',
        'drill_type': 'Bohrertyp',
        'crown_type': 'Kronentyp',
        'manufacturer': 'Hersteller',
        'show': 'Zeigen',
        'per_page': '/ pro Seite',
        
        // Table headers
        'type': 'Typ',
        'diameter': '⌀ Durchmesser',
        'length': 'L/mm',
        'symbol': 'Symbol',
        'vendor': 'Hersteller',
        'price': 'Nettopreis',
        
        // Categories
        'crown': 'KRONE',
        'plate': 'PLATTE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'ALLE',
        'show_previous_mobile': 'VORHERIGE',
        'show_next_mobile': 'NÄCHSTE'
      }
    };
    
    // Default to Polish if language not supported
    let currentLanguage = translations[shopifyLanguage] ? shopifyLanguage : 'pl';
    
    // Check for stored language preference first, then use Shopify language or default to Polish
    const storedLanguage = localStorage.getItem('shopify_locale');
    if (storedLanguage && translations[storedLanguage]) {
      currentLanguage = storedLanguage;
    } else {
      currentLanguage = translations[shopifyLanguage] ? shopifyLanguage : 'pl';
    }
    
    // Set the HTML lang attribute to match the selected language
    document.documentElement.lang = currentLanguage;
    
    // Watch for language changes in the Shopify language selector
    document.addEventListener('click', function(e) {
      // Look for Shopify language selector links
      const langLink = e.target.closest('.header__lang-links a, [data-disclosure-locale]');
      if (langLink) {
        e.preventDefault(); // Prevent default to avoid page reload
        const lang = langLink.getAttribute('data-lang');
        if (lang && translations[lang]) {
          window.changeLanguage(lang);
        }
      }
    });
    
    // Make necessary functions globally available
    window.handleCategoryChange = function(category) {
      selectedCategory = typeof window.normalizeCategory === 'function' ? window.normalizeCategory(category) : category;
      currentPage = 1;
      applyFilters();
    };
    
    window.handleItemsPerPageChange = function(newItemsPerPage) {
      itemsPerPage = parseInt(newItemsPerPage);
      currentPage = 1;
      
      // Sync desktop per-page buttons
      document.querySelectorAll('.wiertla-categories__per-page-button').forEach(function(btn) {
        if (parseInt(btn.getAttribute('data-value')) === itemsPerPage) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Sync mobile per-page buttons 
      document.querySelectorAll('.wiertla-categories__mobile-per-page-button').forEach(function(btn) {
        if (parseInt(btn.getAttribute('data-items')) === itemsPerPage) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      applyFilters();
    };
    
    // Function to change language - Remove this in favor of our new translation system
    window.changeLanguage = function(language) {
      // Delegate to our new translation system
      if (window.WiertlaTranslator && typeof window.WiertlaTranslator.changeLanguage === 'function') {
        window.WiertlaTranslator.changeLanguage(language);
      }
    };
    
    // Function to update UI text based on current language
    function updateUILanguage() {
      // Update pagination buttons
      document.querySelectorAll('#prevPage, #fullscreenPrevPage').forEach(btn => {
        const span = btn.querySelector('span');
        if (span) {
          span.textContent = translations[currentLanguage].show_previous;
          span.setAttribute('data-mobile-text', translations[currentLanguage].show_previous_mobile);
        }
      });
      
      document.querySelectorAll('#nextPage, #fullscreenNextPage').forEach(btn => {
        const span = btn.querySelector('span');
        if (span) {
          span.textContent = translations[currentLanguage].show_next;
          span.setAttribute('data-mobile-text', translations[currentLanguage].show_next_mobile);
        }
      });
      
      // Update table headers
      const tableHeaders = document.querySelectorAll('.wiertla-categories__table th');
      if (tableHeaders.length >= 6) {
        tableHeaders[0].textContent = translations[currentLanguage].type;
        tableHeaders[1].textContent = translations[currentLanguage].diameter;
        tableHeaders[2].textContent = translations[currentLanguage].length;
        tableHeaders[3].textContent = translations[currentLanguage].symbol;
        tableHeaders[4].textContent = translations[currentLanguage].vendor;
        tableHeaders[5].textContent = translations[currentLanguage].price;
      }
      
      // Update filter dropdowns
      const typeFilter = document.querySelector('.wiertla-categories__filter[data-filter="type"]');
      if (typeFilter && typeFilter.options.length > 0) {
        typeFilter.options[0].textContent = translations[currentLanguage].drill_type;
      }
      
      const crownFilter = document.querySelector('.wiertla-categories__filter[data-filter="crown"]');
      if (crownFilter && crownFilter.options.length > 0) {
        crownFilter.options[0].textContent = translations[currentLanguage].crown_type;
      }
      
      const manufacturerFilter = document.querySelector('.wiertla-categories__filter[data-filter="manufacturer"]');
      if (manufacturerFilter && manufacturerFilter.options.length > 0) {
        manufacturerFilter.options[0].textContent = translations[currentLanguage].manufacturer;
      }
      
      // Update per-page labels
      document.querySelectorAll('.wiertla-categories__per-page-label').forEach((label, index) => {
        if (index % 2 === 0) {
          label.textContent = translations[currentLanguage].show;
        } else {
          label.textContent = translations[currentLanguage].per_page;
        }
      });
      
      // Update "Wszystkie" button text
      document.querySelectorAll('.wiertla-categories__filter-button[data-filter="wszystkie"]').forEach(btn => {
        btn.textContent = translations[currentLanguage].all;
      });
      
      // Update category icons label text
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
        const label = item.querySelector('.wiertla-categories__icon-label');
        const category = item.getAttribute('data-category');
        
        if (label && category) {
          switch (category) {
            case 'koronkowe':
              label.textContent = translations[currentLanguage].crown;
              break;
            case 'plytkowe':
              label.textContent = translations[currentLanguage].plate;
              break;
            case 'vhm':
              label.textContent = translations[currentLanguage].vhm;
              break;
            case 'sandvik':
              label.textContent = translations[currentLanguage].sandvik;
              break;
            case 'amec':
              label.textContent = translations[currentLanguage].amec;
              break;
            case 'ksem':
              label.textContent = translations[currentLanguage].ksem;
              break;
            case 'wszystkie':
              label.textContent = translations[currentLanguage].all_categories;
              break;
          }
        }
      });
      
      // Update fullscreen elements if they exist
      const fullscreenTitle = document.querySelector('.wiertla-categories__fullscreen-title h2');
      if (fullscreenTitle) {
        fullscreenTitle.textContent = translations[currentLanguage].fullscreen_title;
      }
      
      const fullscreenDesc = document.querySelector('.wiertla-categories__fullscreen-title p');
      if (fullscreenDesc) {
        fullscreenDesc.textContent = translations[currentLanguage].fullscreen_description;
      }
      
      const fullscreenClose = document.querySelector('.wiertla-categories__fullscreen-close span');
      if (fullscreenClose) {
        fullscreenClose.textContent = translations[currentLanguage].close_fullscreen;
      }
      
      // Update preview elements
      const previewTitle = document.querySelector('.wiertla-categories__preview-title');
      if (previewTitle) {
        previewTitle.textContent = translations[currentLanguage].preview_title;
      }
      
      const previewText = document.querySelector('.wiertla-categories__preview-text');
      if (previewText) {
        previewText.textContent = translations[currentLanguage].preview_instruction;
      }
      
      // Update the results text
      const resultsText = document.querySelector('.wiertla-categories__results-text');
      if (resultsText) {
        resultsText.textContent = 'Wyświetlono wyniki ';
      }
      
      // Re-apply filters to update any text in the table
      applyFilters();
    }
    
    // Calculate initial totalPages
    totalPages = Math.ceil(allProducts.length / itemsPerPage);
    
    // Update hover preview position

    
 
    // Filter products based on current filters
    function filterProducts() {
      
      let filteredProducts = window.WiertlaCNC?.products || [];

      if (!Array.isArray(filteredProducts) || filteredProducts.length === 0) {
        return [];
      }
      
      // Helper function to check Shopify availability
      function getNumber(val){
        var n = Number((val || '').toString().replace(',', '.'));
        return isNaN(n) ? 0 : n;
      }
      function isShopifyAvailable(product){
        if (product == null) return false;
        // Only check Shopify's native availability - require actual inventory
        if (getNumber(product.inventory_quantity) > 0) return true;
        if (Array.isArray(product.variants)){
          for (var i=0;i<product.variants.length;i++){
            var v = product.variants[i] || {};
            if (getNumber(v.inventory_quantity) > 0) return true;
          }
        }
        // Don't trust product.available flag alone - require inventory
        return false;
      }
      
      // FIRST: Filter by availability - only show products that are available
      filteredProducts = filteredProducts.filter(product => {
        return isShopifyAvailable(product);
      });
      
      // Safety: ensure helpers exist even if defined later in other scopes
      if (typeof rodzajSynonyms === 'undefined') {
        var rodzajSynonyms = {
          plytki: {
            'wcmx': ['wcmx', 'wc', 'wcm'],
            'lcmx': ['lcmx', 'lcm'],
            '811': ['811'],
            'dft': ['dft'],
            '880': ['880'],
            'wogx': ['wogx'],
            'spgx': ['spgx', 'spgm', 'spg'],
            'p284': ['p284', 'p484']
          },
          koronki: {
            'ksem': ['ksem'],
            'idi': ['idi'],
            'p600': ['p600'],
            'icm': ['icm', 'icmx'],
            'icp': ['icp'],
            '870': ['870'],
            'amec': ['amec'],
            'ktip': ['ktip']
          }
        };
      }
      if (typeof includesAny === 'undefined') {
        var includesAny = function(text, needles) {
          const t = (text || '').toLowerCase();
          return Array.isArray(needles) && needles.some(n => t.includes(n));
        };
      }
      
      // Apply tab type filter first (wiertla, plytki, koronki)
      const activeTabType = window.WiertlaCNC.activeTabType || 'wiertla';
      let validPrefixes = window.WiertlaCNC.tabPrefixMapping[activeTabType] || [];
      
      // If we're on Wiertła tab and a wiertła sub-category is selected, narrow prefixes accordingly
      // Normalize selectedCategory (PL/EN chips) before using
      if (typeof window.normalizeCategory === 'function' && window.selectedCategory) {
        window.selectedCategory = window.normalizeCategory(window.selectedCategory);
      }
      if (activeTabType === 'wiertla' && window.selectedCategory && window.selectedCategory !== 'wszystkie') {
        const narrowed = window.WiertlaCNC.wiertlaCategoryToPrefixes?.[window.selectedCategory];
        if (Array.isArray(narrowed) && narrowed.length > 0) {
          validPrefixes = narrowed;
        }
      }
      
      if (validPrefixes.length > 0) {
        let beforeFilterCount = filteredProducts.length;
        
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || product.custom_kod_producenta || '';
          if (!sku || sku.length < 2) {
            return false;
          }
          
          const skuPrefix = sku.substring(0, 2).toUpperCase();
          
          // Strict check by prefix for all tabs, including 'koronki'
          const shouldInclude = validPrefixes.includes(skuPrefix);
          return shouldInclude;
        });
        
        
        // Group filtered products by SKU prefix for verification
        const skuGroups = {};
        filteredProducts.forEach(product => {
          const sku = product.sku || product.custom_symbol || '';
          const prefix = sku.substring(0, 2).toUpperCase();
          if (!skuGroups[prefix]) skuGroups[prefix] = [];
          skuGroups[prefix].push(sku);
        });
        
        
        // Verify expected patterns
        if (activeTabType === 'wiertla') {
          const expectedPrefixes = ['VW', 'WV', 'PR', 'WW', 'PS', 'WK'];
        } else if (activeTabType === 'plytki') {
          const expectedPrefixes = ['PW'];

        } else if (activeTabType === 'koronki') {
          const expectedPrefixes = ['KK', 'KW', 'KI', 'KT', 'KS', 'KA', 'KG'];
        }
      }

      // Apply search filter if exists
      const searchTerm = window.currentFilters?.search?.toLowerCase();
      if (searchTerm) {
        let beforeSearchCount = filteredProducts.length;
        filteredProducts = filteredProducts.filter(product => {
          const searchableFields = [
            product.custom_symbol,
            product.custom_kod_producenta,
            product.custom_manufacturer,
            product.custom_srednica,
            product.custom_fi,
            product.custom_drill_length,
            product.vendor,
            product.title,
            product.sku
          ].filter(Boolean).map(field => field.toString().toLowerCase());

          return searchableFields.some(field => field.includes(searchTerm));
        });
      }
      
      // Apply category filter if not "wszystkie"
      if (window.selectedCategory && window.selectedCategory !== 'wszystkie') {
        if (typeof window.normalizeCategory === 'function') {
          window.selectedCategory = window.normalizeCategory(window.selectedCategory);
        }
        let beforeCategoryCount = filteredProducts.length;
        const activeTabType = window.WiertlaCNC.activeTabType || 'wiertla';
        
        // 🐛 DEBUG: Log category filter details
        
        // Special debug for Sandvik 880 issues
        if (window.selectedCategory === 'sandvik' && activeTabType === 'wiertla') {
          let sandvikCount = 0;
          filteredProducts.forEach((product, index) => {
            if (index < 10) { // Check first 10 products for debug
              const has880Anywhere = 
                (product.custom_typ || '').toLowerCase().includes('880') ||
                (product.rodzaj || '').toLowerCase().includes('880') ||
                (product.title || '').toLowerCase().includes('880') ||
                (product.sku || '').toLowerCase().includes('880') ||
                (product.custom_symbol || '').toLowerCase().includes('880');
              
              const hasSandvikAnywhere = 
                (product.vendor || '').toLowerCase().includes('sandvik') ||
                (product.title || '').toLowerCase().includes('sandvik') ||
                (product.custom_typ || '').toLowerCase().includes('sandvik');
                
              if (has880Anywhere || hasSandvikAnywhere) {
                sandvikCount++;
                
              }
            }
          });
           
           // Look specifically for the mentioned products
           const targetProducts = ['880 PS.T111', '880 PS.M008', '880 PS.M101'];
           targetProducts.forEach(targetName => {
             const foundProduct = filteredProducts.find(p => 
               (p.title || '').includes(targetName) ||
               (p.sku || '').includes(targetName) ||
               (p.custom_symbol || '').includes(targetName)
             );
             
            
           });
         }
        
        filteredProducts = filteredProducts.filter(product => {
          // For Wiertła tab, prefixes already narrowed the dataset; keep all
          if (activeTabType === 'wiertla') {
            return true;
          }
          const productTyp = (product.custom_typ || '').toLowerCase();
          const productRodzaj = (product.custom_rodzaj || product.rodzaj || '').toLowerCase();
          const productVendor = (product.vendor || '').toLowerCase();
          const productTitle = (product.title || '').toLowerCase();
          const categoryLower = window.selectedCategory.toLowerCase();
          
          let matches = false;
          
          // Unified matching logic for all tabs
          if (activeTabType === 'wiertla') {
            // For wiertla tab, search primarily in typ field
            switch (categoryLower) {
              case 'plytkowe':
                // Match both "płytkowe" and "plytkowe" variants
                matches = productTyp.includes('płytkowe') || 
                         productTyp.includes('plytkowe') || 
                         productTyp.includes('plate');
                break;
              
              case 'koronkowe':
                matches = productTyp.includes('koronkowe') || 
                         productTyp.includes('crown') ||
                         productTyp.includes('koronka');
                break;
              
              case 'vhm':
                matches = productTyp.includes('vhm') || 
                         productTyp.includes('solid') ||
                         productTyp.includes('carbide');
                break;
              
              case 'sandvik':
                // For Sandvik 880: Check for "880" in custom_typ field specifically
                matches = productTyp.includes('880');
                
                // Debug sandvik matching
                if (matches || productTitle.includes('880')) {
                }
                break;
              
              case 'ksem':
                matches = productTyp.includes('ksem') || 
                         productVendor.includes('ksem') ||
                         productTitle.includes('ksem');
                break;
              
              case 'amec':
                matches = productTyp.includes('amec') || 
                         productVendor.includes('amec') ||
                         productTitle.includes('amec');
                break;
              
              default:
                // Generic case-insensitive matching
                matches = productTyp.includes(categoryLower);
                break;
            }
          } 
          else if (activeTabType === 'plytki') {
            // For plytki tab, search using rodzaj synonyms (and typ as fallback)
            const synonyms = (rodzajSynonyms.plytki && rodzajSynonyms.plytki[categoryLower]) || [categoryLower];
            switch (categoryLower) {
              case 'wcmx':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'lcmx':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case '811':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'dft':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case '880':
                // Strict match for Sandvik 880 plates: prefer SKU or SYMBOL starting with PD.
                // Includes replacements like PD.A300..PD.A328 etc.
                (function(){
                  var skuVal = ((product.sku || '') + '').toUpperCase().trim();
                  var symVal = ((product.custom_symbol || '') + '').toUpperCase().trim();
                  var kodVal = ((product.custom_kod_producenta || '') + '').toUpperCase().trim();
                  var pdSku = /^PD\./.test(skuVal);
                  var pdSym = /^PD\./.test(symVal);
                  // Do NOT require PD in kod_producenta; replacements often carry PD in SKU only
                  matches = (pdSku || pdSym);
                })();
                break;
              case 'wogx':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'spgx':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'p284':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              default:
                // Generic matching for both fields
                matches = includesAny(productRodzaj, [categoryLower]) || includesAny(productTyp, [categoryLower]);
                break;
            }
          }
          else if (activeTabType === 'koronki') {
            // For koronki tab, search using rodzaj synonyms (and typ as fallback)
            const synonyms = (rodzajSynonyms.koronki && rodzajSynonyms.koronki[categoryLower]) || [categoryLower];
            switch (categoryLower) {
              case 'ksem':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms) ||
                          productVendor.includes('ksem') ||
                          productTitle.includes('ksem');
                break;
              case 'idi':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'p600':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'icm':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'icp':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case '870':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'amec':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              case 'ktip':
                matches = includesAny(productRodzaj, synonyms) || includesAny(productTyp, synonyms);
                break;
              default:
                // Generic matching for both fields
                matches = includesAny(productRodzaj, [categoryLower]) || includesAny(productTyp, [categoryLower]);
                break;
            }
          }
          
          // Debug logging for problematic categories
          if (categoryLower === 'ksem' || categoryLower === 'amec' || categoryLower === 'sandvik' || categoryLower === '880') {
            const productIndex = filteredProducts.indexOf(product);
            if (productIndex < 3) { // Log first 3 products for brevity
              
              // Special debug for 880/Sandvik products
              if (categoryLower === 'sandvik' || categoryLower === '880') {
                const has880InTyp = productTyp.includes('880');
                const has880InRodzaj = productRodzaj.includes('880');
                const has880InTitle = productTitle.includes('880');
                const has880InSku = (product.sku || '').toLowerCase().includes('880');
                const has880InSymbol = (product.custom_symbol || '').toLowerCase().includes('880');
                const hasSandvikInVendor = productVendor.includes('sandvik');
                
              }
            }
          }
          
          return matches;
        });
        
        console.groupEnd();
      }

      // Apply type filter - BUT skip if we already applied a category filter that found products
      if (window.WiertlaCNC.filters.typ && window.WiertlaCNC.filters.typ !== 'all' && window.WiertlaCNC.filters.typ !== '') {
        let beforeTypeCount = filteredProducts.length;
        
        const expectedTypeValue = window.WiertlaCNC.filters.typ;
        
        // IMPORTANT: If we already filtered by category and the type matches the category, 
        // don't apply additional typ filtering as products may not have custom_typ populated
        const categoryAlreadyFiltered = window.selectedCategory && window.selectedCategory !== 'wszystkie';
        const typeMatchesCategory = expectedTypeValue === window.selectedCategory;
        
        if (categoryAlreadyFiltered && typeMatchesCategory) {
        } else {
          
          if (expectedTypeValue) {
            filteredProducts = filteredProducts.filter(product => {
              // Check multiple possible field names for TYP
              const typValue = product.custom_typ;
              const matches = typValue && typValue?.toLowerCase()?.includes(expectedTypeValue?.toLowerCase() || '');
              
              
              return matches;
            });
            
          } else {
          }
        }
      }
      
      // If we're in koronki tab, apply filter for specific koronki types
      if (window.WiertlaCNC.activeTabType === 'koronki' && window.WiertlaCNC.filters.category && window.WiertlaCNC.filters.category !== '' && window.WiertlaCNC.filters.category !== 'wszystkie') {
        const koronkiType = window.WiertlaCNC.filters.category;
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || '';
          const title = product.title || '';
          
          // Check if the product contains the selected koronki type in SKU or title
          return sku.toUpperCase().includes(koronkiType) || title.toUpperCase().includes(koronkiType);
        });
      }
      
      // If crown type filter exists (KK, KI, etc.), apply it
      if (window.WiertlaCNC.activeTabType === 'koronki' && window.WiertlaCNC.filters.crown && window.WiertlaCNC.filters.crown !== 'all') {
        const crownType = window.WiertlaCNC.filters.crown;
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || '';
          return sku.includes(crownType);
        });
      }

      // Apply manufacturer filter
      if (window.WiertlaCNC.filters.manufacturer && window.WiertlaCNC.filters.manufacturer !== 'all') {
        const manufacturerMapping = {
          'sandvik': 'Sandvik',
          'iscar': 'ISCAR',
          'walter': 'Walter',
          'kennametal': 'KENNAMETAL',
          'dsk': 'DSK',
          'amec': 'AMEC'
        };
        const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer.toLowerCase()];
        if (expectedManufacturer) {
          filteredProducts = filteredProducts.filter(product => {
            return product.vendor === expectedManufacturer;
          });
        }
      }

      // Tab-specific sorting
      if (activeTabType === 'wiertla') {
      filteredProducts.sort((a, b) => {
          const typeA = (a.type || '').toUpperCase();
          const typeB = (b.type || '').toUpperCase();
          if (typeA < typeB) return -1;
          if (typeA > typeB) return 1;
          return 0;
        });
      } else if (activeTabType === 'plytki' || activeTabType === 'koronki') {
        filteredProducts.sort((a, b) => {
          // Use rodzaj field if present, otherwise fallback to title
          const rodzajA = (a.rodzaj || a.title || '').toUpperCase();
          const rodzajB = (b.rodzaj || b.title || '').toUpperCase();
          if (rodzajA < rodzajB) return -1;
          if (rodzajA > rodzajB) return 1;
          return 0;
        });
      }

      // Sort by FI (diameter) in ascending order (rosnąco) for all tab types
      // Products without FI/średnica are pushed to the end
      filteredProducts.sort((a, b) => {
        // Get FI values from different possible fields
        const getFiValue = (product) => {
          let fi = product.custom_fi || product.custom_srednica || product.custom_srednica_display || '';
          if (typeof fi === 'string') {
            // Handle range values like "12,50-13,00" by taking the first number
            if (fi.includes('-')) {
              fi = fi.split('-')[0].trim();
            }
            // Replace comma with dot for decimal conversion
            fi = fi.replace(',', '.');
            // Remove any remaining non-numeric characters except decimal point
            fi = fi.replace(/[^0-9.]/g, '');
          }
          const numValue = parseFloat(fi);
          // Missing/invalid values return Infinity so they go to the end
          return isNaN(numValue) ? Number.POSITIVE_INFINITY : numValue;
        };
        
        const fiA = getFiValue(a);
        const fiB = getFiValue(b);
        const aFinite = isFinite(fiA);
        const bFinite = isFinite(fiB);
        
        // Explicitly push non-finite (missing) values to the end
        if (!aFinite && bFinite) return 1;
        if (aFinite && !bFinite) return -1;
        if (!aFinite && !bFinite) return 0;
        
        // Sort in ascending order (smallest to largest)
        return fiA - fiB;
      });



      return filteredProducts;
    }
    
    // Update filter functions
       
        // Make filterProducts globally accessible
    window.filterProducts = filterProducts;
    
    // Add a temporary filter function that can be called from the console
    window.tempFilterByTitle = function(searchTerm) {
      // Store the original allProducts
      if (!window._originalProducts) {
        window._originalProducts = [...allProducts];
      }
      
      // Filter products by title
      allProducts = window._originalProducts.filter(product => {
        const title = (product.title || '').toLowerCase();
        return title.includes(searchTerm.toLowerCase());
      });
      
      // Apply filters to update the table
      applyFilters();
      
      // Log the number of filtered products
    };
    
    // Function to reset the temporary filter
    window.resetTempFilter = function() {
      if (window._originalProducts) {
        allProducts = [...window._originalProducts];
        applyFilters();
      }
    };
    
    // Apply filters and pagination
    function applyFilters() {
      
      // Get filtered products using filterProducts function
      const filteredProducts = filterProducts();
      
      
      // Update pagination
      window.totalPages = Math.ceil(filteredProducts.length / window.itemsPerPage);
      
      // Reset page if needed
      if (window.currentPage > window.totalPages) {
        window.currentPage = window.totalPages > 0 ? window.totalPages : 1;
      }
      
      // Calculate slice indexes for pagination
      const startIndex = (window.currentPage - 1) * window.itemsPerPage;
      const endIndex = startIndex + window.itemsPerPage;
      const productsToShow = filteredProducts.slice(startIndex, endIndex);
      
      
      // Generate table with filtered and paginated products
      generateTable(productsToShow);
      updatePaginationButtons();
      
      // Update results count
      const resultsCount = document.querySelector('.wiertla-categories__results-count');
      const resultsNumbers = document.querySelector('#resultsCount');
      
      if (resultsCount && resultsNumbers) {
        const startDisplay = filteredProducts.length > 0 ? startIndex + 1 : 0;
        const endDisplay = Math.min(endIndex, filteredProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsNumbers.textContent = format.replace('{0}', startDisplay)
                                         .replace('{1}', endDisplay)
                                         .replace('{2}', filteredProducts.length);
      }
      
      // Synchronize active states for category icons
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
        const itemCategory = item.dataset.category;
        if (itemCategory === window.selectedCategory) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
      
      // Synchronize active states for filter buttons
      document.querySelectorAll('.wiertla-categories__filter-button').forEach(btn => {
        const btnFilter = btn.getAttribute('data-filter');
        if (btnFilter === window.selectedCategory) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Update fullscreen mode if active
      const fullscreenMode = document.querySelector('.wiertla-categories__fullscreen-mode');
      if (fullscreenMode && fullscreenMode.classList.contains('active')) {
        applyFullscreenFilters();
      }
      
      // Update URL parameters
      updateUrlParams();
    }
    
    // Make it globally available
    window.applyFilters = applyFilters;
    
    // Update pagination button states
    function updatePaginationButtons() {
      const prevButton = document.getElementById('prevPage');
      const nextButton = document.getElementById('nextPage');
      
      if (prevButton) {
        prevButton.disabled = window.currentPage <= 1;
      } else {
        console.error('Previous button not found');
      }
      
      if (nextButton) {
        nextButton.disabled = window.currentPage >= window.totalPages;
      } else {
        console.error('Next button not found');
      }
    }
    
    // Handle pagination button clicks
    const prevButton = document.getElementById('prevPage');
    const nextButton = document.getElementById('nextPage');
    
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        if (window.currentPage > 1) {
          window.currentPage--;
          applyFilters();
          
          // Scroll to top of table on mobile after pagination
          if (window.innerWidth <= 1024) {
            const tableContainer = document.querySelector('.wiertla-categories__table-container') || 
                                 document.querySelector('.wiertla-categories__mobile-view') ||
                                 document.querySelector('#productsTableBody');
            
            if (tableContainer) {
              const offsetTop = tableContainer.getBoundingClientRect().top + window.pageYOffset - 20;
              window.scrollTo({
                top: offsetTop,
                behavior: 'smooth'
              });
            }
          }
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function() {
        if (window.currentPage < window.totalPages) {
          window.currentPage++;
          applyFilters();
          
          // Scroll to top of table on mobile after pagination
          if (window.innerWidth <= 1024) {
            const tableContainer = document.querySelector('.wiertla-categories__table-container') || 
                                 document.querySelector('.wiertla-categories__mobile-view') ||
                                 document.querySelector('#productsTableBody');
            
            if (tableContainer) {
              const offsetTop = tableContainer.getBoundingClientRect().top + window.pageYOffset - 20;
              window.scrollTo({
                top: offsetTop,
                behavior: 'smooth'
              });
            }
          }
        }
      });
    }
    
    // Handle search input
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        window.currentFilters.search = this.value.trim();
        window.currentPage = 1;
        applyFilters();
      });
    }
    
    // Handle fullscreen button
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');
    const fullscreenMode = document.querySelector('.wiertla-categories__fullscreen-mode');
    const fullscreenClose = document.querySelector('.wiertla-categories__fullscreen-close');
    const fullscreenContent = document.querySelector('.wiertla-categories__fullscreen-content');
    
    if (fullscreenBtn && fullscreenMode && fullscreenContent) {
      fullscreenBtn.addEventListener('click', function() {
        // Add fullscreen header with proper translation elements
        const fullscreenHeader = document.createElement('div');
        fullscreenHeader.className = 'wiertla-categories__fullscreen-header';
        
        fullscreenHeader.innerHTML = `
          <div class="wiertla-categories__fullscreen-title">
            <h2>${translations[currentLanguage].fullscreen_title}</h2>
            <p>${translations[currentLanguage].fullscreen_description}</p>
          </div>
          <button class="wiertla-categories__fullscreen-close">
            <span>${translations[currentLanguage].close_fullscreen}</span>
            <img src="{{ 'zoom_out_map.svg' | asset_url }}" alt="Exit Fullscreen" width="24" height="24">
          </button>
        `;
        
        // Replace existing fullscreen content
        fullscreenMode.innerHTML = '';
        fullscreenMode.appendChild(fullscreenHeader);
        
        // Create container for the content
        const fullscreenContainer = document.createElement('div');
        fullscreenContainer.className = 'wiertla-categories__fullscreen-container';
        fullscreenMode.appendChild(fullscreenContainer);
    
        // Clone filters and table
        const filters = document.querySelector('.wiertla-categories__filters').cloneNode(true);
        const tableContainer = document.querySelector('.wiertla-categories__table-container').cloneNode(true);
        const resultsContainer = document.querySelector('.wiertla-categories__results').cloneNode(true);
    
        // Update IDs in cloned content to avoid duplicates
        const newTableBody = tableContainer.querySelector('#productsTableBody');
        if (newTableBody) {
          newTableBody.id = 'fullscreenProductsTableBody';
        }
    
        const newResultsCount = resultsContainer.querySelector('#resultsCount');
        if (newResultsCount) {
          newResultsCount.id = 'fullscreenResultsCount';
        }
    
        const newPrevButton = resultsContainer.querySelector('#prevPage');
        if (newPrevButton) {
          newPrevButton.id = 'fullscreenPrevPage';
          // Set translation text
          newPrevButton.setAttribute('data-text', translations[currentLanguage].show_previous);
        }
    
        const newNextButton = resultsContainer.querySelector('#nextPage');
        if (newNextButton) {
          newNextButton.id = 'fullscreenNextPage';
          // Set translation text
          newNextButton.setAttribute('data-text', translations[currentLanguage].show_next);
        }
    
        // Create fullscreen layout
        const fullscreenLayout = document.createElement('div');
        fullscreenLayout.className = 'wiertla-categories__fullscreen-layout';
    
        // Create left and right columns
        const leftColumn = document.createElement('div');
        leftColumn.className = 'wiertla-categories__fullscreen-left';
    
        const rightColumn = document.createElement('div');
        rightColumn.className = 'wiertla-categories__fullscreen-right';
    
        // Add preview component to left column
        leftColumn.innerHTML = `
          <div class="wiertla-categories__preview">
            <h3 class="wiertla-categories__preview-title">${translations[currentLanguage].preview_title}</h3>
            <div class="wiertla-categories__preview-image">
              <img src="{{ 'custom_icons.png' | asset_url }}" alt="Preview" class="wiertla-categories__preview-img" width="300" height="200">
            </div>
            <p class="wiertla-categories__preview-text">${translations[currentLanguage].preview_instruction}</p>
          </div>
        `;
    
        // Inject mainType dropdown into cloned filters-left, next to "Wszystkie"
        (function addMainTypeDropdown() {
          const filtersLeft = filters.querySelector('.wiertla-categories__filters-left');
          if (!filtersLeft) return;
          const wszBtn = filtersLeft.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
          const select = document.createElement('select');
          select.className = 'wiertla-categories__filter wiertla-filter-mainType';
          select.setAttribute('data-filter', 'mainType');
          select.innerHTML = `
            <option value="wiertla">WIERTŁA</option>
            <option value="plytki">PŁYTKI</option>
            <option value="koronki">KORONKI</option>
          `;
          if (wszBtn) {
            wszBtn.insertAdjacentElement('afterend', select);
          } else {
            filtersLeft.insertBefore(select, filtersLeft.firstChild);
          }

          // Show correct filter select based on tab
          function setFilterVisibility(tabType) {
            const typSel = filtersLeft.querySelector('.wiertla-filter-type[data-tab="wiertla"]');
            const rodzP = filtersLeft.querySelector('.wiertla-filter-rodzaj[data-tab="plytki"]');
            const rodzK = filtersLeft.querySelector('.wiertla-filter-rodzaj[data-tab="koronki"]');
            if (typSel) typSel.style.display = (tabType === 'wiertla') ? '' : 'none';
            if (rodzP) rodzP.style.display = (tabType === 'plytki') ? '' : 'none';
            if (rodzK) rodzK.style.display = (tabType === 'koronki') ? '' : 'none';
          }

          // Initialize selection from URL or default
          const urlParams = new URLSearchParams(window.location.search);
          const initialTabType = urlParams.get('mainType') || (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
          select.value = initialTabType;
          if (!window.WiertlaCNC) window.WiertlaCNC = {};
          window.WiertlaCNC.activeTabType = initialTabType;
          setFilterVisibility(initialTabType);

          // Handle changes
          select.addEventListener('change', function() {
            const tabType = this.value;
            window.WiertlaCNC.activeTabType = tabType;
            // Update URL param
            const url = new URL(window.location.href);
            url.searchParams.set('mainType', tabType);
            window.history.replaceState({}, '', url.toString());
            // Reset pagination and enforce 250 per page in fullscreen
            window.currentPage = 1;
            window.itemsPerPage = 250;
            // Update headers and rerender
            try { updateTableHeaders(tabType); } catch (e) {}
            setFilterVisibility(tabType);
            applyFullscreenFilters();
          });
        })();

        rightColumn.appendChild(fullscreenTabs);
        // Add filters and table to right column
        rightColumn.appendChild(filters);
        rightColumn.appendChild(tableContainer);
    
        // Assemble the layout
        fullscreenLayout.appendChild(leftColumn);
        fullscreenLayout.appendChild(rightColumn);
    
        // Clear and update fullscreen content
        fullscreenContainer.innerHTML = '';
        fullscreenContainer.appendChild(fullscreenLayout);
        fullscreenContainer.appendChild(resultsContainer);
    
        // Show fullscreen mode
        fullscreenMode.classList.add('active');
        document.body.style.overflow = 'hidden';
    
        // Use URL or default to set initial tab for fullscreen
        const urlParams = new URLSearchParams(window.location.search);
        const initialTabType = urlParams.get('mainType') || (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
        if (!window.WiertlaCNC) window.WiertlaCNC = {};
        window.WiertlaCNC.activeTabType = initialTabType;

        // Set items per page to 250 in fullscreen context
        window.currentPage = 1;
        window.itemsPerPage = 250;

        // Activate initial tab button
        fullscreenTabs.querySelectorAll('.wiertla-categories__fullscreen-tab').forEach(btn => {
          btn.classList.toggle('active', btn.getAttribute('data-tab-type') === initialTabType);
        });

        // Ensure headers display according to current tab and viewport in fullscreen too
        try { updateTableHeaders(initialTabType); } catch (e) {}

        // Render table contents for fullscreen
        applyFullscreenFilters();

        // Wire up tab switching inside fullscreen
        fullscreenTabs.addEventListener('click', function(e) {
          const tabBtn = e.target.closest('.wiertla-categories__fullscreen-tab');
          if (!tabBtn) return;
          const tabType = tabBtn.getAttribute('data-tab-type');
          // Update active state
          fullscreenTabs.querySelectorAll('.wiertla-categories__fullscreen-tab').forEach(btn => btn.classList.remove('active'));
          tabBtn.classList.add('active');
          // Update global active tab and URL
          window.WiertlaCNC.activeTabType = tabType;
          const url = new URL(window.location.href);
          url.searchParams.set('mainType', tabType);
          window.history.replaceState({}, '', url.toString());
          // Reset pagination for fullscreen and re-render
          window.currentPage = 1;
          window.itemsPerPage = 250;
          try { updateTableHeaders(tabType); } catch (e) {}
          applyFullscreenFilters();
        });
    
        // Re-apply filters to the cloned table
        applyFullscreenFilters();
    
        // Add event listeners to cloned elements
        addFullscreenEventListeners();
    
        // Add close button event listener
        const newCloseButton = fullscreenMode.querySelector('.wiertla-categories__fullscreen-close');
        if (newCloseButton) {
          newCloseButton.addEventListener('click', function() {
            fullscreenMode.classList.remove('active');
            document.body.style.overflow = '';
          });
        }
      });
    }
    
    function applyFullscreenFilters() {
      try { console.log('[Fullscreen] applyFullscreenFilters start', { activeTabType: window.WiertlaCNC && window.WiertlaCNC.activeTabType, itemsPerPage: window.itemsPerPage, currentPage: window.currentPage }); } catch (e) {}
      const filteredProducts = filterProducts();
      try { console.log('[Fullscreen] filtered count', filteredProducts && filteredProducts.length); } catch (e) {}
      const startIndex = (window.currentPage - 1) * window.itemsPerPage;
      const endIndex = startIndex + window.itemsPerPage;
      const productsToShow = filteredProducts.slice(startIndex, endIndex);
      
      const tableBody = document.querySelector('.wiertla-categories__fullscreen-content .wiertla-categories__table tbody') || document.getElementById('fullscreenProductsTableBody');
      try { console.log('[Fullscreen] tableBody found', !!tableBody); } catch (e) {}
      if (!tableBody) {
        console.error('[Fullscreen] table body element not found!');
        return;
      }
      
      tableBody.innerHTML = '';
      
      if (productsToShow.length === 0) {
        const noResultsRow = document.createElement('tr');
        noResultsRow.innerHTML = `<td colspan="7" style="text-align: center; padding: 20px;">${translations[currentLanguage].no_results}</td>`;
        tableBody.appendChild(noResultsRow);
        try { console.log('[Fullscreen] no results'); } catch (e) {}
        return;
      }
      
      try { console.log('[Fullscreen] render rows', productsToShow.length); } catch (e) {}
      // Safety filter for fullscreen: ONLY show items with stock/availability AND valid SKU
      function __fsNum(v){ var n = Number((v||'').toString().replace(',', '.')); return isNaN(n)?0:n; }
      function __fsAvail(p){
        if (!p) return false;
        // Only check Shopify's native availability - require actual inventory
        if (__fsNum(p.inventory_quantity) > 0) return true;
        if (Array.isArray(p.variants)){
          for (var i=0;i<p.variants.length;i++){
            var vv = p.variants[i] || {};
            if (__fsNum(vv.inventory_quantity) > 0) return true;
          }
        }
        // Don't trust product.available flag alone - require inventory
        return false;
      }
      function __fsHasSku(p){ try { return !!(p && p.sku && String(p.sku).trim() && String(p.sku).trim() !== '-'); } catch(_) { return false; } }
      const productsToRender = productsToShow.filter(function(p){ return __fsAvail(p) && __fsHasSku(p); });
      productsToRender.forEach(product => {
        const row = document.createElement('tr');
        row.className = 'wiertla-categories__table-row';
        row.setAttribute('data-product-id', product.id);
        
        // Add data attributes for filtering
        row.setAttribute('data-category', product.custom_category || '');
        row.setAttribute('data-status', product.rentable ? 'true' : 'false');
        row.setAttribute('data-type', product.type || '');
        row.setAttribute('data-crown', product.custom_crown || '');
        row.setAttribute('data-vendor', product.vendor || product.custom_manufacturer || '');
        row.setAttribute('data-sku', product.sku || product.custom_symbol || product.custom_kod_producenta || '');
        const productUrl = (product.url && product.url !== '#') ? product.url : (product.handle ? ('/products/' + product.handle) : '');
        if (productUrl) row.setAttribute('data-href', productUrl);

        const fiVal = (function(p){
          const fi = p.custom_fi || p.custom_srednica || p.fi || (p.metafields && p.metafields.custom && p.metafields.custom.diameter) || p.diameter;
          if (!fi) return '-';
          const fiStr = String(fi).trim();
          return fiStr ? ('⌀ ' + fiStr.replace(/^⌀\s*/, '')) : '-';
        })(product);
        const lenVal = (function(p){
          const v = p.custom_working_length || p.custom_xd || (p.metafields && p.metafields.custom && p.metafields.custom.working_length) || p.length || p.d || p.depth;
          return (v && String(v).trim()) ? String(v) : '-';
        })(product);
        const symVal = (function(p){
          const v = p.custom_symbol || p.custom_kod_producenta || p.symbol || p.sku;
          return (v && String(v).trim()) ? String(v) : '-';
        })(product);
        try { console.log('[Fullscreen] row', { fi: fiVal, len: lenVal, sym: symVal }); } catch (e) {}
        
        row.innerHTML = `
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
            <img src="${product.typeIcon}" alt="${product.type}" class="wiertla-categories__type-icon">
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
            ${fiVal}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
            ${lenVal}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
            ${symVal}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor" data-href="/products/${product.handle || ''}">
            ${product.vendor || product.custom_manufacturer || '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
            ${product.price ? `${product.price} zł` : '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--name">
            ${product.name || '-'}
          </td>
        `;
        // Always set data-image with the product's real image when building the row
        (function setRowImageData() {
          var url = null;
          try {
            if (product && product.featured_media && product.featured_media.preview_image) url = product.featured_media.preview_image.src;
            if (!url && product && product.featured_image) url = product.featured_image.src || product.featured_image;
            if (!url && Array.isArray(product.images) && product.images.length) url = product.images[0].src || product.images[0];
            if (!url && product && product.image) url = product.image.src || product.image;
            if (!url && Array.isArray(product.media) && product.media.length && product.media[0].preview_image) url = product.media[0].preview_image.src;
            if (!url && Array.isArray(product.variants) && product.variants.length && product.variants[0].featured_image) url = product.variants[0].featured_image.src || product.variants[0].featured_image;
          } catch(e) {}
          if (!url) url = "{{ 'custom_icons.png' | asset_url }}";
          row.setAttribute('data-image', url);
        })();
        
        row.addEventListener('click', function(e) {
          if (e.target.tagName !== 'A' && e.target.tagName !== 'IMG') {
            const link = this.querySelector('.wiertla-categories__product-link');
            if (link) {
              window.location.href = link.getAttribute('href');
            }
          }
        });
        
        tableBody.appendChild(row);
      });
      
      // Update result count in fullscreen mode
      const resultsCount = document.getElementById('fullscreenResultsCount') || document.querySelector('.wiertla-categories__fullscreen-right .wiertla-categories__results-numbers');
      if (resultsCount) {
        const startIndex = (window.currentPage - 1) * window.itemsPerPage + 1;
        const endIndex = Math.min(startIndex + productsToRender.length - 1, filteredProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsCount.textContent = format.replace('{0}', startIndex).replace('{1}', endIndex).replace('{2}', filteredProducts.length);
      }
      
      // Update pagination buttons
      const prevButton = document.getElementById('fullscreenPrevPage') || document.querySelector('.wiertla-categories__fullscreen-right #prevPage');
      const nextButton = document.getElementById('fullscreenNextPage') || document.querySelector('.wiertla-categories__fullscreen-right #nextPage');
      
      if (prevButton) {
        prevButton.disabled = window.currentPage <= 1;
      }
      
      if (nextButton) {
        nextButton.disabled = window.currentPage >= window.totalPages;
      }
      
      // Synchronize active states for category icons in fullscreen view
      document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__icon-item').forEach(item => {
        const itemCategory = item.dataset.category;
        if (itemCategory === window.selectedCategory) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
      
      // Synchronize active states for filter buttons in fullscreen view
      document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button').forEach(btn => {
        const btnFilter = btn.getAttribute('data-filter');
        if (btnFilter === window.selectedCategory) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }
    
    function addFullscreenEventListeners() {
      // Handle fullscreen pagination
      const prevButton = document.getElementById('fullscreenPrevPage');
      const nextButton = document.getElementById('fullscreenNextPage');
      
      if (prevButton) {
        prevButton.addEventListener('click', function() {
          if (window.currentPage > 1) {
            window.currentPage--;
            applyFilters(); // Update main view
            applyFullscreenFilters(); // Update fullscreen view
          }
        });
      }
      
      if (nextButton) {
        nextButton.addEventListener('click', function() {
          if (window.currentPage < window.totalPages) {
            window.currentPage++;
            applyFilters(); // Update main view
            applyFullscreenFilters(); // Update fullscreen view
          }
        });
      }
      
      // Handle fullscreen filters
      const filterSelects = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter');
      
      filterSelects.forEach(select => {
        select.addEventListener('change', function() {
          const filterType = this.getAttribute('data-filter');
          currentFilters[filterType] = this.value;
          window.currentPage = 1;
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen per-page buttons
      const perPageButtons = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__per-page-button');
      perPageButtons.forEach(button => {
        button.addEventListener('click', function() {
          const value = parseInt(this.getAttribute('data-value'));
          
          // Update active button
          perPageButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Update items per page
          window.itemsPerPage = value;
          window.currentPage = 1;
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen filter buttons
      const filterButtons = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button');
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          const filterType = this.getAttribute('data-filter');
          
          // Update active button
          filterButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Update selected category
          window.selectedCategory = filterType;
          window.currentPage = 1;
          
          // If "Wszystkie" is clicked, reset all filters
          if (filterType === 'wszystkie') {
            currentFilters = {
              type: '',
              crown: '',
              manufacturer: '',
              search: ''
            };
            
            // Reset filter dropdowns in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter dropdowns in main view as well
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Clear search input
            const searchInput = document.querySelector('.wiertla-search__input');
            if (searchInput) {
              searchInput.value = '';
            }
          }
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen icon items
      const iconItems = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__icon-item');
      iconItems.forEach(item => {
        item.addEventListener('click', function() {
          // Remove active class from all icons in fullscreen view
          iconItems.forEach(icon => icon.classList.remove('active'));
          
          // Add active class to clicked icon
          this.classList.add('active');
          
          // Get category from data attribute
          const category = this.dataset.category || 'wszystkie';
          
          // Update selected category
          window.selectedCategory = category;
          window.currentPage = 1;
          // If "Wszystkie" is clicked, reset all filters
          if (category === 'wszystkie') {
            currentFilters = {
              type: '',
              crown: '',
              manufacturer: '',
              search: ''
            };
            
            // Reset filter dropdowns in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter dropdowns in main view as well
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter buttons in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button').forEach(btn => {
              btn.classList.remove('active');
              if (btn.getAttribute('data-filter') === 'wszystkie') {
                btn.classList.add('active');
              }
            });
            
            // Reset filter buttons in main view
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter-button').forEach(btn => {
              btn.classList.remove('active');
              if (btn.getAttribute('data-filter') === 'wszystkie') {
                btn.classList.add('active');
              }
            });
            
            // Clear search input
            const searchInput = document.querySelector('.wiertla-search__input');
            if (searchInput) {
              searchInput.value = '';
            }
          }
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
    }
    
    // Add event delegation for filter icons
    document.addEventListener('click', function(event) {
      const iconItem = event.target.closest('.wiertla-categories__icon-item');
      if (iconItem) {
        // Remove active class from all icons in both icon containers
        document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
          item.classList.remove('active');
        });
        
        // Add active class to clicked icon
        iconItem.classList.add('active');
        
        const category = iconItem.dataset.category || 'wszystkie';
        
        // 🐛 DEBUG: Log icon click details
        
        // If the clicked item is "Wszystkie", reset all filters except pagination
        if (category === 'wszystkie' || !category) {
          currentFilters = {
            type: '',
            crown: '',
            manufacturer: '',
            search: ''
          };
          
          // Reset filter dropdowns
          document.querySelectorAll('.wiertla-categories__filter').forEach(filter => {
            filter.value = '';
          });
          
          // Reset filter buttons
          document.querySelectorAll('.wiertla-categories__filter-button').forEach(btn => {
            btn.classList.remove('active');
          });
          
          // Set "Wszystkie" button to active
          const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
          if (wszystkieBtn) {
            wszystkieBtn.classList.add('active');
          }
          
          // Clear search input
          const searchInput = document.querySelector('.wiertla-search__input');
          if (searchInput) {
            searchInput.value = '';
          }
        } else {
          // Set the appropriate filter based on the category
          currentFilters.type = category;
        }
        
        // Update selected category and apply filters
        window.selectedCategory = category;
        window.currentPage = 1;
        
        
        applyFilters();
    
      }
    });
    
    // Add event delegation for filter buttons and dropdowns
    document.addEventListener('click', function(event) {
      const filterButton = event.target.closest('.wiertla-categories__filter-button');
      if (filterButton) {
        const allFilterButtons = document.querySelectorAll('.wiertla-categories__filter-button');
        allFilterButtons.forEach(btn => btn.classList.remove('active'));
        filterButton.classList.add('active');
        
        window.selectedCategory = filterButton.getAttribute('data-filter');
        window.currentPage = 1;
        
        // If clicking on "Wszystkie" button, reset all filters
        if (window.selectedCategory === 'wszystkie') {
          // Reset filter state
          currentFilters = {
            type: '',
            crown: '',
            manufacturer: '',
            search: ''
          };
          
          // Reset all dropdown filters to default values
          document.querySelectorAll('.wiertla-categories__filter').forEach(filter => {
            filter.value = '';
          });
          
          // Clear search input
          const searchInput = document.querySelector('.wiertla-search__input');
          if (searchInput) {
            searchInput.value = '';
          }
        }
        
        applyFilters();
      }
      
      const perPageButton = event.target.closest('.wiertla-categories__per-page-button');
      if (perPageButton) {
        const allPerPageButtons = document.querySelectorAll('.wiertla-categories__per-page-button');
        allPerPageButtons.forEach(btn => btn.classList.remove('active'));
        perPageButton.classList.add('active');
        
        window.itemsPerPage = parseInt(perPageButton.getAttribute('data-value'));
        window.currentPage = 1;
        applyFilters();
      }
    });
    
    
    // Add change event listeners for all filter dropdowns
    document.addEventListener('change', function(event) {
      const filterSelect = event.target.closest('.wiertla-categories__filter');
      if (filterSelect) {
        // Skip processing during category resets to prevent interference
        if (window.isResettingCategories) {
          return;
        }
        
        const filterType = filterSelect.getAttribute('data-filter');
        if (filterType) {
          // Update filters whether value is changed to something or cleared
          if (currentFilters[filterType] !== filterSelect.value) {
            currentFilters[filterType] = filterSelect.value;
            
            // Also sync to WiertlaCNC.filters to ensure type filtering works
            if (!window.WiertlaCNC.filters) {
              window.WiertlaCNC.filters = {};
            }
            window.WiertlaCNC.filters[filterType] = filterSelect.value;
            
            
            // Sync with category icons based on filter type
            if (filterType === 'typ') {
              syncTypeFilterWithIcons(filterSelect.value, 'typ');
            } else if (filterType === 'rodzaj') {
              syncRodzajFilterWithIcons(filterSelect.value);
            }
            
            window.currentPage = 1;
            
            // Remove active class from "Wszystkie" button when a filter is selected
            if (filterSelect.value !== '') {
              const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
              if (wszystkieBtn) {
                wszystkieBtn.classList.remove('active');
              }
            }
            
            applyFilters();
          }
        }
      }
    });
    
    // Add dummy product data if none exists
    if (allProducts.length === 0) {
      allProducts = [
        {
          id: 1,
          title: "Example Drill Bit",
          url: "#",
          type: "VW",
          vendor: "Sandvik",
          price: "120,00 zł",
          available: true,
          fi: "12",
          length: "85",
          symbol: "VW-12-85",
          rentable: true,
          image: "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          large_image: "{{ 'ico_big_koronkowe.svg' | asset_url }}"
        },
        {
          id: 2,
          title: "Płytkowy Wiertło",
          url: "#",
          type: "PR",
          vendor: "Komet",
          price: "145,50 zł",
          available: true,
          fi: "8",
          length: "65",
          symbol: "PR-8-65",
          rentable: false,
          image: "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          large_image: "{{ 'ico_big_koronkowe.svg' | asset_url }}"
        }
      ];
    }
    
    // Move the preview container creation up, before calling applyFilters
    // Ensure preview container exists, then set default and wire listeners
    function ensurePreviewImageElement() {
      let img = document.getElementById('tableHoverPreviewImg') || document.querySelector('.wiertla-categories__preview-image img');
      if (!img) {
        const tablePreviewContainer = document.createElement('div');
        tablePreviewContainer.className = 'wiertla-categories__table-preview desktop';
        tablePreviewContainer.innerHTML = `
          <div class="wiertla-categories__preview-image">
            <img id="tableHoverPreviewImg" src="{{ 'custom_icons.png' | asset_url }}" alt="Preview" class="wiertla-categories__preview-img">
          </div>
        `;
        const leftColumn = document.querySelector('.wiertla-categories__left-column');
        if (leftColumn) {
          leftColumn.appendChild(tablePreviewContainer);
        } else {
          // As a fallback, append to body fixed container
          let fallback = document.querySelector('.wiertla-categories__preview-container');
          if (!fallback) {
            fallback = document.createElement('div');
            fallback.className = 'wiertla-categories__preview-container';
            fallback.style.cssText = `position: fixed; left: 0; top: 0; width: 300px; height: 100vh; background: white; z-index: 1000; padding: 20px; display: none; box-shadow: 2px 0 5px rgba(0,0,0,0.1);`;
            fallback.innerHTML = `
              <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
                <img src="{{ 'custom_icons.png' | asset_url }}" alt="" style="max-width: 100%; max-height: 100%; object-fit: contain;">
              </div>
            `;
            document.body.appendChild(fallback);
          }
        }
        img = document.getElementById('tableHoverPreviewImg') || document.querySelector('.wiertla-categories__preview-image img');
      }
      return img;
    }

    const previewContainer = ensurePreviewImageElement();
    if (previewContainer) {
      // Set default image
      previewContainer.src = "{{ 'custom_icons.png' | asset_url }}";

      // Add event delegation for row hover to update preview image
      const tableBody = document.getElementById('productsTableBody');
      if (tableBody) {
        // Function to update preview image
        function updatePreviewImage(imageUrl, showActive = true) {
          // (debug removed)
          // Find all preview images in both main and fullscreen views
          const previewImages = document.querySelectorAll('.wiertla-categories__preview-image img');
          try {
            if (window.WiertlaCNC && window.WiertlaCNC.debugPreview) {
              console.log('targets count:', previewImages.length);
              previewImages.forEach((img, idx) => {
                console.log(`#${idx}`, { id: img.id, current: img.src });
              });
            }
          } catch(e) {}
          previewImages.forEach(img => {
            img.src = imageUrl;
            try {
              img.onerror = function(){
                // (debug removed)
              };
              img.onload = function(){
                // (debug removed)
              };
            } catch(e) {}
          });
          try { if (window.WiertlaCNC && window.WiertlaCNC.debugPreview) { console.groupEnd(); } } catch(e) {}
          
          // Update active state on preview containers
          const previewSections = document.querySelectorAll('.wiertla-categories__preview');
          previewSections.forEach(section => {
            if (showActive) {
              section.classList.add('active');
            } else {
              section.classList.remove('active');
            }
          });
        }
      
        // Helper: detect placeholder/fallback image
        function isFallbackImage(url) {
          if (!url) return true;
          try {
            const u = url.toString();
            return u.indexOf('custom_icons') !== -1 || u === 'null' || u === 'undefined';
          } catch(_) { return true; }
        }

        // Helper: normalize relative/ protocol-relative CDN URLs
        function normalizeCdnUrl(u) {
          if (!u) return '';
          if (u.startsWith('http://') || u.startsWith('https://')) return u;
          if (u.startsWith('//')) return location.protocol + u;
          if (u.startsWith('/')) return location.origin + u;
          return u;
        }

        // Throttled network fallback: fetch real product data from /products/<handle>.js and extract an image
        // Uses a small concurrency + rate limit and caches results to avoid 429s from the dev server
        (function setupThrottledFetcher(){
          const W = (window.__WiertlaImgCtl = window.__WiertlaImgCtl || {});
          W.cache = W.cache || new Map(); // handle -> Promise<string> or string
          W.inFlight = W.inFlight || 0;
          W.queue = W.queue || [];
          W.maxConcurrent = 2;
          W.minGapMs = 180; // ~5-6 req/sec total
          W.nextAt = W.nextAt || 0;
          W.retryMap = W.retryMap || new Map(); // handle -> retryCount

          function pickImageFromPayload(data){
            if (!data) return '';
            const list = [];
            if (data.featured_image) list.push(data.featured_image);
            if (Array.isArray(data.images) && data.images[0]) list.push(data.images[0]);
            for (let i=0;i<list.length;i++){
              const c = (list[i] || '').toString().trim();
              if (c) return normalizeCdnUrl(c);
            }
            return '';
          }

          async function doFetch(handle){
            try {
              const res = await fetch(`/products/${handle}.js`, { credentials: 'same-origin' });
              if (res.status === 429) throw new Error('RATE_LIMIT');
              if (!res.ok) return '';
              const data = await res.json();
              return pickImageFromPayload(data) || '';
            } catch (e) {
              if (e && e.message === 'RATE_LIMIT') return '___RETRY___';
              return '';
            }
          }

          function schedule(){
            if (W.inFlight >= W.maxConcurrent) return;
            const now = Date.now();
            if (now < W.nextAt) {
              setTimeout(schedule, W.nextAt - now + 5);
              return;
            }
            const task = W.queue.shift();
            if (!task) return;
            W.inFlight++;
            W.nextAt = Date.now() + W.minGapMs;
            doFetch(task.handle).then((url)=>{
              if (url === '___RETRY___') {
                const retries = (W.retryMap.get(task.handle) || 0) + 1;
                if (retries <= 3) {
                  W.retryMap.set(task.handle, retries);
                  // Exponential-ish backoff
                  setTimeout(()=>{ W.queue.push(task); schedule(); }, 400 * retries);
                } else {
                  task.resolve('');
                }
              } else {
                task.resolve(url || '');
              }
            }).catch(()=>task.resolve(''))
            .finally(()=>{
              W.inFlight--;
              // Allow next task soon
              setTimeout(schedule, 20);
            });
          }

          window.fetchImageFromProductHandle = function(handle){
            if (!handle) return Promise.resolve(null);
            const c = W.cache.get(handle);
            if (c) return Promise.resolve(c);
            let resolve;
            const p = new Promise((res)=>{ resolve = res; });
            W.cache.set(handle, p);
            W.queue.push({ handle: handle, resolve: function(url){
              // Cache final string to avoid re-awaiting a settled Promise chain in future calls
              W.cache.set(handle, url || '');
              resolve(url || '');
            }});
            schedule();
            return p;
          };
        })();
        // Local alias for convenience where a free function is referenced
        var fetchImageFromProductHandle = window.fetchImageFromProductHandle;

        // Global, robust pointer-based delegation so it works after pagination/updates
        document.addEventListener('pointerover', function(e) {
          const row = e.target.closest('tr.wiertla-categories__table-row');
          const fsRow = e.target.closest('#temp-fullscreen-view tbody tr');
          if (row || fsRow) {
            const r = row || fsRow;
            let imageUrl = r.getAttribute('data-image');
            // (debug removed)
            if (!imageUrl || imageUrl === 'undefined' || imageUrl === 'null' || isFallbackImage(imageUrl)) {
              try {
                var pid2 = r.getAttribute('data-product-id');
                var prod2 = null;
                if (window.products && Array.isArray(window.products)) {
                  prod2 = window.products.find(p => String(p.id) === String(pid2)) || null;
                }
                // (debug removed)
                var recomputed = prod2 ? resolveImageUrl(prod2, "{{ 'custom_icons.png' | asset_url }}") : null;
                if (recomputed) {
                  imageUrl = recomputed;
                  r.setAttribute('data-image', imageUrl);
                  // (debug removed)
                }
                // If still fallback or empty, attempt a network fetch by handle
                if (!imageUrl || isFallbackImage(imageUrl)) {
                  var handle = (r.getAttribute('data-href') || '').replace(/^.*\/products\//, '').replace(/\?.*$/, '').replace(/\/#.*$/, '');
                  if (!handle && prod2 && prod2.handle) handle = prod2.handle;
                  if (handle) {
                    fetchImageFromProductHandle(handle).then(function(fetchedUrl){
                      if (fetchedUrl && !isFallbackImage(fetchedUrl)) {
                        r.setAttribute('data-image', fetchedUrl);
                        updatePreviewImage(fetchedUrl, true);
                      }
                    }).catch(function(){ /* noop */ });
                  }
                }
              } catch(e) {}
            }
            if (imageUrl && imageUrl !== 'undefined' && imageUrl !== 'null' && !isFallbackImage(imageUrl)) {
              updatePreviewImage(imageUrl, true);
              return;
            }
          }
          // If pointer moved outside any table area, reset preview
          const inTableArea = e.target.closest('.wiertla-categories__table-container, #temp-fullscreen-view');
          if (!inTableArea) {
            updatePreviewImage("{{ 'custom_icons.png' | asset_url }}", false);
          }
        }, true);
        // Explicit reset on leave of a table row
        document.addEventListener('pointerout', function(e){
          const row = e.target.closest && e.target.closest('tr.wiertla-categories__table-row');
          const leavingTableArea = row && !row.contains(e.relatedTarget);
          if (leavingTableArea) {
            // (debug removed)
            updatePreviewImage("{{ 'custom_icons.png' | asset_url }}", false);
          }
        }, true);
      }
      
      // Preview block ensured above
    }
    
    // Initial table population
    applyFilters();
    
    // Set "Wszystkie" icon as active by default in both icon containers
    document.querySelectorAll('.wiertla-categories__icon-item').forEach((item, index, array) => {
      // Add active class to last icon in icon set (Wszystkie) or one with data-category="wszystkie"
      const isWszystkie = item.querySelector('.wiertla-categories__icon-label')?.textContent.trim().toUpperCase() === 'WSZYSTKIE' ||
                         item.dataset.category === 'wszystkie';
      
      if (isWszystkie || (index === array.length - 1 && array.length > 0)) {
        item.classList.add('active');
      } else {
        item.classList.remove('active');
      }
    });
    
    // Also set the "Wszystkie" filter button to active
    const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
    if (wszystkieBtn) {
      wszystkieBtn.classList.add('active');
    }
    
    // Initialize UI with current language
    updateUILanguage();
    
    // Set active language button
    document.querySelectorAll('.wiertla-categories__language-btn').forEach(btn => {
      if (btn.getAttribute('data-lang') === currentLanguage) {
        btn.classList.add('active');
      }
    });
    
    // Connect header language switcher to our translation system
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to header language links
      document.querySelectorAll('.header__lang-links a').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const lang = this.getAttribute('data-lang');
          if (lang && translations[lang]) {
            window.changeLanguage(lang);
            
            // Update active state in the header language links
            document.querySelectorAll('.header__lang-links a').forEach(l => {
              if (l.getAttribute('data-lang') === lang) {
                l.classList.add('active');
              } else {
                l.classList.remove('active');
              }
            });
          }
        });
      });
      
      // Set initial active state for the header language links
      document.querySelectorAll('.header__lang-links a').forEach(link => {
        if (link.getAttribute('data-lang') === currentLanguage) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    });
    
    // Watch for language changes in the header
    document.addEventListener('click', function(e) {
      // Look for header language links
      const langLink = e.target.closest('.header__lang-links a');
      if (langLink) {
        e.preventDefault(); // Prevent default to avoid page reload
        const lang = langLink.getAttribute('data-lang');
        if (lang && translations[lang]) {
          window.changeLanguage(lang);
          
          // Update active state in the header language links
          document.querySelectorAll('.header__lang-links a').forEach(l => {
            if (l.getAttribute('data-lang') === lang) {
              l.classList.add('active');
            } else {
              l.classList.remove('active');
            }
          });
        }
      }
    });
    
    // After DOM is fully loaded, force a redraw based on current size
    document.addEventListener('DOMContentLoaded', function() {
      const currentIsMobileView = window.innerWidth <= 1024;
      // Update global isMobileView
      isMobileView = currentIsMobileView;
      
      // Force a redraw after DOM is fully loaded
      setTimeout(function() {
        applyFilters();
      }, 100);
    });
    
    // Add ONE resize handler
    let resizeTimeout;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(function() {
        // Use the same approach as in generateTable
        const currentIsMobileView = window.innerWidth <= 1024;
        if (currentIsMobileView !== isMobileView) {
          isMobileView = currentIsMobileView;
          applyFilters(); // This will regenerate the table with the correct view
        }
      }, 250);
    });
    
    // Define the missing showProductImage and hideProductImage functions
  
    function formatSymbol(symbol) {
      if (!symbol || symbol === '-') return '-';
      return symbol;
    }
  
    // Only have ONE generateTable function
    function generateTable(products) {
      const tableBody = document.querySelector('.wiertla-categories__table tbody');
      if (!tableBody) {
        console.error('Table body element not found');
        return;
      }
      // Debug: log every product rendered into Koronki table
      try {
        var tabTypeDbg = (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
        if (tabTypeDbg === 'koronki' && Array.isArray(products)) {
          function dbgGetNum(v){ var n = Number((v||'').toString().replace(',', '.')); return isNaN(n)?0:n; }
          function dbgAvail(p){
            if (!p) return false;
            if (dbgGetNum(p.inventory_quantity) > 0) return true;
            if (Array.isArray(p.variants)){
              for (var i=0;i<p.variants.length;i++){
                var vv = p.variants[i] || {};
                if (dbgGetNum(vv.inventory_quantity) > 0) return true;
              }
            }
            return false;
          }
          console.group('[Koronki] render rows', products.length);
          products.forEach(function(p, idx){
            var sku = (p && p.sku) || '';
            var pref = sku.substring(0,2).toUpperCase();
            var kod = (p && (p.custom_kod_producenta || (p.metafields && p.metafields.custom && (p.metafields.custom.kod_producenta)))) || '';
            var qty = dbgGetNum(p && p.inventory_quantity);
            var varQtys = Array.isArray(p && p.variants) ? p.variants.map(function(v){ return dbgGetNum(v.inventory_quantity); }) : [];
            console.log(`#${idx+1}`, { sku: sku, prefix: pref, vendor: p && (p.custom_manufacturer || p.vendor), kod_producenta: kod, title: p && p.title, handle: p && p.handle, product_qty: qty, variant_qtys: varQtys, available: dbgAvail(p) });
          });
          console.groupEnd();
        }
      } catch(_) {}
      try {
        if (window.WiertlaDebugEnabled) {
          var sample = Array.isArray(products) ? products.slice(0, 30).map(function(p){ return p && p.sku; }).filter(Boolean) : [];
          console.log('[Render] generateTable', { count: (products && products.length) || 0, sampleSkus: sample });
          console.trace('[Render trace]');
        }
      } catch(_) {}

      // Clear existing table content
      tableBody.innerHTML = '';

      // Check if products array is valid
      if (!Array.isArray(products) || products.length === 0) {
        const noResultsRow = document.createElement('tr');
        noResultsRow.innerHTML = `
          <td colspan="7" class="wiertla-categories__table-cell" style="text-align: center; padding: 20px;">
            ${translations[currentLanguage].no_results || 'Brak wyników'}
          </td>
        `;
        tableBody.appendChild(noResultsRow);
        return;
      }

      // Safety filter: ONLY show items that have stock/availability
      // Products should already be filtered by applyFilters, but double-check here
      function __getNumberStrict(val){
        var n = Number((val || '').toString().replace(',', '.'));
        return isNaN(n) ? 0 : n;
      }
      function __hasAvailabilityStrict(p){
        if (!p) return false;
        // Only check Shopify's native availability - require actual inventory
        if (__getNumberStrict(p.inventory_quantity) > 0) return true;
        if (Array.isArray(p.variants)){
          for (var i=0;i<p.variants.length;i++){
            var vv = p.variants[i] || {};
            if (__getNumberStrict(vv.inventory_quantity) > 0) return true;
          }
        }
        // Don't trust product.available flag alone - require inventory
        return false;
      }
      function __hasSkuStrict(p){
        try { return !!(p && p.sku && String(p.sku).trim() && String(p.sku).trim() !== '-'); } catch(_) { return false; }
      }
      const __safeProducts = products.filter(function(p){
        // Only show products that have availability AND have a SKU
        return __hasAvailabilityStrict(p) && __hasSkuStrict(p);
      });

      if (__safeProducts.length === 0) {
        const noResultsRow = document.createElement('tr');
        noResultsRow.innerHTML = `
          <td colspan="7" class="wiertla-categories__table-cell" style="text-align: center; padding: 20px;">
            ${translations[currentLanguage].no_results || 'Brak wyników'}
          </td>
        `;
        tableBody.appendChild(noResultsRow);
        return;
      }

      // Products are already sorted by diameter (FI) in the filterProducts function
     
      // Create preview container if it doesn't exist
      let previewContainer = document.querySelector('.wiertla-categories__preview-container');
      if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.className = 'wiertla-categories__preview-container';
        previewContainer.style.cssText = `
          position: fixed;
          left: 0;
          top: 0;
          width: 300px;
          height: 100vh;
          background: white;
          z-index: 1000;
          padding: 20px;
          display: none;
          box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        `;
        previewContainer.innerHTML = `
          <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
            <img src="" alt="" style="max-width: 100%; max-height: 100%; object-fit: contain;">
          </div>
        `;
        document.body.appendChild(previewContainer);
      }

      // Helper to resolve best image URL from various shapes
      function resolveImageUrl(prod, fallback){
        try {
          var candidates = [];
          if (prod && typeof prod === 'object') {
            if (prod.featured_image) candidates.push(prod.featured_image.src || prod.featured_image);
            if (prod.image) candidates.push(prod.image.src || prod.image);
            if (prod.featured_media && prod.featured_media.preview_image) candidates.push(prod.featured_media.preview_image.src);
            if (Array.isArray(prod.images) && prod.images.length) candidates.push(prod.images[0].src || prod.images[0]);
            if (Array.isArray(prod.media) && prod.media.length) {
              var m0 = prod.media[0];
              if (m0 && m0.preview_image) candidates.push(m0.preview_image.src);
            }
            if (prod.thumbnail) candidates.push(prod.thumbnail);
            if (prod.preview_image) candidates.push(prod.preview_image.src || prod.preview_image);
            if (Array.isArray(prod.variants) && prod.variants.length) {
              var v0 = prod.variants[0];
              if (v0 && v0.featured_image) candidates.push(v0.featured_image.src || v0.featured_image);
            }
            if (prod.large_image) candidates.push(prod.large_image);
          }
          // (debug removed)
          for (var i=0;i<candidates.length;i++){
            var u = (candidates[i] || '').toString().trim();
            if (u && u !== 'null' && u !== 'undefined') {
              // (debug removed)
              return u;
            }
          }
        } catch(e) {}
        var fb = fallback || "{{ 'custom_icons.png' | asset_url }}";
        // (debug removed)
        return fb;
      }

      // Generate table rows using the provided products
      __safeProducts.forEach((product, index) => {
        if (!product) {
          console.warn('Invalid product data at index:', index);
          return;
        }

        const row = document.createElement('tr');
        row.className = 'wiertla-categories__table-row';
        row.setAttribute('data-product-id', product.id || '');
        row.setAttribute('data-href', product.url || '');
        row.setAttribute('data-handle', product.handle || '');
        
        // Add data attributes for filtering
        row.setAttribute('data-category', product.custom_category || '');
        row.setAttribute('data-status', product.rentable ? 'true' : 'false');
        row.setAttribute('data-type', product.type || '');
        row.setAttribute('data-crown', product.custom_crown || '');
        row.setAttribute('data-vendor', product.vendor || product.custom_manufacturer || '');
        row.setAttribute('data-sku', product.sku || product.custom_symbol || product.custom_kod_producenta || '');

        // Define icon mapping (row icon only, not for hover preview)
        const iconMap = {
          'VW': "{{ 'image-8.png' | asset_url }}",
          'PR': "{{ 'ico_plytkowe.png' | asset_url }}",
          'WW': "{{ 'ico_vhm.png' | asset_url }}",
          'PS': "{{ 'ico_sandvik.png' | asset_url }}",
          'WK': "{{ 'ico_ksem_table.png' | asset_url }}",
          'WV': "{{ 'ico_sandvik.png' | asset_url }}",
          'IS': "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          'WA': "{{ 'ico_amec_table.png' | asset_url }}"
        };
        function getActiveTabType() {
          const activeTab = document.querySelector('.wiertla-categories__tab.active');
          return activeTab ? activeTab.getAttribute('data-tab-type') : 'wiertla';
        }
        
        // Get SKU prefix for icon
        const skuPrefix = product.sku?.substring(0, 2) || '';
        const iconUrl = iconMap[skuPrefix] || '';

        // Always set image data for the row preview functionality using robust resolver (no icon fallback)
        const imageUrl = resolveImageUrl(product, "{{ 'custom_icons.png' | asset_url }}");
        row.setAttribute('data-image', imageUrl);
        try {
          // (debug removed)
        } catch(e) {}
        
        // Remove individual event listeners since we're using event delegation now
        const activeTabType = getActiveTabType();
        // Generate row content based on screen width
        if (window.innerWidth <= 1024) {
          if (activeTabType === 'wiertla') {
            row.innerHTML = `
              <td class="wiertla-categories__table-cell">
                <button type="button" class="wiertla-categories__mobile-card" data-product-id="${product.id || ''}" data-product-image="${product.image || ''}" data-product-url="/products/${product.handle || product.id || ''}">
                  <div class="wiertla-categories__mobile-top">
                    <div class="wiertla-categories__mobile-image" style="display:none;"></div>
                    <div class="wiertla-categories__mobile-fi">
                      <span class="mobile-value">${(() => {
                        const fi = product.custom_fi;
                        const srednica = product.custom_srednica || product.custom_srednica_display;
                        
                        const formatFiValue = (value) => {
                          if (!value || value === 'null' || value === 'undefined' || value.trim() === '') return null;
                          // If it's a range like "12,50-13,00", take only the first value
                          if (value.includes('-')) {
                            return value.split('-')[0].trim();
                          }
                          return value;
                        };
                        
                        const formattedFi = formatFiValue(fi);
                        const formattedSrednica = formatFiValue(srednica);
                        
                        if (formattedFi) {
                          return '⌀ ' + formattedFi;
                        }
                        if (formattedSrednica) {
                          return '⌀ ' + formattedSrednica;
                        }
                        return '-';
                      })()}</span>
                    </div>
                    <div class="wiertla-categories__mobile-dimension">
                      ${(product.metafields && product.metafields.custom && product.metafields.custom.custom_working_length) || product.custom_working_length || product.custom_xd || '-'}
                    </div>
                    <div class="wiertla-categories__mobile-price">${product.price}
                        ${(() => { try { return !!(product.custom_rent || product.rent_price || product.rent_value || (product.metafields && product.metafields.custom && product.metafields.custom.rent_tool) || product.rentable); } catch(_) { return false; } })() ? ` <img src="{{ 'event.png' | asset_url }}" alt="Event" width="20" height="20" loading="lazy" style="margin-left: 8px; vertical-align: middle;">` : ''}
                      </div>
                  </div>
                  <div class="wiertla-categories__mobile-bottom">
                    <div class="wiertla-categories__mobile-vendor">
                      ${formatSymbol(product.vendor || product.custom_manufacturer || '-')}
                    </div>
                    <div class="wiertla-categories__mobile-symbol">
                      ${(() => {
                        const raw = (product.custom_symbol || product.custom_kod_producenta || '-').toString();
                        const short = raw.length > 9 ? raw.slice(0, 8) + '…' : raw;
                        return formatSymbol(short);
                      })()}
                    </div>
                    <div class="wiertla-categories__mobile-price-wrapper">
                     
                    </div>
                  </div>
                </button>
              </td>
            `;
          } else {
            // Mobile: distinct layouts for Płytki and Koronki
            if (activeTabType === 'plytki') {
              // Top: Producent + Cena; Bottom: Kod producenta + Ilość
              row.innerHTML = `
                <td class="wiertla-categories__table-cell">
                  <button type="button" class="wiertla-categories__mobile-card" data-product-id="${product.id || ''}" data-product-url="/products/${product.handle || product.id || ''}">
                    <div class="wiertla-categories__mobile-top">
                      <div class="wiertla-categories__mobile-image" style="display:none;"></div>
                      <div class="wiertla-categories__mobile-vendor">${formatSymbol(product.custom_manufacturer || product.vendor || '-')}</div>
                      <div class="wiertla-categories__mobile-price">${product.price}${(() => { try { return !!(product.custom_rent || product.rent_price || product.rent_value || (product.metafields && product.metafields.custom && product.metafields.custom.rent_tool) || product.rentable); } catch(_) { return false; } })() ? ` <img src="{{ 'event.png' | asset_url }}" alt="Event" width="20" height="20" loading="lazy" style="margin-left: 8px; vertical-align: middle;">` : ''}</div>
                    </div>
                    <div class="wiertla-categories__mobile-bottom">
                      <div class="wiertla-categories__mobile-symbol">${(() => { const raw = (product.custom_kod_producenta || '-').toString(); return formatSymbol(raw); })()}</div>
                      <div class="wiertla-categories__mobile-price-wrapper">
                        <div class="wiertla-categories__mobile-quantity">${(() => { var q = 0; var pq = Number(product && product.product_qty); var qy = Number(product && product.quantity); if (!Number.isNaN(pq) && pq > 0) { q = pq; } else if (!Number.isNaN(qy) && qy > 0) { q = qy; } else { if (typeof product.inventory_quantity === 'number') q += product.inventory_quantity; if (Array.isArray(product.variants)) { product.variants.forEach(function(v){ if (v && typeof v.inventory_quantity === 'number') q += v.inventory_quantity; }); } } return q > 0 ? String(q) : '-'; })()}</div>
                      </div>
                    </div>
                  </button>
                </td>
              `;
            } else {
              // Koronki: Top: ⌀ Fi + Cena; Bottom: Producent + Kod producenta + Ilość
              row.innerHTML = `
                <td class="wiertla-categories__table-cell">
                  <button type="button" class="wiertla-categories__mobile-card" data-product-id="${product.id || ''}" data-product-url="/products/${product.handle || product.id || ''}">
                    <div class="wiertla-categories__mobile-top">
                      <div class="wiertla-categories__mobile-image" style="display:none;"></div>
                      <div class="wiertla-categories__mobile-fi"><span class="mobile-value">${(() => { const fi = product.custom_fi || (product.metafields && product.metafields.custom && (product.metafields.custom.srednica || product.metafields.custom.diameter)) || product.custom_srednica || product.custom_srednica_display || ''; const v = (fi || '').toString().trim(); return v ? ('⌀ ' + v) : '-'; })()}</span></div>
                      <div class="wiertla-categories__mobile-vendor">${formatSymbol(product.custom_manufacturer || product.vendor || '-')}</div>
                      <div class="wiertla-categories__mobile-price">${product.price}${(() => { try { return !!(product.custom_rent || product.rent_price || product.rent_value || (product.metafields && product.metafields.custom && product.metafields.custom.rent_tool) || product.rentable); } catch(_) { return false; } })() ? ` <img src="{{ 'event.png' | asset_url }}" alt="Event" width="20" height="20" loading="lazy" style="margin-left: 8px; vertical-align: middle;">` : ''}</div>
                    </div>
                    <div class="wiertla-categories__mobile-bottom">
                      <div class="wiertla-categories__mobile-symbol">${(() => { const raw = (product.custom_kod_producenta || '-').toString(); return formatSymbol(raw); })()}</div>
                      <div class="wiertla-categories__mobile-price-wrapper">
                        <div class="wiertla-categories__mobile-quantity">${(() => { var q = 0; var pq = Number(product && product.product_qty); var qy = Number(product && product.quantity); if (!Number.isNaN(pq) && pq > 0) { q = pq; } else if (!Number.isNaN(qy) && qy > 0) { q = qy; } else { if (typeof product.inventory_quantity === 'number') q += product.inventory_quantity; if (Array.isArray(product.variants)) { product.variants.forEach(function(v){ if (v && typeof v.inventory_quantity === 'number') q += v.inventory_quantity; }); } } return q > 0 ? String(q) : '-'; })()}</div>
                      </div>
                    </div>
                  </button>
                </td>
              `;
            }
          }
          const mobileCard = row.querySelector('.wiertla-categories__mobile-card');
          if (mobileCard) {
            // Remove the old conflicting click handler - let the JavaScript file handle it
          }
        } else {
          if (activeTabType === 'wiertla') {
            // Desktop view for Wiertla: Typ | ⌀ Fi | D/mm | Symbol | Producent | Cena netto
            row.innerHTML = `
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${iconUrl ? `<img src="${iconUrl}" alt="${product.type || 'Product'}" width="34" height="34" loading="lazy">` : '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${(() => {
                  const fi = product.custom_fi;
                  const srednica = product.custom_srednica || product.custom_srednica_display;
                  
                  const formatFiValue = (value) => {
                    if (!value || value === 'null' || value === 'undefined' || value.trim() === '') return null;
                    // If it's a range like "12,50-13,00", take only the first value
                    if (value.includes('-')) {
                      return value.split('-')[0].trim();
                    }
                    return value;
                  };
                  
                  const formattedFi = formatFiValue(fi);
                  const formattedSrednica = formatFiValue(srednica);
                  
                  if (formattedFi) {
                    return '<span class="wiertla-fi"><span class="wiertla-fi__icon">⌀</span><span class="wiertla-fi__value">' + formattedFi + '</span></span>';
                  }
                  if (formattedSrednica) {
                    return '<span class="wiertla-fi"><span class="wiertla-fi__icon">⌀</span><span class="wiertla-fi__value">' + formattedSrednica + '</span></span>';
                  }
                  return '-';
                })()}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${(product.metafields && product.metafields.custom && product.metafields.custom.custom_working_length) || product.custom_working_length || product.custom_xd || '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.custom_symbol  || product.custom_kod_producenta || '-')}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.vendor || product.custom_manufacturer || '-')}
              </td>
              ${product.custom_rent_value ? `<td class="wiertla-categories__table-cell" title="Wynajem">${product.custom_rent_value}</td>` : ''}
              <td class="wiertla-categories__table-cell">
                <div class="wiertla-categories__price-wrapper">
                  <span class="wiertla-categories__price" data-href="/products/${product.handle}">${product.price}</span>
                  ${(() => { try { return !!(product.custom_rent || product.rent_price || product.rent_value || (product.metafields && product.metafields.custom && product.metafields.custom.rent_tool) || product.rentable); } catch(_) { return false; } })() ? `
                    <button class="wiertla-categories__rent-button" data-product-id="${product.id}"
                      data-symbol="${(product.custom_symbol || product.custom_kod_producenta || (product.metafields && product.metafields.custom && (product.metafields.custom.symbol || product.metafields.custom.kod_producenta)) || product.symbol || product.sku || '').toString().replace(/"/g, '&quot;')}">
                      <span>RENT A TOOL</span>
                    </button>
                  ` : ''}
                </div>
              </td>
            `;
          } else {
            // Desktop view: split handling for Plytki vs Koronki to match headers
            if (activeTabType === 'koronki') {
              // ⌀ Fi | Producent | Kod producenta | Ilość | Cena netto (5 cols)
              row.innerHTML = `
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${(() => {
                    const fi = product.custom_fi || (product.metafields && product.metafields.custom && product.metafields.custom.srednica) || product.custom_srednica || product.custom_srednica_display || '';
                    const v = (fi || '').toString().trim();
                    return v ? ('⌀ ' + v) : '-';
                  })()}
                </td>
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${formatSymbol(product.custom_manufacturer || product.vendor || '-')}
                </td>
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${formatSymbol(product.custom_kod_producenta || '-')}
                </td>
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${(() => {
                    var q = 0;
                    var pq = Number(product && product.product_qty);
                    var qy = Number(product && product.quantity);
                    if (!Number.isNaN(pq) && pq > 0) {
                      q = pq;
                    } else if (!Number.isNaN(qy) && qy > 0) {
                      q = qy;
                    } else {
                      if (typeof product.inventory_quantity === 'number') q += product.inventory_quantity;
                      if (Array.isArray(product.variants)) {
                        product.variants.forEach(function(v){ if (v && typeof v.inventory_quantity === 'number') q += v.inventory_quantity; });
                      }
                    }
                    return q > 0 ? String(q) : '-';
                  })()}
                </td>
                 <td class="wiertla-categories__table-cell">
                  <div class="wiertla-categories__price-wrapper">
                    <span class="wiertla-categories__price" data-href="/products/${product.handle}">${product.price}</span>
                  </div>
                </td>
              `;
            } else {
              // Plytki: Producent | Kod producenta | Ilość | Cena netto (4 cols)
              row.innerHTML = `
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${formatSymbol(product.custom_manufacturer || product.vendor || '-')}
                </td>
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${formatSymbol(product.custom_kod_producenta || '-')}
                </td>
                <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                  ${(() => {
                    var q = 0;
                    // Only use Shopify's native inventory_quantity
                    if (typeof product.inventory_quantity === 'number') q += product.inventory_quantity;
                    if (Array.isArray(product.variants)) {
                      product.variants.forEach(function(v){ if (v && typeof v.inventory_quantity === 'number') q += v.inventory_quantity; });
                    }
                    return q > 0 ? String(q) : '-';
                  })()}
                </td>
                 <td class="wiertla-categories__table-cell">
                  <div class="wiertla-categories__price-wrapper">
                    <span class="wiertla-categories__price" data-href="/products/${product.handle}">${product.price}</span>
                  </div>
                </td>
              `;
            }
          }
        }

        // Add click handlers for table cells
        const cells = row.querySelectorAll('.wiertla-categories__table-cell[data-href]');
        cells.forEach(cell => {
          cell.addEventListener('click', function(e) {
            if (!e.target.closest('.wiertla-categories__rent-button')) {
              const url = this.getAttribute('data-href');
              if (url) {
                window.location.href = url;
              }
            }
          });
        });

        // Add click handler for rent button
        const rentButton = row.querySelector('.wiertla-categories__rent-button');
        if (rentButton) {
          rentButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const productId = this.getAttribute('data-product-id');
            
            if (window.WiertlaCNC && window.WiertlaCNC.products) {
              const product = window.WiertlaCNC.products.find(p => p.id === Number(productId));
              if (product) {
                window.WiertlaCNC.openRentModal(product);
                // Also derive and fill symbol here, since this handler stops propagation
                let drillSymbol = product.symbol
                  || product.sku
                  || product.custom_symbol
                  || product.custom_kod_producenta
                  || (product.metafields && product.metafields.custom && (product.metafields.custom.symbol || product.metafields.custom.kod_producenta))
                  || '';
                if (!drillSymbol) {
                  const rowEl = this.closest('tr') || this.closest('.wiertla-categories__table-row');
                  if (rowEl) {
                    drillSymbol = rowEl.getAttribute('data-sku')
                      || (rowEl.querySelector('.wiertla-categories__table-cell--symbol') && rowEl.querySelector('.wiertla-categories__table-cell--symbol').textContent.trim())
                      || '';
                  }
                }
                window.WiertlaCNC.lastSelectedProduct = product;
                window.WiertlaCNC.lastSelectedSymbol = drillSymbol;
                if (drillSymbol) {
                  const desktopSymbolInput = document.querySelector('.wiertla-modals__desktop-rent-form input[name="contact[drill_symbol]"]');
                  if (desktopSymbolInput) desktopSymbolInput.value = drillSymbol;
                  const mobileSymbolInput = document.querySelector('.wiertla-categories__mobile-rent-form input[name="contact[drill_symbol]"]');
                  if (mobileSymbolInput) mobileSymbolInput.value = drillSymbol;
                  setTimeout(function() {
                    const d = document.querySelector('.wiertla-modals__desktop-rent-form input[name="contact[drill_symbol]"]');
                    if (d && !d.value) d.value = drillSymbol;
                    const m = document.querySelector('.wiertla-categories__mobile-rent-form input[name="contact[drill_symbol]"]');
                    if (m && !m.value) m.value = drillSymbol;
                  }, 250);
                }
              }
            }
          });
        }

        tableBody.appendChild(row);
      });

      // Update results count
      const resultsCount = document.getElementById('resultsCount');
      if (resultsCount) {
        const startIndex = (window.currentPage - 1) * window.itemsPerPage + 1;
        const endIndex = Math.min(startIndex + products.length - 1, allProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsCount.textContent = format.replace('{0}', startIndex).replace('{1}', endIndex).replace('{2}', allProducts.length);
      }
    }
    
      });
    
      
      // Make the openFilterModal function globally available
      window.openFilterModal = function() {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      // Force all style properties directly
      modal.style.display = "block";
      modal.style.visibility = "visible";
      modal.style.opacity = "1";
      modal.style.pointerEvents = "auto";
      modal.classList.add("active");
      document.body.style.overflow = "hidden";
    } else {
      console.error("Modal not found in global function");
    }
    return false;
      };
      
      // Close modal function
      window.closeFilterModal = function() {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      modal.style.display = "none";
      modal.style.visibility = "hidden";
      modal.style.opacity = "0";
      modal.style.pointerEvents = "none";
      modal.classList.remove("active");
      document.body.style.overflow = "";
    }
      };
      
      // Wait for full DOM loading
      document.addEventListener('DOMContentLoaded', function() {
    
    // Direct targeting of the filter button by ID
    const filterButtonTrigger = document.getElementById('mobile-filter-button-trigger');
    
    const mobileFilterModal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    
    // Direct click handler for the ID-based button
    if (filterButtonTrigger) {
      filterButtonTrigger.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        window.openFilterModal();
      });

      // Viewport-driven image upgrades to avoid flooding the server
      (function setupViewportImageUpgrades(){
        const isFallback = (u) => {
          const s = (u || '').toString();
          return !s || /custom_icons|no-image/.test(s);
        };
        if (!('IntersectionObserver' in window)) return; // graceful degrade
        const io = new IntersectionObserver((entries)=>{
          entries.forEach((entry)=>{
            if (!entry.isIntersecting) return;
            const r = entry.target;
            const cur = r.getAttribute('data-image') || '';
            if (!isFallback(cur)) return;
            let handle = r.getAttribute('data-handle') || '';
            if (!handle) {
              const href = r.getAttribute('data-href') || '';
              const m = href && href.match(/\/products\/([^?#]+)/);
              if (m) handle = m[1];
            }
            if (!handle) return;
            fetchImageFromProductHandle(handle).then(function(url){
              if (url && !isFallback(url)) {
                r.setAttribute('data-image', url);
              }
            }).catch(function(){});
          });
        }, { root: document.querySelector('.wiertla-categories__table-container') || null, threshold: 0.01 });

        function observeRows(){
          const tbody = document.querySelector('.wiertla-categories__table tbody');
          if (!tbody) return;
          const rows = tbody.querySelectorAll('tr.wiertla-categories__table-row');
          rows.forEach((r)=>{ if (!r._wObserved){ io.observe(r); r._wObserved = true; } });
        }
        observeRows();

        // Re-observe on table changes
        if (window.MutationObserver){
          const target = document.querySelector('.wiertla-categories__table tbody');
          if (target){
            const mo = new MutationObserver(()=>{ observeRows(); });
            mo.observe(target, { childList: true });
            window.__WiertlaRowUpgradeObserver = mo;
          }
        }
      })();

      // (replaced mass-upgrade observer with viewport-driven observer above)
    }
    
    // Also check all buttons with class
    const filterButtons = document.querySelectorAll('.wiertla-categories__mobile-filter-button');
    
    filterButtons.forEach(function(btn, index) {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        window.openFilterModal();
      });
    });
    
    // Close buttons
    const closeButtons = document.querySelectorAll('.wiertla-categories__mobile-filter-close, .wiertla-categories__mobile-filter-close-wrapper');
    closeButtons.forEach(function(btn) {
      btn.addEventListener('click', function() {
        window.closeFilterModal();
      });
    });
    
    // Close when clicking outside
    if (mobileFilterModal) {
      mobileFilterModal.addEventListener('click', function(e) {
        if (e.target === mobileFilterModal) {
          window.closeFilterModal();
        }
      });
    }
      });
    
      document.addEventListener('DOMContentLoaded', function() {
    // Add click handlers for mobile categories
    const mobileTypeItems = document.querySelectorAll('.wiertla-categories-mobile-types__item');
    
    mobileTypeItems.forEach(item => {
      item.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        
        // Set active class
        mobileTypeItems.forEach(el => el.classList.remove('active'));
        this.classList.add('active');
        
        // Call the global filter function
        if (typeof window.handleCategoryChange === 'function') {
          window.handleCategoryChange(category);
        }
      });
    });
      });

      // Initialize tab from URL parameter on page load
      function initializeTabFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const mainType = urlParams.get('mainType');
        
        if (mainType && ['wiertla', 'plytki', 'koronki'].includes(mainType)) {
          // Find and activate the correct tab
          const targetTab = document.querySelector(`.wiertla-categories__tab[data-tab-type="${mainType}"]`);
          if (targetTab) {
            // Remove active from all tabs
            document.querySelectorAll('.wiertla-categories__tab').forEach(tab => {
              tab.classList.remove('active');
            });
            // Activate target tab
            targetTab.classList.add('active');
            window.WiertlaCNC.activeTabType = mainType;
          }
        }
      }

      // Call initialization on DOM ready
      initializeTabFromURL();
  </script>

  {% assign drill_stats_nav = sections['drill-stats-nav'] %}
  {% render 'drill-stats-nav' %}

{% schema %}
{
  "name": "Wiertla Categories",
  "tag": "section",
  "class": "wiertla-categories-section",
  "settings": [
    {
      "type": "collection",
      "id": "selected_collection",
      "label": "Select Collection to Display",
      "info": "Choose which collection's products to display in this section"
    },
    {
      "type": "range",
      "id": "items_per_page",
      "label": "Products per page",
      "default": 100,
      "min": 10,
      "max": 100,
      "step": 10
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Wiertla Categories"
    }
  ],
  "presets": [
    {
      "name": "Wiertla Categories",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<!-- Removed disabled inline mobile filter handlers to reduce section size. Implemented in assets/theme.js -->

<!-- Removed legacy Direct Modal Fallback to reduce section size -->

<div class="wiertla-categories__fullscreen-view" style="display: none;">
  <div class="wiertla-categories__fullscreen-header">
    <div class="wiertla-categories__fullscreen-title">
      <h2 data-translate="wiertla_categories.fullscreen_title">CNC DRILLS</h2>
      <p data-translate="wiertla_categories.fullscreen_description">Choose the drill you are interested in from our store's extensive selection.</p>
    </div>
    <button class="wiertla-categories__fullscreen-btn">
      <img
        src="{{ 'zoom_out_map.svg' | asset_url }}"
        alt="Close fullscreen"
        class="wiertla-categories__fullscreen-icon"
        width="24"
        height="24"
      >
      <span data-translate="wiertla_categories.close_fullscreen">Zamknij tryb pełnoekranowy</span>
    </button>
  </div>

  <div class="wiertla-categories__fullscreen-filters">
    {% render 'wiertla-categories-filters' %}
  </div>

  <div class="wiertla-categories__fullscreen-content">
    <div class="wiertla-categories__fullscreen-layout">
      <div class="wiertla-categories__fullscreen-left">
        {% render 'wiertla-categories-search' %}
      </div>
      <div class="wiertla-categories__fullscreen-right">
        {% render 'wiertla-categories-table' %}
      </div>
    </div>
  </div>
</div>

<!-- Fullscreen functionality (inline disabled; handled in assets/theme.js) -->
<script type="application/json" data-disabled="fullscreen-inline">
  // Handled in assets/theme.js

    // Use a broader selector to find the open buttons
    const openFullscreenBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-btn:not(.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn)'
    );

    // Use a more specific selector for the close button
    const closeFullscreenBtn = document.querySelector(
      '.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn'
    );

    // Normal and fullscreen table elements
    const mainTableBody = document.getElementById('productsTableBody');
    const fullscreenTableBody = document.querySelector('.wiertla-categories__fullscreen-right tbody');

    // Fullscreen pagination elements
    const fullscreenResultsCount = document.querySelector(
      '.wiertla-categories__fullscreen-right .wiertla-categories__results-numbers'
    );
    const fullscreenPrevPage = document.querySelector('.wiertla-categories__fullscreen-right #prevPage');
    const fullscreenNextPage = document.querySelector('.wiertla-categories__fullscreen-right #nextPage');

    // Fullscreen search and filters
    const fullscreenSearch = document.querySelector('.wiertla-categories__fullscreen-left #CategorySearch');
    const fullscreenCategoryBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__icon-item'
    );
    const fullscreenFilterSelects = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__filter'
    );
    const fullscreenPerPageBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__per-page-button'
    );

    // Fullscreen state
    let fullscreenFilters = {
      category: 'wszystkie',
      type: '',
      crown: '',
      manufacturer: '',
      search: '',
      itemsPerPage: 250,
      currentPage: 1,
    };

    // Force initialize the fullscreen element correctly
    if (fullscreenView) {
      fullscreenView.style.display = 'none';
    }

    // Toggle fullscreen view
    function toggleFullscreen() {
      // Check if fullscreen is currently hidden
      const isHidden =
        fullscreenView.style.display === 'none' || window.getComputedStyle(fullscreenView).display === 'none';

      if (isHidden) {
        // EXTREME APPROACH: Add a completely new fullscreen view that will definitely work
        // Create temporary element with very forceful styling
        const tempFullscreen = document.createElement('div');
        tempFullscreen.id = 'temp-fullscreen-view';
        tempFullscreen.style.cssText = `
           position: fixed;
           top: 0;
           left: 0;
           right: 0;
           bottom: 0;
           width: 100%;
           height: 100%;
           background-color: #F5F5F8;
           z-index: 999999;
           overflow: auto;
           display: block !important;
           padding: 20px;
           box-sizing: border-box;
         `;

        // Clone the fullscreen content into this new container
        tempFullscreen.innerHTML = fullscreenView.innerHTML;

        // Remove the icons from the fullscreen view
        const iconsContainer = tempFullscreen.querySelector('.wiertla-categories__icons');
        if (iconsContainer) {
          iconsContainer.parentNode.removeChild(iconsContainer);
        }

        document.body.appendChild(tempFullscreen);

        // Get references to elements in the new container
        const tempTableBody = tempFullscreen.querySelector('tbody');
        const tempCloseButton = tempFullscreen.querySelector(
          '.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn'
        );
        const tempCategoryBtns = tempFullscreen.querySelectorAll('.wiertla-categories__filter-button');
        const tempFilterSelects = tempFullscreen.querySelectorAll('.wiertla-categories__filter');
        const tempPerPageBtns = tempFullscreen.querySelectorAll('.wiertla-categories__per-page-button');
        const tempSearchInput = tempFullscreen.querySelector('input.wiertla-search__input');
        // Use let instead of const for variables that will be reassigned
        let tempPrevButton = tempFullscreen.querySelector('#prevPage');
        let tempNextButton = tempFullscreen.querySelector('#nextPage');
        const tempResultsCount = tempFullscreen.querySelector('.wiertla-categories__results-numbers');

        // Get all product data directly from the window object for the fullscreen table
        // Use hydrated dataset when available to include all products
        if (tempTableBody) {
          // Trigger hydration if not hydrated yet
          if (window.WiertlaCNC && (!Array.isArray(window.WiertlaCNC.products) || !window.WiertlaCNC.products.length) && typeof window.WiertlaCNC.hydrateAllShopProductsIncremental === 'function') {
            try {
              window.WiertlaCNC.hydrateAllShopProductsIncremental();
            } catch (e) {}
          }

          // Prefer hydrated products, fallback to inline
          var sourceProducts = Array.isArray(window.WiertlaCNC && window.WiertlaCNC.products) && window.WiertlaCNC.products.length
            ? window.WiertlaCNC.products
            : [];

          if (sourceProducts.length > 0) {
            // Clear the table first
            tempTableBody.innerHTML = '';

            // Safety filter: ONLY show items that have stock/availability AND valid SKU
            function __fallbackNum(v){ var n = Number((v||'').toString().replace(',', '.')); return isNaN(n)?0:n; }
            function __fallbackAvail(p){
              if (!p) return false;
              // Only check Shopify's native availability - require actual inventory
              if (__fallbackNum(p.inventory_quantity) > 0) return true;
              if (Array.isArray(p.variants)){
                for (var i=0;i<p.variants.length;i++){
                  var vv = p.variants[i] || {};
                  if (__fallbackNum(vv.inventory_quantity) > 0) return true;
                }
              }
              // Don't trust product.available flag alone - require inventory
              return false;
            }
            function __fallbackHasSku(p){ try { return !!(p && p.sku && String(p.sku).trim() && String(p.sku).trim() !== '-'); } catch(_) { return false; } }
            
            // Filter products before rendering
            const filteredSourceProducts = sourceProducts.filter(function(p){ return __fallbackAvail(p) && __fallbackHasSku(p); });
            
            // For each product, create a table row with all data
            filteredSourceProducts.forEach((product) => {
              const row = document.createElement('tr');
              row.className = 'wiertla-categories__table-row';
              const productUrl = (product.url && product.url !== '#') ? product.url : (product.handle ? ('/products/' + product.handle) : '');
              row.setAttribute('data-href', productUrl);

              // Get all possible field values from various property names that might be used
              const sku = product.sku || product.symbol || product.custom_symbol || '';
              const vendor = product.vendor || product.custom_manufacturer || '';
              const type = product.type || '';

              // Get diameter (Fi) correctly from all possible fields
              let diameter = '';
              if (
                product.custom_fi &&
                product.custom_fi !== 'null' &&
                product.custom_fi !== 'undefined' &&
                product.custom_fi.trim &&
                product.custom_fi.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_fi;
              } else if (
                product.custom_srednica &&
                product.custom_srednica !== 'null' &&
                product.custom_srednica !== 'undefined' &&
                product.custom_srednica.trim &&
                product.custom_srednica.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_srednica;
              } else if (
                product.metafields && product.metafields.custom && (product.metafields.custom.srednica || product.metafields.custom.diameter)
              ) {
                diameter = '⌀ ' + (product.metafields.custom.srednica || product.metafields.custom.diameter);
              } else if (product.diameter) {
                diameter = product.diameter;
              } else if (product.fi) {
                diameter = product.fi;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.diameter) {
                diameter = product.metafields.custom.diameter;
              }

              // Get length/depth correctly from all possible fields
              let length = '';
              if (
                product.custom_working_length &&
                product.custom_working_length !== 'null' &&
                product.custom_working_length !== 'undefined' &&
                product.custom_working_length.trim &&
                product.custom_working_length.trim() !== ''
              ) {
                length = product.custom_working_length;
              } else if (
                product.custom_xd &&
                product.custom_xd !== 'null' &&
                product.custom_xd !== 'undefined' &&
                product.custom_xd.trim &&
                product.custom_xd.trim() !== ''
              ) {
                length = product.custom_xd;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.working_length) {
                length = product.metafields.custom.working_length;
              } else if (product.length) {
                length = product.length;
              } else if (product.d) {
                length = product.d;
              } else if (product.depth) {
                length = product.depth;
              } else if (product.custom_drill_length) {
                length = product.custom_drill_length;
              }

              // Set data attributes for filtering
              row.setAttribute('data-sku', sku);
              row.setAttribute('data-vendor', vendor);
              row.setAttribute('data-type', type);

              // Format price safely
              let formattedPrice = '';
              const price = product.price || product.price_numeric || product.compare_at_price || '';
              if (price !== undefined && price !== null && price !== '') {
                // Check if price is a number or can be converted to one
                const priceNum = typeof price === 'number' ? price : parseFloat(price);

                if (!isNaN(priceNum)) {
                  formattedPrice = priceNum.toFixed(2) + ' zł';
                } else {
                  // If it's not a number, just use as is
                  formattedPrice = price + (String(price).includes('zł') ? '' : ' zł');
                }
              }

              // Determine the icon URL based on product type
              // Get the first two characters of the symbol to determine the type icon
              let typeIcon = '';
              if (sku && sku.length >= 2) {
                const skuPrefix = sku.substring(0, 2).toUpperCase();
                const iconMapping = {
                  VW: '{{ "image-8.png" | asset_url }}',
                  PR: '{{ "ico_plytkowe.png" | asset_url }}',
                  WW: '{{ "ico_vhm.png" | asset_url }}',
                  PS: '{{ "ico_sandvik.png" | asset_url }}',
                  WK: '{{ "ico_ksem_table.png" | asset_url }}',
                  WV: '{{ "ico_sandvik.png" | asset_url }}',
                  IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                  WA: '{{ "ico_amec_table.png" | asset_url }}',
                };
                typeIcon = iconMapping[skuPrefix] || '';
              }

              // Create table cells with product data
              // Prefer custom symbol fields over raw SKU for the Symbol column
              const displaySymbol = product.custom_symbol || product.custom_kod_producenta || sku;

              row.innerHTML = `
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
                     ${typeIcon ? `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">` : type}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
                     ${diameter || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
                     ${length || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
                     ${displaySymbol || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor">
                     ${vendor || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
                     ${formattedPrice || '-'}
                   </td>
                 `;

              // Add the row to the table
              tempTableBody.appendChild(row);
            });
          } else if (window.products && window.products.length > 0) {
            // Clear the table first
            tempTableBody.innerHTML = '';

            // Safety filter for fallback renderer: stock-or-sku rule
            function __fbNum(v){ var n = Number((v||'').toString().replace(',', '.')); return isNaN(n)?0:n; }
            function __fbAvail(p){
              if (!p) return false;
              // Only check Shopify's native availability - require actual inventory
              if (__fbNum(p.inventory_quantity) > 0) return true;
              if (Array.isArray(p.variants)){
                for (var i=0;i<p.variants.length;i++){
                  var vv = p.variants[i] || {};
                  if (__fbNum(vv.inventory_quantity) > 0) return true;
                }
              }
              // Don't trust product.available flag alone - require inventory
              return false;
            }
            function __fbHasSku(p){ try { return !!(p && p.sku && String(p.sku).trim() && String(p.sku).trim() !== '-'); } catch(_) { return false; } }
            (window.products || []).filter(function(p){ return __fbAvail(p) && __fbHasSku(p); }).forEach((product) => {
              const row = document.createElement('tr');
              row.className = 'wiertla-categories__table-row';
              const productUrl = (product.url && product.url !== '#') ? product.url : (product.handle ? ('/products/' + product.handle) : '');
              row.setAttribute('data-href', productUrl);

              // Get all possible field values from various property names that might be used
              const sku = product.sku || product.symbol || product.custom_symbol || '';
              const vendor = product.vendor || product.custom_manufacturer || '';
              const type = product.type || '';

              // Get diameter (Fi) correctly from all possible fields
              let diameter = '';
              if (
                product.custom_fi &&
                product.custom_fi !== 'null' &&
                product.custom_fi !== 'undefined' &&
                product.custom_fi.trim &&
                product.custom_fi.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_fi;
              } else if (
                product.custom_srednica &&
                product.custom_srednica !== 'null' &&
                product.custom_srednica !== 'undefined' &&
                product.custom_srednica.trim &&
                product.custom_srednica.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_srednica;
              } else if (product.diameter) {
                diameter = product.diameter;
              } else if (product.fi) {
                diameter = product.fi;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.diameter) {
                diameter = product.metafields.custom.diameter;
              }

              // Get length/depth correctly from all possible fields
              let length = '';
              if (
                product.custom_working_length &&
                product.custom_working_length !== 'null' &&
                product.custom_working_length !== 'undefined' &&
                product.custom_working_length.trim &&
                product.custom_working_length.trim() !== ''
              ) {
                length = product.custom_working_length;
              } else if (
                product.custom_xd &&
                product.custom_xd !== 'null' &&
                product.custom_xd !== 'undefined' &&
                product.custom_xd.trim &&
                product.custom_xd.trim() !== ''
              ) {
                length = product.custom_xd;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.working_length) {
                length = product.metafields.custom.working_length;
              } else if (product.length) {
                length = product.length;
              } else if (product.d) {
                length = product.d;
              } else if (product.depth) {
                length = product.depth;
              } else if (product.custom_drill_length) {
                length = product.custom_drill_length;
              }

              // Set data attributes for filtering
              row.setAttribute('data-sku', sku);
              row.setAttribute('data-vendor', vendor);
              row.setAttribute('data-type', type);

              // Format price safely
              let formattedPrice = '';
              const price = product.price || product.price_numeric || product.compare_at_price || '';
              if (price !== undefined && price !== null && price !== '') {
                // Check if price is a number or can be converted to one
                const priceNum = typeof price === 'number' ? price : parseFloat(price);

                if (!isNaN(priceNum)) {
                  formattedPrice = priceNum.toFixed(2) + ' zł';
                } else {
                  // If it's not a number, just use as is
                  formattedPrice = price + (String(price).includes('zł') ? '' : ' zł');
                }
              }

              // Determine the icon URL based on product type
              // Get the first two characters of the symbol to determine the type icon
              let typeIcon = '';
              if (sku && sku.length >= 2) {
                const skuPrefix = sku.substring(0, 2).toUpperCase();
                const iconMapping = {
                  VW: '{{ "image-8.png" | asset_url }}',
                  PR: '{{ "ico_plytkowe.png" | asset_url }}',
                  WW: '{{ "ico_vhm.png" | asset_url }}',
                  PS: '{{ "ico_sandvik.png" | asset_url }}',
                  WK: '{{ "ico_ksem_table.png" | asset_url }}',
                  WV: '{{ "ico_sandvik.png" | asset_url }}',
                  IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                  WA: '{{ "ico_amec_table.png" | asset_url }}',
                };
                typeIcon = iconMapping[skuPrefix] || '';
              }

              // Create table cells with product data
              row.innerHTML = `
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
                     ${typeIcon ? `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">` : type}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
                     ${diameter || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
                     ${length || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
                     ${sku || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor">
                     ${vendor || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
                     ${formattedPrice || '-'}
                   </td>
                 `;

              // Add the row to the table
              tempTableBody.appendChild(row);
            });
          } else if (mainTableBody && mainTableBody.children.length > 0) {
            // Fallback to copying from main table if no product data is available in window

            // Copy inner HTML and make sure all cells have proper CSS classes
            tempTableBody.innerHTML = mainTableBody.innerHTML;

            // Make sure cells have the proper CSS classes
            const tempRows = tempTableBody.querySelectorAll('tr');
            tempRows.forEach((row) => {
              const cells = row.querySelectorAll('td');
              if (cells.length >= 6) {
                if (!cells[0].classList.contains('wiertla-categories__table-cell--type')) {
                  cells[0].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--type';
                }
                if (!cells[1].classList.contains('wiertla-categories__table-cell--diameter')) {
                  cells[1].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--diameter';
                }
                if (!cells[2].classList.contains('wiertla-categories__table-cell--length')) {
                  cells[2].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--length';
                }
                if (!cells[3].classList.contains('wiertla-categories__table-cell--symbol')) {
                  cells[3].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--symbol';
                }
                if (!cells[4].classList.contains('wiertla-categories__table-cell--vendor')) {
                  cells[4].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--vendor';
                }
                if (!cells[5].classList.contains('wiertla-categories__table-cell--price')) {
                  cells[5].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--price';
                }
              }
            });

            // Make sure all rows have proper data attributes for filtering
            const rows = tempTableBody.querySelectorAll('tr');
            rows.forEach((row) => {
              // Log each row's data attributes to debug
              const sku = row.getAttribute('data-sku') || '';
              const vendor = row.getAttribute('data-vendor') || '';
              const type = row.getAttribute('data-type') || '';

              // If we're missing data attributes, try to extract them from content
              if (!sku || !vendor) {
                // Get text content from cells (assumes a specific order)
                const cells = row.querySelectorAll('td');
                if (cells.length >= 6) {
                  // Add data attributes if they don't exist
                  if (!row.hasAttribute('data-sku') && cells[3]) {
                    const symbol = cells[3].textContent.trim();
                    row.setAttribute('data-sku', symbol);

                    // Also update the type icon based on the SKU
                    if (symbol && symbol.length >= 2 && cells[0]) {
                      const skuPrefix = symbol.substring(0, 2).toUpperCase();
                      const iconMapping = {
                        VW: '{{ "image-8.png" | asset_url }}',
                        PR: '{{ "image-10.png" | asset_url }}',
                        WW: '{{ "image-12.png" | asset_url }}',
                        PS: '{{ "image-9.png" | asset_url }}',
                        WK: '{{ "image-13.png" | asset_url }}',
                        WV: '{{ "image-11.png" | asset_url }}',
                        IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                        WA: '{{ "ico_big_vhm.svg" | asset_url }}',
                      };
                      const typeIcon = iconMapping[skuPrefix] || '';
                      if (typeIcon) {
                        cells[0].innerHTML = `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">`;
                      }
                    }
                  }

                  if (!row.hasAttribute('data-vendor') && cells[4]) {
                    const vendorName = cells[4].textContent.trim();
                    row.setAttribute('data-vendor', vendorName);
                  }

                  if (!row.hasAttribute('data-type') && cells[0]) {
                    const typeText = cells[0].textContent.trim();
                    row.setAttribute('data-type', typeText);
                  }
                }
              }
            });
          }
        }

        // Keep track of temp fullscreen filters
        const tempFilters = {
          category: 'wszystkie',
          type: '',
          crown: '',
          manufacturer: '',
          search: '',
          itemsPerPage: 250, // Default items per page - explicitly set to 250
          currentPage: 1,
        };

        // Set the active per page button based on the current itemsPerPage value
        const activeItemsPerPage = tempFilters.itemsPerPage;
        if (tempPerPageBtns) {
          tempPerPageBtns.forEach((btn) => {
            const btnValue = parseInt(btn.getAttribute('data-value'));
            if (btnValue === activeItemsPerPage) {
              btn.classList.add('active');
            } else {
              btn.classList.remove('active');
            }
          });
        }

        // Function to filter products in the temp fullscreen
        function filterTempProducts() {
          if (!tempTableBody) return;

          const rows = tempTableBody.querySelectorAll('tr');

          let visibleCount = 0;
          let startIndex = (tempFilters.currentPage - 1) * tempFilters.itemsPerPage;
          let endIndex = startIndex + tempFilters.itemsPerPage - 1;
          let displayedItems = 0;

          // Debug function to check why a row is visible or not
          function logRowDebug(row, filters, isVisible) {
            const sku = row.getAttribute('data-sku') || '';
            const vendor = row.getAttribute('data-vendor') || '';
            const cells = Array.from(row.querySelectorAll('td')).map((cell) => cell.textContent.trim());
          }

          // First pass: Apply all filters to determine visible rows
          const visibleRows = [];
          let debuggedRows = 0;

          rows.forEach((row) => {
            // Extract data attributes or cell content directly for filtering
            const cells = row.querySelectorAll('td');
            const sku = row.getAttribute('data-sku') || '';
            const vendor = row.getAttribute('data-vendor') || '';
            const type = row.getAttribute('data-type') || '';
            const crown = row.getAttribute('data-crown') || '';
            const rowText = row.textContent.toLowerCase();
            const searchText = tempFilters.search.toLowerCase();

            let show = true;

            // Debug the first few rows to see what data we have
            if (debuggedRows < 3) {
              debuggedRows++;
            }

            // Apply category filter if not "wszystkie"
            if (tempFilters.category && tempFilters.category !== 'wszystkie') {
              // Direct match on attribute if it exists
              if (row.hasAttribute('data-category')) {
                show = show && row.getAttribute('data-category') === tempFilters.category;
              } else {
                // Check category prefix based on the main filters logic
                const categoryPrefixMap = {
                  koronkowe: 'VW',
                  plytkowe: 'PR',
                  vhm: 'WW',
                  sandvik: 'PS',
                  ksem: 'WK',
                  amec: 'WV',
                };

                const prefix = categoryPrefixMap[tempFilters.category];
                if (prefix) {
                  // Match on SKU attribute or cell content
                  const symbolText = sku || (cells[3] ? cells[3].textContent.trim() : '');

                  show = show && symbolText.startsWith(prefix);
                }
              }
            }

            // Apply type filter - the type dropdown actually selects items by SKU prefix
            if (tempFilters.type) {
              // Get the SKU from various possible sources
              let symbolText = '';

              // First try data attribute
              if (sku) {
                symbolText = sku;
              }
              // Then try the symbol/sku cell (4th column)
              else if (cells && cells.length > 3) {
                symbolText = cells[3].textContent.trim();
              }

              // Check if SKU starts with the selected type prefix
              if (symbolText) {
                show = show && symbolText.startsWith(tempFilters.type);
              } else {
                // If we can't find the SKU, don't match
                show = false;
              }
            }

            // Apply crown filter
            if (tempFilters.crown) {
              show = show && crown === tempFilters.crown;
            }

            // Apply manufacturer filter
            if (tempFilters.manufacturer) {
              const vendorText = vendor || (cells[4] ? cells[4].textContent.trim() : '');

              // Try direct match first
              if (vendorText === tempFilters.manufacturer) {
                // Direct match
                show = true;
              } else {
                // Check with manufacturer mapping
                show = show && vendorText.toLowerCase() === tempFilters.manufacturer.toLowerCase();
              }
            }

            // Apply search
            if (searchText) {
              show = show && rowText.toLowerCase().includes(searchText);
            }

            // Add to visible rows if it passes all filters
            if (show) {
              visibleRows.push(row);
            } else if (debuggedRows <= 5) {
              // Log first few filtered rows for debugging
              logRowDebug(row, tempFilters, false);
            }

            // Hide all rows initially
            row.style.display = 'none';
          });

          // Second pass: Apply pagination to visible rows
          visibleCount = visibleRows.length;

          // Reset all rows to hidden first
          rows.forEach((row) => {
            row.style.display = 'none';
          });

          // Then show only the rows for current page
          visibleRows.forEach((row, index) => {
            // Check if this row should be visible based on current page
            if (index >= startIndex && index <= endIndex) {
              row.style.display = '';
              displayedItems++;
            }
          });

          // Update pagination UI
          if (tempResultsCount) {
            const totalPages = Math.ceil(visibleCount / tempFilters.itemsPerPage);
            const endPosition = Math.min(startIndex + displayedItems, visibleCount);
            const startPosition = visibleCount > 0 ? startIndex + 1 : 0;

            tempResultsCount.textContent = `${startPosition}-${endPosition} z ${visibleCount}`;

            if (tempPrevButton) {
              tempPrevButton.disabled = tempFilters.currentPage <= 1;
            }

            if (tempNextButton) {
              const isLastPage = tempFilters.currentPage >= totalPages;
              tempNextButton.disabled = isLastPage;
            }

            // Update per-page buttons UI
            if (tempPerPageBtns) {
              tempPerPageBtns.forEach((btn) => {
                const btnValue = parseInt(btn.getAttribute('data-value'));
                if (btnValue === tempFilters.itemsPerPage) {
                  btn.classList.add('active');
                } else {
                  btn.classList.remove('active');
                }
              });
            }
          }
        }

        // Copy active filters from main table to temp fullscreen
        // Find active category from main table
        const activeMainCategoryBtn = document.querySelector('.wiertla-categories__filter-button.active');
        if (activeMainCategoryBtn) {
          const activeCategory = activeMainCategoryBtn.getAttribute('data-filter') || 'wszystkie';
          tempFilters.category = activeCategory;

          // Set active class in temp fullscreen
          const matchingTempBtn = tempFullscreen.querySelector(
            `.wiertla-categories__filter-button[data-filter="${activeCategory}"]`
          );
          if (matchingTempBtn) {
            tempCategoryBtns.forEach((el) => el.classList.remove('active'));
            matchingTempBtn.classList.add('active');
          }
        }

        // Copy filter values from main table
        const mainFilterSelects = document.querySelectorAll('.wiertla-categories__filter');
        mainFilterSelects.forEach((select) => {
          const filterType = select.getAttribute('data-filter');
          if (filterType && select.value) {
            tempFilters[filterType] = select.value;

            // Set same value in temp fullscreen
            const matchingTempSelect = tempFullscreen.querySelector(
              `.wiertla-categories__filter[data-filter="${filterType}"]`
            );
            if (matchingTempSelect) {
              matchingTempSelect.value = select.value;
            }
          }
        });

        // Add event listeners to elements in the temp fullscreen
        if (tempCategoryBtns) {
          tempCategoryBtns.forEach((btn) => {
            btn.addEventListener('click', function () {
              const category = this.getAttribute('data-filter') || 'wszystkie';

              // Update UI
              tempCategoryBtns.forEach((el) => el.classList.remove('active'));
              this.classList.add('active');

              // Update filters
              tempFilters.category = category;
              tempFilters.currentPage = 1;

              filterTempProducts();
            });
          });
        }

        if (tempFilterSelects) {
          tempFilterSelects.forEach((select) => {
            select.addEventListener('change', function () {
              const filterType = this.getAttribute('data-filter');
              const selectedValue = this.value;

              // Always reset to page 1 when any filter changes
              tempFilters.currentPage = 1;

              // Handle both 'category' and 'type' selects identically since they both use the same SKU prefix logic
              if (filterType === 'category' || filterType === 'type') {
                // Reset type filter regardless of which filter is changing
                // This ensures we start fresh
                tempFilters.type = '';

                if (selectedValue) {
                  if (filterType === 'category') {
                    // For category dropdown, map the value to category name for the UI sync
                    const categoryMapping = {
                      VW: 'koronkowe',
                      PR: 'plytkowe',
                      WW: 'vhm',
                      PS: 'sandvik',
                      WK: 'ksem',
                      WV: 'amec',
                    };

                    // If we have a value and it's in the mapping, use it
                    if (categoryMapping[selectedValue]) {
                      tempFilters.category = categoryMapping[selectedValue];
                    } else {
                      tempFilters.category = 'wszystkie';
                    }

                    // For filtering, we also set the type value which controls the SKU prefix filter
                    tempFilters.type = selectedValue;

                    // Also update UI - find the corresponding category button and activate it
                    if (tempCategoryBtns) {
                      tempCategoryBtns.forEach((btn) => {
                        btn.classList.remove('active');
                        if (btn.getAttribute('data-filter') === tempFilters.category) {
                          btn.classList.add('active');
                        }
                      });
                    }
                  } else if (filterType === 'type') {
                    // For type dropdown, set the type directly
                    // This is the key prefix (VW, PR, etc.) that will be used to filter SKUs
                    tempFilters.type = selectedValue;

                    // Update corresponding category for UI
                    const typeToCategory = {
                      VW: 'koronkowe',
                      PR: 'plytkowe',
                      WW: 'vhm',
                      PS: 'sandvik',
                      WK: 'ksem',
                      WV: 'amec',
                    };

                    if (typeToCategory[selectedValue]) {
                      tempFilters.category = typeToCategory[selectedValue];

                      // Also update category buttons UI
                      if (tempCategoryBtns) {
                        tempCategoryBtns.forEach((btn) => {
                          btn.classList.remove('active');
                          if (btn.getAttribute('data-filter') === tempFilters.category) {
                            btn.classList.add('active');
                          }
                        });
                      }
                    }
                  }
                } else {
                  // Clear filters if empty
                  tempFilters.type = '';
                  tempFilters.category = 'wszystkie';
                }
              } else {
                // Normal filter type (manufacturer, crown, etc.)
                tempFilters[filterType] = selectedValue;
              }

              // Reset to page 1 when changing filters
              tempFilters.currentPage = 1;

              // Apply filters
              filterTempProducts();
            });
          });
        }

        // Handle per-page buttons
        if (tempPerPageBtns && tempPerPageBtns.length > 0) {
          // Define handler function
          function handlePerPageClick(e) {
            if (e) e.preventDefault();

            // Remove active class from all buttons
            tempPerPageBtns.forEach((btn) => btn.classList.remove('active'));

            // Add active class to clicked button
            this.classList.add('active');

            // Update items per page value
            const newItemsPerPage = parseInt(this.getAttribute('data-value'));

            // Only update if value actually changed
            if (tempFilters.itemsPerPage !== newItemsPerPage) {
              tempFilters.itemsPerPage = newItemsPerPage;
              tempFilters.currentPage = 1; // Reset to first page
              filterTempProducts();
            }
          }

          // First, set the correct active button and add event listeners
          let foundActiveButton = false;

          tempPerPageBtns.forEach((btn) => {
            // Clear existing event listeners by cloning
            const oldBtn = btn;
            const newBtn = oldBtn.cloneNode(true);

            // Set active state
            const btnValue = parseInt(newBtn.getAttribute('data-value'));
            if (btnValue === 250) {
              // Force 250 as the default active button
              newBtn.classList.add('active');
              tempFilters.itemsPerPage = 250; // Force itemsPerPage to 250
              foundActiveButton = true;
            } else {
              newBtn.classList.remove('active');
            }

            // Add new click handler
            newBtn.onclick = handlePerPageClick;

            // Replace old button
            if (oldBtn.parentNode) {
              oldBtn.parentNode.replaceChild(newBtn, oldBtn);
            }
          });
        }

        if (tempSearchInput) {
          tempSearchInput.addEventListener('input', function () {
            tempFilters.search = this.value.trim();
            tempFilters.currentPage = 1;
            filterTempProducts();
          });
        }

        // Define direct click handlers for pagination buttons
        function handlePrevClick(e) {
          if (e) e.preventDefault();
          if (tempFilters.currentPage > 1) {
            tempFilters.currentPage--;
            filterTempProducts();
          }
        }

        function handleNextClick(e) {
          if (e) e.preventDefault();
          const rows = tempTableBody.querySelectorAll('tr');
          const totalRows = rows.length;
          const totalPages = Math.ceil(totalRows / tempFilters.itemsPerPage);

          if (tempFilters.currentPage < totalPages) {
            tempFilters.currentPage++;
            filterTempProducts();
          }
        }

        // Add event listeners for pagination buttons
        if (tempPrevButton) {
          // Completely replace the button to remove any existing handlers
          const oldPrevBtn = tempPrevButton;
          const newPrevBtn = document.createElement('button');
          newPrevBtn.className = oldPrevBtn.className;
          newPrevBtn.id = oldPrevBtn.id;
          newPrevBtn.innerHTML = oldPrevBtn.innerHTML;
          newPrevBtn.disabled = tempFilters.currentPage <= 1;

          // Add new click event listener
          newPrevBtn.onclick = handlePrevClick;

          // Replace the old button
          if (oldPrevBtn.parentNode) {
            oldPrevBtn.parentNode.replaceChild(newPrevBtn, oldPrevBtn);
            tempPrevButton = newPrevBtn;
          }
        }

        if (tempNextButton) {
          // Completely replace the button to remove any existing handlers
          const oldNextBtn = tempNextButton;
          const newNextBtn = document.createElement('button');
          newNextBtn.className = oldNextBtn.className;
          newNextBtn.id = oldNextBtn.id;
          newNextBtn.innerHTML = oldNextBtn.innerHTML;

          // Initialize button state
          const totalRows = tempTableBody.querySelectorAll('tr').length;
          const totalPages = Math.ceil(totalRows / tempFilters.itemsPerPage);
          newNextBtn.disabled = tempFilters.currentPage >= totalPages || totalPages <= 1;

          // Add new click event listener
          newNextBtn.onclick = handleNextClick;

          // Replace the old button
          if (oldNextBtn.parentNode) {
            oldNextBtn.parentNode.replaceChild(newNextBtn, oldNextBtn);
            tempNextButton = newNextBtn;
          }
        }

        // Apply initial filtering
        filterTempProducts();

        // Add event listener to the close button in the new container
        if (tempCloseButton) {
          tempCloseButton.addEventListener('click', function () {
            document.body.removeChild(tempFullscreen);
            document.body.style.overflow = '';
          });
        }

        document.body.style.overflow = 'hidden';
      } else {
        // Close fullscreen
        fullscreenView.style.cssText = 'display: none !important;';
        document.body.style.overflow = '';

        // Also remove temp fullscreen if it exists
        const tempFullscreen = document.getElementById('temp-fullscreen-view');
        if (tempFullscreen) {
          document.body.removeChild(tempFullscreen);
        }
      }
    }

    // Filter products in fullscreen view
    function filterFullscreenProducts() {
      if (!fullscreenTableBody) return;
      // Function implementation would go here
    }

    // Missing updateUrlParams function
    function updateUrlParams() {
      const url = new URL(window.location);

      // Update mainType parameter
      if (window.WiertlaCNC.activeTabType) {
        url.searchParams.set('mainType', window.WiertlaCNC.activeTabType);
      }

      // Update category parameter
      if (window.selectedCategory) {
        url.searchParams.set('category', window.selectedCategory);
      }

      // Update typ parameter
      if (window.WiertlaCNC.filters && window.WiertlaCNC.filters.typ && window.WiertlaCNC.filters.typ !== '') {
        url.searchParams.set('typ', window.WiertlaCNC.filters.typ);
      } else {
        url.searchParams.delete('typ');
      }

      // Update perPage parameter
      if (window.itemsPerPage && window.itemsPerPage !== 250) {
        url.searchParams.set('perPage', window.itemsPerPage);
      }

      // Update the URL without reloading the page
      window.history.replaceState({}, '', url);
    }

    // Handled globally in theme.js

    // Also add direct event listeners to buttons
    // Handled globally in theme.js

    // Event listener for close fullscreen button
    // Handled globally in theme.js

    // Event listeners for search
    // Handled in theme.js

    // Event listeners for category icons
    // Handled in theme.js

    // Event listeners for filter selects
    // Handled in theme.js

    // Event listeners for items per page
    // Handled in theme.js

    // Event listeners for pagination
    // Handled in theme.js

    // Handled in theme.js
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Status filter functionality
    const statusFilters = document.querySelectorAll(
      '.wiertla-categories__status-filters.desktop .wiertla-categories__status-filter'
    );

    // Remove any initial active states
    statusFilters.forEach((filter) => {
      filter.classList.remove('active');
    });

    // Check URL parameters for condition
    const params = new URLSearchParams(window.location.search);
    const conditionFromUrl = params.get('condition');

    if (conditionFromUrl) {
      // Find and activate the matching filter
      statusFilters.forEach((filter) => {
        if (filter.textContent.trim().toLowerCase() === conditionFromUrl.toLowerCase()) {
          filter.classList.add('active');
        }
      });
    }

    // Rest of your existing code...
  });
  const desktopTabs = document.querySelectorAll('.wiertla-categories__tabs.desktop .wiertla-categories__tab');

  // Add click event listener to each tab
  desktopTabs.forEach((tab) => {
    tab.addEventListener('click', function () {
      // Remove active class from all tabs
      desktopTabs.forEach((t) => t.classList.remove('active'));

      // Add active class to clicked tab
      this.classList.add('active');

      // Get the tab text to use as a filter
      const tabText = this.textContent.trim();

      // Set the filter state based on the tab
      if (tabText.includes('PŁYTKI')) {
        filterState.type = 'plate';
      } else if (tabText.includes('KORONKI')) {
        filterState.type = 'crown';
      } else if (tabText.includes('REGENERACJA')) {
        filterState.type = 'regeneration';
      }

      // Apply filters to update the table
      applyFilters();
    });
  });
</script>

<script>
  function toggleFullscreen() {
    const fullscreenView = document.querySelector('.wiertla-categories__fullscreen-view');
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');

    if (!fullscreenView || !fullscreenBtn) return;

    if (fullscreenView.style.display === 'none') {
      // Enter fullscreen
      fullscreenView.style.display = 'block';
      fullscreenBtn.innerHTML = `
        <img src="{{ 'zoom_out_map.svg' | asset_url }}" alt="Close fullscreen" class="wiertla-categories__fullscreen-icon" width="24" height="24">
        <span>Zamknij tryb pełnoekranowy</span>
      `;
      document.body.style.overflow = 'hidden';
    } else {
      // Exit fullscreen
      fullscreenView.style.display = 'none';
      fullscreenBtn.innerHTML = `
        <img src="{{ 'zoom_in_map.svg' | asset_url }}" alt="Fullscreen" class="wiertla-categories__fullscreen-icon">
        <span>Wyświetl tabelę na całej stronie</span>
      `;
      document.body.style.overflow = '';
    }
  }

  // Add event listener to the fullscreen button
  document.addEventListener('DOMContentLoaded', function () {
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');
    if (fullscreenBtn) {
      fullscreenBtn.addEventListener('click', toggleFullscreen);
    }
  });
</script>

<script>
  // Update category mappings - Legacy SKU prefix mappings
  window.WiertlaCNC = window.WiertlaCNC || {};
  window.WiertlaCNC.categoryMappings = {
    // Wiertła categories - SKU prefixes
    'koronkowe': 'VW',  // First
    'plytkowe': 'PR',   // Second
    'vhm': 'WW',        // Third
    'sandvik': 'PS',    // Fourth
    'ksem': 'WK',       // Fifth
    'amec': 'WV',       // Sixth
    'iscar': 'IS',
    'walter': 'WA',
    
    // Płytki categories
    'plytki': 'PW',
    
    // Koronki categories
    'koronki_kk': 'KK',
    'koronki_kw': 'KW', 
    'koronki_ki': 'KI',
    'koronki_kt': 'KT',
    'koronki_ks': 'KS',
    'koronki_ka': 'KA',
    'koronki_kg': 'KG',
    
    // Other manufacturers
    'GÜHRING': 'GÜHRING',
    'wnt': 'WNT',
    'mikrontool': 'MIKRONTOOL',
    'taegutec': 'TaeguTec'
  };
  
  // Modern category names for content-based filtering
  window.WiertlaCNC.modernCategoryNames = {
    'koronkowe': 'koronkowe',
    'plytkowe': 'plytkowe',
    'vhm': 'vhm',
    'sandvik': 'sandvik',
    'ksem': 'ksem',
    'amec': 'amec',
    'wcmx': 'wcmx',
    'lcmx': 'lcmx',
    '811': '811',
    'dft': 'dft',
    '880': '880',
    'wogx': 'wogx',
    'spgx': 'spgx',
    'p284': 'p284',
    'idi': 'idi',
    'p600': 'p600',
    'icm': 'icm',
    'icp': 'icp',
    '870': '870',
    'ktip': 'ktip'
  };
  
        // Define dropdown options for each tab type
      window.WiertlaCNC.tabTypeOptions = {
        'wiertla': [
          { value: '', text: 'Typ wiertła' },
          { value: 'koronkowe', text: 'Koronkowe' },
          { value: 'plytkowe', text: 'Płytkowe' },
          { value: 'vhm', text: 'VHM' },
          { value: 'sandvik', text: 'Sandvik 880' },
          { value: 'ksem', text: 'KSEM' },
          { value: 'amec', text: 'AMEC' }
        ],
        'plytki': [
          { value: '', text: 'Rodzaj płytki' },
          { value: 'wcmx', text: 'WCMX' },
          { value: 'lcmx', text: 'LCMX' },
          { value: '811', text: '811' },
          { value: 'dft', text: 'DFT' },
          { value: '880', text: '880' },
          { value: 'wogx', text: 'WOGX' },
          { value: 'spgx', text: 'SPGX' },
          { value: 'p284', text: 'P284' }
        ],
        'koronki': [
          { value: '', text: 'Rodzaj koronki' },
          { value: 'ksem', text: 'KSEM' },
          { value: 'idi', text: 'IDI' },
          { value: 'p600', text: 'P600' },
          { value: 'icm', text: 'ICM' },
          { value: 'icp', text: 'ICP' },
          { value: '870', text: '870' },
          { value: 'amec', text: 'AMEC' },
          { value: 'ktip', text: 'ktip' }
        ]
      };
      
      // Define manufacturer options
      window.WiertlaCNC.manufacturerOptions = [
        { value: '', text: 'Producent' },
        { value: 'Sandvik', text: 'SANDVIK' },
        { value: 'Walter', text: 'WALTER' },
        { value: 'ISCAR', text: 'ISCAR' },
        { value: 'KENNAMETAL', text: 'KENNAMETAL' },
        { value: 'DSK', text: 'DSK' },
        { value: 'AMEC', text: 'AMEC' }
      ];
      
      // Function to update dropdowns based on active tab
      function updateDropdowns() {
        const tabType = window.WiertlaCNC.activeTabType;
        
        // Update category dropdowns
        const categoryDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="category"]');
        if (categoryDropdowns.length > 0 && window.WiertlaCNC.tabTypeOptions[tabType]) {
          categoryDropdowns.forEach(dropdown => {
            // Clear existing options
            dropdown.innerHTML = '';
            
            // Add new options based on tab type
            window.WiertlaCNC.tabTypeOptions[tabType].forEach(option => {
              const optionElement = document.createElement('option');
              optionElement.value = option.value;
              optionElement.textContent = option.text;
              dropdown.appendChild(optionElement);
            });
          });
        }
        
        // Update manufacturer dropdowns
        const manufacturerDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="manufacturer"]');
        if (manufacturerDropdowns.length > 0 && window.WiertlaCNC.manufacturerOptions) {
          manufacturerDropdowns.forEach(dropdown => {
            // Clear existing options
            dropdown.innerHTML = '';
            
            // Add manufacturer options
            window.WiertlaCNC.manufacturerOptions.forEach(option => {
              const optionElement = document.createElement('option');
              optionElement.value = option.value;
              optionElement.textContent = option.text;
              dropdown.appendChild(optionElement);
            });
          });
        }
      }
      
      // Function to show/hide category icons based on active tab
      window.updateCategoryIcons = function() {
        const tabType = window.WiertlaCNC.activeTabType;
        const allIcons = document.querySelectorAll('.wiertla-categories__icon-item');
        
        // Define categories per tab exactly as specified
        const wiertlaCategories = ['koronkowe', 'plytkowe', 'vhm', 'sandvik', 'ksem', 'amec'];
        const plytkiCategories = ['wcmx', 'lcmx', '811', 'dft', '880', 'wogx', 'spgx', 'p284'];
        const koronkiCategories = ['ksem', 'idi', 'p600', 'icm', 'icp', '870', 'amec', 'ktip'];
        
        let visibleIcons = [];
        let currentTabCategories = [];
        let currentTabClass = '';
        
        // Determine which categories and tab class to show for current tab
        if (tabType === 'wiertla') {
          currentTabCategories = wiertlaCategories;
          currentTabClass = 'wiertla-tab-wiertla';
        } else if (tabType === 'plytki') {
          currentTabCategories = plytkiCategories;
          currentTabClass = 'wiertla-tab-plytki';
        } else if (tabType === 'koronki') {
          currentTabCategories = koronkiCategories;
          currentTabClass = 'wiertla-tab-koronki';
        }
        
        
        allIcons.forEach(icon => {
          const category = icon.getAttribute('data-category');
          
          // Always show "wszystkie" (all) category regardless of tab
          if (category === 'wszystkie') {
            icon.style.display = '';
            visibleIcons.push(category);
            return;
          }
          
          // Check if icon belongs to current tab AND has correct category
          const belongsToCurrentTab = icon.classList.contains(currentTabClass);
          const hasCorrectCategory = currentTabCategories.includes(category);
          
          if (belongsToCurrentTab && hasCorrectCategory) {
              icon.style.display = '';
            visibleIcons.push(category);
            } else {
              icon.style.display = 'none';
          }
        });
        
        
      
      }

  // Update icon mappings
  window.WiertlaCNC.iconMappings = {
    'koronkowe': '{{ 'ico_big_koronkowe.svg' | asset_url }}',
    'plytkowe': '{{ 'ico_big_plytkowe.svg' | asset_url }}',
    'vhm': '{{ 'ico_big_vhm.svg' | asset_url }}',
    'sandvik': '{{ 'ico_big_sandvik.svg' | asset_url }}',
    'amec': '{{ 'ico_big_amec.svg' | asset_url }}',
    'ksem': '{{ 'ico_big_ksem.svg' | asset_url }}',
    'iscar': '{{ 'ico_big_koronkowe.svg' | asset_url }}', // Fallback to existing icon
    'walter': '{{ 'ico_big_vhm.svg' | asset_url }}',      // Fallback to existing icon
    'dsk': '{{ 'ico_big_plytkowe.svg' | asset_url }}'     // Fallback to existing icon
  };

  function applyFilters() {
    // Delegate to strict global filter if available
    try { if (window && window.applyFilters && window.applyFilters !== applyFilters) return window.applyFilters(); } catch(_) {}
    
    // Helper function to check Shopify availability
    function getNumber(val){
      var n = Number((val || '').toString().replace(',', '.'));
      return isNaN(n) ? 0 : n;
    }
    function isShopifyAvailable(product){
      if (product == null) return false;
      // Only check Shopify's native availability - require actual inventory
      if (getNumber(product.inventory_quantity) > 0) return true;
      if (Array.isArray(product.variants)){
        for (var i=0;i<product.variants.length;i++){
          var v = product.variants[i] || {};
          if (getNumber(v.inventory_quantity) > 0) return true;
        }
      }
      // Don't trust product.available flag alone - require inventory
      return false;
    }
    
    const selectedCategory = document.querySelector('.wiertla-categories__icon-item.active')?.getAttribute('data-category');
    const selectedStatus = document.querySelector('.wiertla-categories__status-item.active')?.getAttribute('data-status');
    let filteredProducts = window.WiertlaCNC.products;
    
    // FIRST: Filter by availability - only show products that are available
    filteredProducts = filteredProducts.filter(product => {
      return isShopifyAvailable(product);
    });
    
    // Apply category filter
    if (selectedCategory && selectedCategory !== 'wszystkie') {
      const categoryCode = window.WiertlaCNC.categoryMappings[selectedCategory];
      filteredProducts = filteredProducts.filter(product => {
        return product.custom_category === categoryCode;
      });
    }
    
    // Apply status filter
    if (selectedStatus && selectedStatus !== 'all') {
      filteredProducts = filteredProducts.filter(product => {
        if (selectedStatus === 'rentable') {
          return product.rentable === true;
        } else if (selectedStatus === 'non-rentable') {
          return product.rentable === false;
        }
        return true;
      });
    }
    
    // Apply manufacturer filter
    if (window.WiertlaCNC.filters.manufacturer && window.WiertlaCNC.filters.manufacturer !== 'all') {
      const manufacturerMapping = {
        'sandvik': 'Sandvik',
        'iscar': 'ISCAR',
        'walter': 'Walter',
        'kennametal': 'KENNAMETAL',
        'amec': 'AMEC',
        'guhring': 'GÜHRING',
        'wnt': 'WNT',
        'mikrontool': 'MIKRONTOOL',
        'taegutec': 'TaeguTec'
      };
      const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer.toLowerCase()];
      if (expectedManufacturer) {
        filteredProducts = filteredProducts.filter(product => {
          return product.vendor === expectedManufacturer;
        });
      }
    }
    
    // Update table with filtered products
    generateTable(filteredProducts);
    
    // Update results count
    const resultsCount = document.querySelector('.wiertla-categories__results-count');
    if (resultsCount) {
      resultsCount.textContent = `${filteredProducts.length} wyników`;
    }
  }

  // Add event listeners for category icons
  document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
    icon.addEventListener('click', function() {
      // Remove active class from all icons
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(i => i.classList.remove('active'));
      // Add active class to clicked icon
      this.classList.add('active');
      // Apply filters
      applyFilters();
    });
  });

  // Add missing sync functions for category dropdown and icons
  
  // Function to sync filter dropdown with category icons (works for both typ and rodzaj)
  function syncTypeFilterWithIcons(filterValue, filterType = 'typ') {
    
    // Remove active class from all category icons
    document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
      icon.classList.remove('active');
    });
    
    let categoryName = 'wszystkie';
    
    if (filterType === 'typ') {
      // Map typ filter values to category names (for wiertla tab)
      const filterToCategory = {
        'koronkowe': 'koronkowe',
        'plytkowe': 'plytkowe', 
        'vhm': 'vhm',
        'sandvik': 'sandvik',
        'ksem': 'ksem',
        'amec': 'amec',
        '': 'wszystkie'
      };
      categoryName = filterToCategory[filterValue] || 'wszystkie';
    } else if (filterType === 'rodzaj') {
      // Map rodzaj filter values to category names (for plytki/koronki tabs)
      const rodzajToCategory = {
        // Plytki values
        'wcmx': 'wcmx',
        'lcmx': 'lcmx',
        '811': '811', 
        'dft': 'dft',
        '880': '880',
        'wogx': 'wogx',
        'spgx': 'spgx',
        'p284': 'p284',
        // Koronki values
        'ksem': 'ksem',
        'idi': 'idi',
        'p600': 'p600',
        'icm': 'icm',
        'icp': 'icp',
        '870': '870',
        'amec': 'amec',
        'ktip': 'ktip',
        '': 'wszystkie'
      };
      categoryName = rodzajToCategory[filterValue] || 'wszystkie';
    }
    
    // Set selectedCategory for the filtering system
    window.selectedCategory = categoryName;
    
    // Find and activate the matching category icon
    const matchingIcon = document.querySelector(`.wiertla-categories__icon-item[data-category="${categoryName}"]`);
    if (matchingIcon) {
      matchingIcon.classList.add('active');
    } else {
      // If no specific icon found, activate "wszystkie"
      const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
      if (wszystkieIcon) {
        wszystkieIcon.classList.add('active');
      }
    }
  }
  
  // Function to sync rodzaj filter dropdown with category icons
  function syncRodzajFilterWithIcons(filterValue) {
    syncTypeFilterWithIcons(filterValue, 'rodzaj');
  }
  
  // Function to sync category icons with appropriate filter dropdown based on active tab
  function syncIconsWithTypeFilter(categoryName) {
    const activeTab = window.WiertlaCNC.activeTabType || 'wiertla';
    
    if (activeTab === 'wiertla') {
      // For wiertla tab, use typ filter
      const categoryToFilter = {
        'koronkowe': 'koronkowe',
        'plytkowe': 'plytkowe',
        'vhm': 'vhm', 
        'sandvik': 'sandvik',
        'ksem': 'ksem',
        'amec': 'amec',
        'wszystkie': ''
      };
      
      const filterValue = categoryToFilter[categoryName] || '';
      
      const typeFilter = document.querySelector('.wiertla-categories__filter[data-filter="typ"]');
      if (typeFilter) {
        typeFilter.value = filterValue;
        
        if (!window.WiertlaCNC.filters) {
          window.WiertlaCNC.filters = {};
        }
        window.WiertlaCNC.filters.typ = filterValue;
      }
    } else {
      // For plytki/koronki tabs, use rodzaj filter
      const categoryToRodzaj = {
        // Plytki categories
        'wcmx': 'wcmx',
        'lcmx': 'lcmx', 
        '811': '811',
        'dft': 'dft',
        '880': '880',
        'wogx': 'wogx',
        'spgx': 'spgx',
        'p284': 'p284',
        // Koronki categories  
        'ksem': 'ksem',
        'idi': 'idi',
        'p600': 'p600',
        'icm': 'icm',
        'icp': 'icp',
        '870': '870',
        'amec': 'amec',
        'ktip': 'ktip',
        'wszystkie': ''
      };
      
      const filterValue = categoryToRodzaj[categoryName] || '';
      
      const rodzajFilter = document.querySelector(`.wiertla-categories__filter[data-filter="rodzaj"][data-tab="${activeTab}"]`);
      if (rodzajFilter) {
        rodzajFilter.value = filterValue;
        
        if (!window.WiertlaCNC.filters) {
          window.WiertlaCNC.filters = {};
        }
        window.WiertlaCNC.filters.rodzaj = filterValue;
      }
    }
  }
  
  // Function to reset categories when switching tabs
  function resetCategoriesOnTabSwitch(newTabType) {
    
    // Set reset flag to prevent interference from other handlers
    window.isResettingCategories = true;
    
    // FIRST: Reset selectedCategory to "wszystkie"
    window.selectedCategory = 'wszystkie';
    
    // SECOND: Clear ALL filter states to ensure clean reset
    if (!window.WiertlaCNC.filters) {
      window.WiertlaCNC.filters = {};
    }
    window.WiertlaCNC.filters.typ = '';
    window.WiertlaCNC.filters.rodzaj = '';
    window.WiertlaCNC.filters.category = '';
    
    // THIRD: Clear currentFilters as well
    if (!window.currentFilters) {
      window.currentFilters = {};
    }
    window.currentFilters.typ = '';
    window.currentFilters.rodzaj = '';
    window.currentFilters.category = '';
    
    // FOURTH: Clear ALL filter dropdowns (both typ and rodzaj) - force clear
    const allFilterDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="typ"], .wiertla-categories__filter[data-filter="rodzaj"]');
    allFilterDropdowns.forEach(dropdown => {
      dropdown.value = '';
      dropdown.selectedIndex = 0; // Force reset to first option
    });
    
    // FIFTH: Remove active class from all category icons and activate "wszystkie"
    document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
      icon.classList.remove('active');
    });
    
    const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
    if (wszystkieIcon) {
      wszystkieIcon.classList.add('active');
    }
    
    // SIXTH: Reset page to 1
    window.currentPage = 1;
    
    
    // SEVENTH: Double-check and force clear any lingering filter values
    setTimeout(() => {
      // Final safety check - force clear all filter values again
      window.WiertlaCNC.filters.typ = '';
      window.WiertlaCNC.filters.rodzaj = '';
      window.WiertlaCNC.filters.category = '';
      
      applyFilters();
      
      // Clear reset flag after everything is done
      window.isResettingCategories = false;
    }, 150);
    
  }
  
  // Make sync functions globally available
  window.syncTypeFilterWithIcons = syncTypeFilterWithIcons;
  window.syncRodzajFilterWithIcons = syncRodzajFilterWithIcons;
  window.syncIconsWithTypeFilter = syncIconsWithTypeFilter;
  window.resetCategoriesOnTabSwitch = resetCategoriesOnTabSwitch;
  
  // Update the existing tab switching function to reset categories
  const originalInitializeTabs = initializeTabs;
  function initializeTabs() {
    // Function to switch tabs
    function switchTab(tabType) {
      const previousTab = window.WiertlaCNC.activeTabType;
      
      
      window.WiertlaCNC.activeTabType = tabType;

      // Reset categories when switching tabs
      if (previousTab && previousTab !== tabType) {
        resetCategoriesOnTabSwitch(tabType);
      } else {
      }

      // Update tab visual states
      document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
        tab.classList.remove('active');
        if (tab.getAttribute('data-tab-type') === tabType) {
          tab.classList.add('active');
        }
      });

      // Update dropdowns
      updateDropdowns();

      // Update category icons
      updateCategoryIcons();

      // Update URL parameter
      const url = new URL(window.location);
      url.searchParams.set('mainType', tabType);
      window.history.replaceState({}, '', url.toString());
      
      // Apply filters after tab switch (only if reset wasn't called, to avoid double filtering)
      if (!previousTab || previousTab === tabType) {
        applyFilters();
      }
    }

    // Add event listeners for tab buttons
    document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
      tab.addEventListener('click', function () {
        const tabType = this.getAttribute('data-tab-type');
        switchTab(tabType);
      });
    });

    // Initialize from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainType = urlParams.get('mainType') || 'wiertla';
    switchTab(mainType);
  }
  
  // Enhanced icon click handler to sync with dropdown
  document.addEventListener('click', function(e) {
    const iconItem = e.target.closest('.wiertla-categories__icon-item');
    if (iconItem) {
      const category = iconItem.dataset.category;
      if (category) {
        // Skip sync during tab resets to prevent overriding the reset
       
        
        // Update selectedCategory
        window.selectedCategory = category;
        
        // Sync with type filter dropdown
        syncIconsWithTypeFilter(category);
        
        // The existing icon click handler will take care of visual updates and filtering
      }
    }
  });

  // Inject mainType dropdown into static fullscreen filters-left
  (function addStaticFullscreenMainTypeDropdown() {
    const filtersLeft = document.querySelector('.wiertla-categories__fullscreen-filters .wiertla-categories__filters-left');
    if (!filtersLeft) return;
    if (filtersLeft.querySelector('.wiertla-filter-mainType')) return; // avoid duplicates
    const wszBtn = filtersLeft.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
    const select = document.createElement('select');
    select.className = 'wiertla-categories__filter wiertla-filter-mainType';
    select.setAttribute('data-filter', 'mainType');
    select.innerHTML = `
      <option value="wiertla">WIERTŁA</option>
      <option value="plytki">PŁYTKI</option>
      <option value="koronki">KORONKI</option>
    `;
    if (wszBtn) {
      wszBtn.insertAdjacentElement('afterend', select);
    } else {
      filtersLeft.insertBefore(select, filtersLeft.firstChild);
    }

    function setFilterVisibility(tabType) {
      const typSel = filtersLeft.querySelector('.wiertla-filter-type[data-tab="wiertla"]');
      const rodzP = filtersLeft.querySelector('.wiertla-filter-rodzaj[data-tab="plytki"]');
      const rodzK = filtersLeft.querySelector('.wiertla-filter-rodzaj[data-tab="koronki"]');
      if (typSel) typSel.style.display = (tabType === 'wiertla') ? '' : 'none';
      if (rodzP) rodzP.style.display = (tabType === 'plytki') ? '' : 'none';
      if (rodzK) rodzK.style.display = (tabType === 'koronki') ? '' : 'none';
    }

    const urlParams = new URLSearchParams(window.location.search);
    const initialTabType = urlParams.get('mainType') || (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
    if (!window.WiertlaCNC) window.WiertlaCNC = {};
    window.WiertlaCNC.activeTabType = initialTabType;
    select.value = initialTabType;
    setFilterVisibility(initialTabType);
    try { updateTableHeaders(initialTabType); } catch (e) {}

    select.addEventListener('change', function() {
      const tabType = this.value;
      window.WiertlaCNC.activeTabType = tabType;
      const url = new URL(window.location.href);
      url.searchParams.set('mainType', tabType);
      window.history.replaceState({}, '', url.toString());
      window.currentPage = 1;
      window.itemsPerPage = 100;
      setFilterVisibility(tabType);
      try { updateTableHeaders(tabType); } catch (e) {}
      applyFullscreenFilters();
    });
  })();
</script>
<script>
  // Global filter state
  window.WiertlaCNC.filters = {
    category: 'wszystkie',
    status: 'all',
    type: 'all',
    crown: 'all',
    manufacturer: 'all',
    page: 1,
    perPage: 100,
  };

  // Function to update URL parameters
  function updateUrlParams() {
    const params = new URLSearchParams(window.location.search);

    // Update all filter parameters
    const filterKeys = ['category', 'status', 'type', 'crown', 'manufacturer', 'page', 'perPage'];
    filterKeys.forEach((key) => {
      if (window.WiertlaCNC.filters[key] !== 'all' && window.WiertlaCNC.filters[key] !== 1) {
        params.set(key, window.WiertlaCNC.filters[key]);
      } else {
        params.delete(key);
      }
    });

    // Update currentPage parameter
    if (window.currentPage && window.currentPage !== 1) {
      params.set('currentPage', window.currentPage);
    } else {
      params.delete('currentPage');
    }

    const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
    window.history.replaceState({}, '', newUrl);
  }

  // Function to read parameters from URL
  function readUrlParams() {
    const params = new URLSearchParams(window.location.search);
    window.WiertlaCNC.filters = {
      category: params.get('category') || 'wszystkie',
      status: params.get('status') || 'all',
      type: params.get('type') || 'all',
      crown: params.get('crown') || 'all',
      manufacturer: params.get('manufacturer') || 'all',
      page: parseInt(params.get('page')) || 1,
      perPage: parseInt(params.get('perPage')) || 100,
    };
    
    // Read currentPage from URL parameter
    const urlPage = parseInt(params.get('currentPage')) || 1;
    window.currentPage = urlPage;
    
    // Debug flag via URL: ?debugStock=1
    try {
      window.WiertlaCNC = window.WiertlaCNC || {};
      window.WiertlaCNC.debugStocks = (params.get('debugStock') === '1' || params.get('debug') === 'stock');
      window.WiertlaCNC.debugList = (params.get('debugList') === '1' || params.get('debug') === 'list');
    } catch(_) {}
  }

  // Function to apply filters
  function applyFilters() {
    function getNumber(val){
      var n = Number((val || '').toString().replace(',', '.'));
      return isNaN(n) ? 0 : n;
    }
    function normalizeCategoryName(s){
      try {
        var t = (s || '').toString().toLowerCase();
        t = t.replace(/[łŁ]/g,'l').replace(/[ąĄ]/g,'a').replace(/[ęĘ]/g,'e').replace(/[ćĆ]/g,'c').replace(/[ńŃ]/g,'n').replace(/[óÓ]/g,'o').replace(/[śŚ]/g,'s').replace(/[żŻźŹ]/g,'z');
        return t;
      } catch(_) { return ''; }
    }
    function getSkuPrefix(product){
      try {
        var sku = '';
        if (product) {
          sku = String(product.sku || product.custom_symbol || product.custom_kod_producenta || '');
        }
        return sku.substring(0, 2).toUpperCase();
      } catch(_) { return ''; }
    }
    function isShopifyAvailable(product){
      if (product == null) return false;
      // Only check Shopify's native availability
      if (getNumber(product.inventory_quantity) > 0) return true;
      if (Array.isArray(product.variants)){
        for (var i=0;i<product.variants.length;i++){
          var v = product.variants[i] || {};
          if (getNumber(v.inventory_quantity) > 0) return true;
        }
      }
      // Only use Shopify's available flag, not custom fields
      if (product.available === true) return true;
      return false;
    }
    const sourceProducts = (window.WiertlaCNC && Array.isArray(window.WiertlaCNC.products))
      ? window.WiertlaCNC.products
      : (Array.isArray(window.products) ? window.products : []);
    const filteredProducts = sourceProducts.filter((product) => {
      // Require availability only by Shopify data
      var available = isShopifyAvailable(product);
      if (!available) return false;
      // Never show items with missing SKU/symbol/producer code
      try {
        var skuField = (product && (product.sku || product.custom_symbol || product.custom_kod_producenta)) || '';
        if (!String(skuField).trim()) return false;
      } catch(_) { return false; }
      // Strict SKU-prefix gating by active tab ALWAYS
      var activeTab = (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
      var prefix = getSkuPrefix(product);
      if (activeTab === 'koronki') {
        var koronkiSet = { KK:1, KW:1, KI:1, KT:1, KS:1, KA:1, KG:1 };
        if (!koronkiSet[prefix]) return false;
      } else if (activeTab === 'plytki') {
        // Allow plate SKUs with prefixes typical for plates, including Sandvik 880 (PD.)
        var plytkiSet = { PW:1, PD:1 };
        if (!plytkiSet[prefix]) return false;
      } else { // wiertla
        var wiertlaSet = { VW:1, WV:1, PR:1, WW:1, PS:1, WK:1, WA:1 };
        if (!wiertlaSet[prefix]) return false;
      }

      // Additional category filter (if specific sub-category chosen)
      if (window.WiertlaCNC.filters.category) {
        var catRaw = String(window.WiertlaCNC.filters.category || '');
        var cat = normalizeCategoryName(catRaw);
        var prodCat = normalizeCategoryName(product && product.custom_category);
        if (cat && cat !== 'wszystkie' && prodCat && prodCat.indexOf(cat) === -1) {
          return false;
        }
      }

      // Manufacturer filter
      if (window.WiertlaCNC.filters.manufacturer) {
        const manufacturerMapping = {
          sandvik: 'Sandvik',
          iscar: 'ISCAR',
          walter: 'Walter',
          kennametal: 'KENNAMETAL',
          amec: 'AMEC',
          guhring: 'GÜHRING',
          wnt: 'WNT',
          mikrontool: 'MIKRONTOOL',
          taegutec: 'TaeguTec',
        };
        const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer];
        if (!expectedManufacturer) return false;
        if (!product.vendor || !product.vendor.toLowerCase().includes(expectedManufacturer.toLowerCase())) {
          return false;
        }
      }

      // Status filter
      if (window.WiertlaCNC.filters.status) {
        if (window.WiertlaCNC.filters.status === 'rentable' && !product.rentable) {
          return false;
        }
        if (window.WiertlaCNC.filters.status === 'non-rentable' && product.rentable) {
          return false;
        }
      }

      return true;
    });

    // (Debug removed to reduce file size)

    // Update pagination
    window.totalPages = Math.ceil(filteredProducts.length / window.WiertlaCNC.filters.perPage);
    if (window.WiertlaCNC.filters.page > window.totalPages) {
      window.WiertlaCNC.filters.page = 1;
    }

    // Update URL parameters
    updateUrlParams();

    // Generate table with filtered products
    generateTable(filteredProducts);
    // Emit CSP-safe summary so we can trace where items on screen came from
    try {
      var tab = (window.WiertlaCNC && window.WiertlaCNC.activeTabType) || 'wiertla';
      var prefixFn = function(p){ try { return String(p && p.sku || '').substring(0,2).toUpperCase(); } catch(_){ return ''; } };
      var summary = {
        activeTab: tab,
        totalFiltered: filteredProducts.length,
        firstPageSkus: filteredProducts.slice(0, 30).map(function(p){ return p && p.sku; }).filter(Boolean),
        firstPagePrefixes: filteredProducts.slice(0, 30).map(prefixFn).filter(Boolean),
        source: Array.isArray(window.WiertlaCNC && window.WiertlaCNC.products) ? 'WiertlaCNC.products' : (Array.isArray(window.products) ? 'window.products' : 'unknown')
      };
      window.dispatchEvent(new CustomEvent('wiertla:filtered', { detail: summary }));
    } catch(_) {}

    // (Debug removed to reduce file size)
  }

  // Ensure global reference points to the strict, SKU-gated filter implementation
  try { window.applyFilters = applyFilters; } catch(_) {}
  // Force one strict re-render after this definition replaces legacy applyFilters
  try {
    if (!window.__wStrictAppliedOnce) {
      window.__wStrictAppliedOnce = true;
      setTimeout(function(){ try { if (typeof window.applyFilters === 'function') window.applyFilters(); } catch(_) {} }, 0);
    }
  } catch(_) {}
  // Re-apply strict filters whenever hydration merges products
  try {
    window.addEventListener('wiertla:productsUpdated', function(){ if (typeof window.applyFilters === 'function') window.applyFilters(); });
    window.addEventListener('wiertla:hydrateComplete', function(){ if (typeof window.applyFilters === 'function') window.applyFilters(); });
  } catch(_) {}

  // Function to update pagination controls
  function updatePaginationControls(totalItems) {
    const totalPages = Math.ceil(totalItems / window.WiertlaCNC.filters.perPage);
    const paginationContainer = document.querySelector('.wiertla-categories__pagination');

    if (paginationContainer) {
      let paginationHTML = '';

      // Previous button (CSP-safe: use data-page, external handler binds click)
      paginationHTML += `
        <button class="wiertla-categories__pagination-btn ${window.WiertlaCNC.filters.page === 1 ? 'disabled' : ''}"
                data-page="${window.WiertlaCNC.filters.page - 1}" aria-label="Poprzednia strona">
          Poprzednia
        </button>
      `;

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        paginationHTML += `
          <button class="wiertla-categories__pagination-btn ${window.WiertlaCNC.filters.page === i ? 'active' : ''}"
                  data-page="${i}" aria-label="Strona ${i}">
            ${i}
          </button>
        `;
      }

      // Next button (CSP-safe)
      paginationHTML += `
        <button class="wiertla-categories__pagination-btn ${
          window.WiertlaCNC.filters.page === totalPages ? 'disabled' : ''
        }" 
                data-page="${window.WiertlaCNC.filters.page + 1}" aria-label="Następna strona">
          Następna
        </button>
      `;

      paginationContainer.innerHTML = paginationHTML;
    }
  }

  // Function to change page
  function changePage(newPage) {
    window.WiertlaCNC.filters.page = newPage;
    applyFilters();
  }

  // CSP-safe: delegate pagination clicks for buttons with data-page
  try {
    document.addEventListener('click', function(e){
      var target = e.target;
      if (!target) return;
      // If inner element inside button, climb up
      if (!target.hasAttribute('data-page')) {
        var btn = target.closest && target.closest('button[data-page]');
        if (btn) target = btn; else return;
      }
      var pageAttr = target.getAttribute('data-page');
      if (!pageAttr) return;
      var page = parseInt(pageAttr, 10);
      if (!isFinite(page)) return;
      e.preventDefault();
      try { changePage(page); } catch(_) {}
    });
  } catch(_) {}

  // Initialize filters from URL on page load
  document.addEventListener('DOMContentLoaded', function () {
    initializeFromUrl();
  });

  // Handle page navigation (back/forward buttons)
  window.addEventListener('pageshow', function(event) {
    // Only reinitialize if the page was loaded from cache (back/forward navigation)
    if (event.persisted) {
      initializeFromUrl();
    }
  });

  function initializeFromUrl() {
    // Initialize active tab type from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainTypeFromUrl = urlParams.get('mainType');
    if (mainTypeFromUrl && ['wiertla', 'plytki', 'koronki'].includes(mainTypeFromUrl)) {
      window.WiertlaCNC.activeTabType = mainTypeFromUrl;
    } else {
      window.WiertlaCNC.activeTabType = 'wiertla';
    }

    // Read initial parameters from URL
    readUrlParams();

    // Synchronize selectedCategory with URL parameter
    const categoryFromUrl = urlParams.get('category');
    if (categoryFromUrl) {
      window.selectedCategory = categoryFromUrl;
    } else {
      window.selectedCategory = 'wszystkie';
    }

    // Set active states based on URL parameters
    const filterTypes = ['category', 'status', 'type', 'crown', 'manufacturer'];
    filterTypes.forEach((type) => {
      const element = document.querySelector(
        `.wiertla-categories__${type}-item[data-${type}="${window.WiertlaCNC.filters[type]}"]`
      );
      if (element) {
        element.classList.add('active');
      }
    });

    // Apply initial filters
    applyFilters();
    // Initialize per-page buttons active state (desktop + mobile)
    (function syncPerPageButtonsActive(){
      var current = (window.WiertlaCNC && window.WiertlaCNC.filters && window.WiertlaCNC.filters.perPage) || (typeof itemsPerPage !== 'undefined' ? itemsPerPage : 100);
      document.querySelectorAll('.wiertla-categories__per-page-button').forEach(function(btn){
        var val = parseInt(btn.getAttribute('data-value'));
        if (val === current) btn.classList.add('active'); else btn.classList.remove('active');
      });
      document.querySelectorAll('.wiertla-categories__mobile-per-page-button').forEach(function(btn){
        var val = parseInt(btn.getAttribute('data-items'));
        if (val === current) btn.classList.add('active'); else btn.classList.remove('active');
      });
    })();

    // Add event listeners for all filter types
    filterTypes.forEach((type) => {
      document.querySelectorAll(`.wiertla-categories__${type}-item`).forEach((item) => {
        item.addEventListener('click', function () {
          // Remove active class from all items of this type
          document.querySelectorAll(`.wiertla-categories__${type}-item`).forEach((i) => i.classList.remove('active'));
          // Add active class to clicked item
          this.classList.add('active');
          // Reset to first page when changing filters
          window.WiertlaCNC.filters.page = 1;
          // Apply filters
          applyFilters();
        });
      });
    });

    // Initialize tab functionality
    initializeTabs();

    // Call updateDropdowns to populate manufacturer dropdown
    updateDropdowns();
  }

  // Function to initialize tab functionality
  function initializeTabs() {
    // Function to switch tabs
    function switchTab(tabType) {
      const previousTab = window.WiertlaCNC.activeTabType;
      window.WiertlaCNC.activeTabType = tabType;

      // Reset categories when switching tabs
      if (previousTab !== tabType) {
        resetCategoriesOnTabSwitch(tabType);
      }

      // Update tab visual states
      document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
        tab.classList.remove('active');
        if (tab.getAttribute('data-tab-type') === tabType) {
          tab.classList.add('active');
        }
      });

      // Update dropdowns
      updateDropdowns();

      // Update category icons
      updateCategoryIcons();

      // Update URL parameter
      const url = new URL(window.location);
      url.searchParams.set('mainType', tabType);
      window.history.replaceState({}, '', url);
      
      // Apply filters after tab switch
      applyFilters();
    }

    // Add event listeners for tab buttons
    document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
      tab.addEventListener('click', function () {
        const tabType = this.getAttribute('data-tab-type');
        switchTab(tabType);
      });
    });

    // Initialize from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainType = urlParams.get('mainType') || 'wiertla';
    switchTab(mainType);
  }

  // Add event listener for category select
  const categorySelect = document.querySelector('.wiertla-categories__filter[data-filter="category"]');
  categorySelect?.addEventListener('change', function () {
    const value = this.value;
    const categoryMapping = {
      VW: 'koronkowe',
      PR: 'plytkowe',
      WW: 'vhm',
      PS: 'sandvik',
      WK: 'ksem',
      WV: 'amec',
    };

    window.selectedCategory = value ? categoryMapping[value] : 'wszystkie';

    // Update active states
    document.querySelectorAll('.wiertla-categories__icon-item').forEach((item) => {
      item.classList.remove('active');
      if (item.getAttribute('data-category') === window.selectedCategory) {
        item.classList.add('active');
      }
    });

    // Reset to first page when changing filters
    window.WiertlaCNC.filters.page = 1;
    // Apply filters
    applyFilters();
  });

  // Add event listener for manufacturer select
  document
    .querySelector('.wiertla-categories__filter[data-filter="manufacturer"]')
    .addEventListener('change', function () {
      const value = this.value;
      const manufacturerMapping = {
        AMEC: 'amec',
        GÜHRING: 'guhring',
        ISCAR: 'iscar',
        KENNAMETAL: 'kennametal',
        MIKRONTOOL: 'mikrontool',
        Sandvik: 'sandvik',
        TaeguTec: 'taegutec',
        Walter: 'walter',
        WNT: 'wnt',
      };

      window.WiertlaCNC.filters.manufacturer = value ? manufacturerMapping[value] : '';

      // Reset to first page when changing filters
      window.WiertlaCNC.filters.page = 1;
      // Apply filters
      applyFilters();
    });
</script>
<script>
  // Add styles for rent button

  // Add click handlers for rent buttons
  document.addEventListener('click', function (e) {
    if (e.target.closest('.wiertla-categories__rent-button, .wiertla-categories__mobile-rent-button')) {
      e.preventDefault();
      e.stopPropagation();
      const button = e.target.closest('.wiertla-categories__rent-button, .wiertla-categories__mobile-rent-button');
      const productId = button.dataset.productId;
      const numericId = Number(productId);
      const product = (window.WiertlaCNC.products || []).find((p) => (p.id === numericId) || (String(p.id) === String(productId)) || (String(p.handle) === String(productId)));
      console.log('[Rent] Clicked rent button', { productId, numericId, foundProduct: !!product });
      if (product) {
        window.WiertlaCNC.openRentModal(product);
        // Determine symbol from product or DOM row
        let drillSymbol = product.custom_symbol
          || product.custom_kod_producenta
          || (product.metafields && product.metafields.custom && (product.metafields.custom.symbol || product.metafields.custom.kod_producenta))
          || product.symbol
          || (product.sku)
          || '';
        const row = button.closest('tr') || button.closest('.wiertla-categories__table-row');
        if (!drillSymbol && row) {
          drillSymbol = row.getAttribute('data-symbol') || row.getAttribute('data-sku')
            || (row.querySelector('.wiertla-categories__table-cell--symbol') && row.querySelector('.wiertla-categories__table-cell--symbol').textContent.trim())
            || '';
        }
        console.log('[Rent] Derived symbol', { drillSymbol, rowHasDataSku: row && row.getAttribute ? row.getAttribute('data-sku') : null });
        // Cache globally for later fills when form is revealed
        window.WiertlaCNC.lastSelectedProduct = product;
        window.WiertlaCNC.lastSelectedSymbol = drillSymbol;
        // Autofill symbol field in both desktop and mobile rent forms (immediate and after form reveal)
        if (drillSymbol) {
          const desktopSymbolInput = document.querySelector('.wiertla-modals__desktop-rent-form input[name="contact[drill_symbol]"]');
          if (desktopSymbolInput) {
            desktopSymbolInput.value = drillSymbol;
            console.log('[Rent] Filled desktop symbol input immediately');
          }
          const mobileSymbolInput = document.querySelector('.wiertla-categories__mobile-rent-form input[name="contact[drill_symbol]"]');
          if (mobileSymbolInput) {
            mobileSymbolInput.value = drillSymbol;
            console.log('[Rent] Filled mobile symbol input immediately');
          }
          // Retry shortly in case the form is toggled open after the click
          setTimeout(function() {
            const d = document.querySelector('.wiertla-modals__desktop-rent-form input[name="contact[drill_symbol]"]');
            if (d && !d.value) d.value = drillSymbol;
            const m = document.querySelector('.wiertla-categories__mobile-rent-form input[name="contact[drill_symbol]"]');
            if (m && !m.value) m.value = drillSymbol;
            console.log('[Rent] Retry fill after form reveal', { desktopFilled: !!(d && d.value), mobileFilled: !!(m && m.value) });
          }, 250);
        }
      } else {
        console.error('Product not found with ID:', productId);
      }
    }
  });
</script>
<!-- Rent Modal -->
<div id="rent-modal" class="rent-modal">
  <div class="rent-modal__content">
    <div class="rent-modal__header">
      <h2 class="rent-modal__title"></h2>
      <button class="rent-modal__close">
        <img src="{{ 'ico_close.svg' | asset_url }}" alt="Close" width="24" height="24">
      </button>
    </div>
    <div class="rent-modal__body">
      <div class="rent-modal__price"></div>
      <div class="rent-modal__description"></div>
      <div class="rent-modal__form">
        <form id="rent-form">
          <div class="rent-modal__form-group">
            <label for="rent-start-date">Start Date</label>
            <input type="date" id="rent-start-date" name="start-date" required>
          </div>
          <div class="rent-modal__form-group">
            <label for="rent-end-date">End Date</label>
            <input type="date" id="rent-end-date" name="end-date" required>
          </div>
          <button type="submit" class="rent-modal__submit">Rent Now</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Include the mobile filter modal JavaScript -->

{% render 'wiertla-styles' %}

   