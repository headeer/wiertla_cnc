{% comment %}
  Wiertla Categories Component
  A component to display product categories and search functionality for the Wiertla CNC Shopify theme.
{% endcomment %}
{{ 'wiertla-filter-modal.css' | asset_url | stylesheet_tag }}

{% assign section_id = section.id %}
{% assign items_per_page = section.settings.items_per_page | default: 20 %}

{% if section.settings.selected_collection != blank %}
  {% assign selected_collection = collections[section.settings.selected_collection] %}
{% else %}
  {% assign selected_collection = collections.all %}
{% endif %}

{% assign current_language = request.locale.iso_code | default: 'pl' %}

{% paginate selected_collection.products by 2000 %}
  <div class="wiertla-categories__container">
    <div class="wiertla-categories__tabs desktop">
      <button class="wiertla-categories__tab active" data-tab-type="wiertla">WIERTŁA</button>
      <button
        class="wiertla-categories__tab"
        data-translate="wiertla_categories.tabs.plates_for_drills"
        data-tab-type="plytki"
      >
        PŁYTKI DO WIERTEŁ
      </button>
      <button
        class="wiertla-categories__tab"
        data-translate="wiertla_categories.tabs.crowns_for_drills"
        data-tab-type="koronki"
      >
        KORONKI DO WIERTEŁ
      </button>
    </div>
  </div>
  <div class="wiertla-categories">
    <div class="wiertla-categories__container">
      <div class="wiertla-logos--mobile">
        {% render 'wiertla-categories-logos' %}
      </div>

      <div class="wiertla-categories__tabs mobile">
        <button class="wiertla-categories__tab active" data-tab-type="wiertla">WIERTŁA</button>
        <button
          class="wiertla-categories__tab"
          data-translate="wiertla_categories.tabs.plates_short"
          data-tab-type="plytki"
        >
          PŁYTKI
        </button>
        <button
          class="wiertla-categories__tab"
          data-translate="wiertla_categories.tabs.crowns_short"
          data-tab-type="koronki"
        >
          KORONKI
        </button>
      </div>

      <div class="wiertla-categories__icons mobile">
        <div class="wiertla-categories__icon-item" data-category="wszystkie">
          <img
            src="{{ 'ico_big_all.svg' | asset_url }}"
            alt="Wszystkie"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.all">WSZYSTKIE</span>
        </div>

        <!-- Wiertła Categories (default) -->
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="koronkowe">
          <img
            src="{{ 'ico_big_koronkowe.svg' | asset_url }}"
            alt="Koronkowe"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.crown">KORONKOWE</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="plytkowe">
          <img
            src="{{ 'ico_big_plytkowe.svg' | asset_url }}"
            alt="Płytkowe"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.plate">PŁYTKOWE</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="vhm">
          <img
            src="{{ 'ico_big_vhm.svg' | asset_url }}"
            alt="VHM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.vhm">VHM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="sandvik">
          <img
            src="{{ 'ico_big_sandvik.svg' | asset_url }}"
            alt="Sandvik 880"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.sandvik"
            >SANDVIK 880</span
          >
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="amec">
          <img
            src="{{ 'ico_big_amec.svg' | asset_url }}"
            alt="AMEC"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.amec">AMEC</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-wiertla" data-category="ksem">
          <img
            src="{{ 'ico_big_ksem.svg' | asset_url }}"
            alt="KSEM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label" data-translate="wiertla_categories.icons.ksem">KSEM</span>
        </div>

        <!-- Płytki Categories -->
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="wcmx" style="display: none;">
          <img
            src="{{ 'ico_big_all.svg' | asset_url }}"
            alt="WCMX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">WCMX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="lcmx" style="display: none;">
          <img
            src="{{ 'ico_lcmx-881.svg' | asset_url }}"
            alt="LCMX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">LCMX,811</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="dft" style="display: none;">
          <img
            src="{{ 'ico_dft.svg' | asset_url }}"
            alt="DFT"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">DFT</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="880" style="display: none;">
          <img
            src="{{ 'ico_880.svg' | asset_url }}"
            alt="880"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">880</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="wogx" style="display: none;">
          <img
            src="{{ 'ico_wogx.svg' | asset_url }}"
            alt="WOGX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">WOGX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="spgx" style="display: none;">
          <img
            src="{{ 'ico_spgx.svg' | asset_url }}"
            alt="SPGX"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">SPGX</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-plytki" data-category="p284" style="display: none;">
          <img
            src="{{ 'ico_p284.svg' | asset_url }}"
            alt="P284"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">P284</span>
        </div>

        <!-- Koronki Categories -->
        <div
          class="wiertla-categories__icon-item wiertla-tab-koronki"
          data-category="ksem_koronki"
          style="display: none;"
        >
          <img
            src="{{ 'ico_ksem.svg' | asset_url }}"
            alt="KSEM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">KSEM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="idi" style="display: none;">
          <img
            src="{{ 'ico_idi.svg' | asset_url }}"
            alt="IDI"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">IDI</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="p600" style="display: none;">
          <img
            src="{{ 'ico_p600.svg' | asset_url }}"
            alt="P600"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">P600</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="icm" style="display: none;">
          <img
            src="{{ 'ico_icm.svg' | asset_url }}"
            alt="ICM"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">ICM</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="icp" style="display: none;">
          <img
            src="{{ 'ico_icp.svg' | asset_url }}"
            alt="ICP"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">ICP</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="870" style="display: none;">
          <img
            src="{{ 'ico_870.svg' | asset_url }}"
            alt="870"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">870</span>
        </div>
        <div
          class="wiertla-categories__icon-item wiertla-tab-koronki"
          data-category="amec_koronki"
          style="display: none;"
        >
          <img
            src="{{ 'ico_amec.svg' | asset_url }}"
            alt="AMEC"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">AMEC</span>
        </div>
        <div class="wiertla-categories__icon-item wiertla-tab-koronki" data-category="ktip" style="display: none;">
          <img
            src="{{ 'ico_ktip.svg' | asset_url }}"
            alt="KTIP"
            class="wiertla-categories__icon"
            width="24"
            height="24"
          >
          <span class="wiertla-categories__icon-label">KTIP</span>
        </div>
      </div>

      <!-- Mobile Header (Only visible on mobile) -->
      {% render 'wiertla-categories-mobile-header', section: section %}

      <!-- Desktop Header (Only visible on desktop) -->
      <div class="wiertla-categories__header desktop">
        <div class="wiertla-categories__filters">
          <!-- Filter button -->
          <div class="wiertla-categories__filters-button-wrapper mobile">
            <button class="wiertla-categories__filters-button">
              <span data-translate="wiertla_categories.filters.button">Filtry</span>
              <div class="wiertla-categories__filters-button-icon"></div>
            </button>
          </div>

          <!-- Include Category Filters Component -->
          {% render 'wiertla-categories-filters' %}
        </div>
      </div>

      <!-- Mobile Filter Modal (Hidden by default) -->
      {% render 'wiertla-categories-mobile' %}
    </div>
  </div>
  <div class="wiertla-categories bg_neutral">
    <div class="wiertla-categories__container">
      <!-- Table Content -->
      <div class="wiertla-categories__content wiertla-categories__layout">
        <!-- Left Column -->
        <div class="wiertla-categories__left-column">
          <!-- Include Search Component -->
          {% render 'wiertla-categories-search' %}

          <!-- Include Mobile Tabs (Only visible on mobile) -->
          {% render 'wiertla-categories-tabs-mobile' %}
        </div>

        <!-- Right Column -->
        <div class="wiertla-categories__right-column">
          <!-- Include Table Component -->
          {% render 'wiertla-categories-table' %}
        </div>
      </div>
    </div>
  </div>
  <!-- Include Fullscreen Component -->
  {% render 'wiertla-categories-fullscreen' %}

  <!-- Include scripts directly -->
  <script>
      // Define isMobileView at the very start so it's available throughout the codebase
      let isMobileView = window.innerWidth <= 768;
    
      // Ensure we call applyFilters when the script runs
      document.addEventListener('DOMContentLoaded', function() {
    
    // Force check mobile view
    isMobileView = window.innerWidth <= 768;
    
          // Initialize WiertlaCNC object and filters if they don't exist
      if (!window.WiertlaCNC) {
        window.WiertlaCNC = {};
      }
      
      if (!window.WiertlaCNC.filters) {
        window.WiertlaCNC.filters = {
          typ: '',
          crown: '',
          manufacturer: '',
          category: '',
          condition: null
        };
      }
      
      // Initialize the active tab type (wiertla, plytki, koronki)
      window.WiertlaCNC.activeTabType = 'wiertla';
      
      // Define SKU prefix mapping for each tab type
      window.WiertlaCNC.tabPrefixMapping = {
        'wiertla': ['VW', 'WV', 'PR', 'WW', 'PS', 'WK', 'WV'],
        'plytki': ['PW'],
        'koronki': ['KK', 'KW', 'KI', 'KT', 'KS', 'KA', 'KG']
      };
    
    // Add event listeners for the status filter buttons (Nowe/Używane)
    const statusFilterButtons = document.querySelectorAll('.wiertla-categories__status-filter');
          // Create a filterState object if it doesn't exist
      window.filterState = window.filterState || {};
      
      statusFilterButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Check if this button is already active
          const isAlreadyActive = this.classList.contains('active');
          
          // Remove active class from all status filter buttons
          statusFilterButtons.forEach(btn => btn.classList.remove('active'));
          
          // If it was already active, reset the filter
          if (isAlreadyActive) {
            window.WiertlaCNC.filters.condition = null;
            window.filterState.condition = null;
          } else {
            // Add active class to clicked button
            this.classList.add('active');
            
            // Set the condition filter based on the button text
            if (this.textContent.trim().toLowerCase().includes('nowe')) {
              window.WiertlaCNC.filters.condition = 'nowe';
              window.filterState.condition = 'nowe';
            } else {
              window.WiertlaCNC.filters.condition = 'uzywane';
              window.filterState.condition = 'uzywane';
            }
          }
          
          // Apply filters to update the product list
          window.currentPage = 1;
          applyFilters();
        });
      });
    
          // Set default condition filter to 'nowe' on page load
      window.WiertlaCNC.filters.condition = 'nowe';
      window.filterState = window.filterState || {};
      window.filterState.condition = 'nowe';
      
      // Add event listeners for tab buttons
      const tabButtons = document.querySelectorAll('.wiertla-categories__tab');
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tabType = this.getAttribute('data-tab-type');
          if (!tabType) {
            console.error('❌ No tab type found!');
            return;
          }
          
          // Remove active class from all tabs
          tabButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Update active tab type
          window.WiertlaCNC.activeTabType = tabType;
          
          // Update URL with mainType parameter
          const url = new URL(window.location);
          url.searchParams.set('mainType', tabType);
          window.history.pushState({}, '', url);
          
          // Reset pagination
          window.currentPage = 1;
          
          // Reset any active category selection when switching tabs
          document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
            icon.classList.remove('active');
          });
          // Set "wszystkie" as active by default
          const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
          if (wszystkieIcon) {
            wszystkieIcon.classList.add('active');
          }
          
          // Update category icons based on the active tab
          updateCategoryIcons();
          
          // Apply filters with the new tab type
          applyFilters();
        });
      });
    
    // Small delay to ensure everything is loaded
    setTimeout(function() {
      // Update category icons based on the active tab
      updateCategoryIcons();
      
      applyFilters();
      
      // Force another check after a short delay in case of any race conditions
      setTimeout(function() {
        const currentIsMobileView = window.innerWidth <= 768;
        if (currentIsMobileView !== isMobileView) {
          isMobileView = currentIsMobileView;
          applyFilters();
        }
      }, 500);
    }, 100);
      });
    
      // Get products from selected collection
      var wiertlaProducts =[];
        {% for product in selected_collection.products %}
        wiertlaProducts.push({
          // Basic Information
          id: {{ product.id | json }},
          title: {{ product.title | json }},
          handle: {{ product.handle | json }},
          sku: {{ product.first_available_variant.sku | json }},
          description: {{ product.description | json }},
          type: {{ product.type | json }},
          vendor: {{ product.vendor | json }},
          tags: {{ product.tags | json }},
          published_at: {{ product.published_at | json }},
          created_at: {{ product.created_at | json }},
          updated_at: {{ product.updated_at | json }},
          custom_typ: {{ product.metafields.custom.type | json }},
          custom_fi: {{ product.metafields.custom.fi | json }},
          custom_symbol: {{ product.metafields.custom.symbol | json }},
          custom_category: {{ product.metafields.custom.category | json }},
          custom_drill_length: {{ product.metafields.custom.drill_length | json }},
          custom_rent: {{ product.metafields.custom.rent | json }},
          custom_srednica: {{ product.metafields.custom._rednica | json }},
          custom_kod_producenta: {{ product.metafields.custom.kod_producenta | json }},
          custom_manufacturer: {{ product.metafields.custom.manufacturer | json }},
          custom_working_length: {{ product.metafields.custom.working_length.value | json }},
          custom_xd: {{ product.metafields.custom.xd | json }},
          custom_gniazdo: {{ product.metafields.custom.gniazdo | json }},
          // Pricing and Availability
          price: {{ product.price | money_without_trailing_zeros | json }},
          price_min: {{ product.price_min | money_without_trailing_zeros | json }},
          price_max: {{ product.price_max | money_without_trailing_zeros | json }},
          price_varies: {{ product.price_varies | json }},
          compare_at_price: {{ product.compare_at_price | money_without_trailing_zeros | json }},
          compare_at_price_min: {{ product.compare_at_price_min | money_without_trailing_zeros | json }},
          compare_at_price_max: {{ product.compare_at_price_max | money_without_trailing_zeros | json }},
          compare_at_price_varies: {{ product.compare_at_price_varies | json }},
          available: {{ product.available | json }},
          
          // Variants
          variants: [
            {% for variant in product.variants %}
              {
                id: {{ variant.id | json }},
                title: {{ variant.title | json }},
                sku: {{ variant.sku | json }},
                barcode: {{ variant.barcode | json }},
                price: {{ variant.price | money_without_trailing_zeros | json }},
                compare_at_price: {{ variant.compare_at_price | money_without_trailing_zeros | json }},
                weight: {{ variant.weight | json }},
                weight_unit: {{ variant.weight_unit | json }},
                available: {{ variant.available | json }},
                inventory_quantity: {{ variant.inventory_quantity | json }},
                inventory_policy: {{ variant.inventory_policy | json }},
                inventory_management: {{ variant.inventory_management | json }},
                option1: {{ variant.option1 | json }},
                option2: {{ variant.option2 | json }},
                option3: {{ variant.option3 | json }}
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ],
          
          // Options
          options: [
            {% for option in product.options %}
              {
                name: {{ option.name | json }},
                position: {{ option.position | json }},
                values: {{ option.values | json }}
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ],
          
          // Images
          images: [
            {% for image in product.images %}
              {
                id: {{ image.id | json }},
                src: {{ image | img_url: 'master' | json }},
                alt: {{ image.alt | json }},
                width: {{ image.width | json }},
                height: {{ image.height | json }},
                position: {{ image.position | json }}
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ],
          featured_image: {{ product.featured_image | img_url: 'master' | json }},
          
          // Metafields
          metafields: {
            custom: {
              diameter: {{ product.metafields.custom.diameter.value | json }},
              length: {{ product.metafields.custom.length.value | json }},
              symbol: {{ product.metafields.custom.symbol.value | json }},
              rentable: {{ product.metafields.custom.rentable.value | json }},
              rent: {{ product.metafields.custom.rent.value | json }},
              cooling: {{ product.metafields.custom.cooling.value | json }},
              working_length: {{ product.metafields.custom.working_length.value | json }},
              notes: {{ product.metafields.custom.notes.value | json }},
              mounting: {{ product.metafields.custom.mounting.value | json }},
              condition: {{ product.metafields.custom.condition.value | json }},
              manufacturer: {{ product.metafields.custom.manufacturer.value | json }},
              width: {{ product.metafields.custom.width.value | json }},
              height: {{ product.metafields.custom.height.value | json }},
              custom_category: {{ product.metafields.custom.custom_category.value | json }}
            }
          },
          
          // Collections
          collections: [
            {% for collection in product.collections %}
              {
                id: {{ collection.id | json }},
                title: {{ collection.title | json }},
                handle: {{ collection.handle | json }}
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        });
      {% endfor %}
      // Assign products to global WiertlaCNC object
      window.WiertlaCNC = window.WiertlaCNC || {};
      window.WiertlaCNC.products = wiertlaProducts;
      
      // Helper function to list all TYP field values
      window.listAllTypValues = function() {
        const typValues = new Set();
        const productsWithTyp = [];
        
        wiertlaProducts.forEach((product, index) => {
          if (product.custom_typ && product.custom_typ.trim() !== '') {
            typValues.add(product.custom_typ.toLowerCase());
            productsWithTyp.push({
              index: index + 1,
              title: product.title,
              sku: product.sku,
              custom_typ: product.custom_typ,
              vendor: product.vendor
            });
          }
        });
        
        console.group('🔍 ALL TYP FIELD VALUES');
        console.log(`📊 Total products: ${wiertlaProducts.length}`);
        console.log(`📊 Products with TYP values: ${productsWithTyp.length}`);
        console.log(`📋 Unique TYP values:`, Array.from(typValues).sort());
        console.log(`📝 Sample products with TYP:`, productsWithTyp.slice(0, 10));
        console.groupEnd();
        
        return {
          totalProducts: wiertlaProducts.length,
          productsWithTyp: productsWithTyp.length,
          uniqueTypValues: Array.from(typValues).sort(),
          sampleProducts: productsWithTyp.slice(0, 10)
        };
      };
      
      // Define openRentModal function
      window.WiertlaCNC.openRentModal = function(product) {
        const modal = document.querySelector('.wiertla-categories__mobile-rent-modal');
        if (!modal) {
          console.error('Rent modal not found');
          return;
        }

        // Update modal content
        const title = modal.querySelector('.wiertla-categories__mobile-rent-title');
        if (title) {
          title.textContent = product.title;
        }

        // Show the modal
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        // Add close handler
        const closeButton = modal.querySelector('.wiertla-categories__mobile-rent-close');
        if (closeButton) {
          closeButton.onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
        }

        // Add click outside handler
        modal.onclick = function(event) {
          if (event.target === modal) {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          }
        };
      };
      
      // Language switcher API - This is being replaced by our new translation system
      window.WiertlaCNC.changeLanguage = function(language) {
    // Use our new WiertlaTranslator instead
    if (window.WiertlaTranslator && typeof window.WiertlaTranslator.changeLanguage === 'function') {
      window.WiertlaTranslator.changeLanguage(language);
    }
      };
      
      document.addEventListener('DOMContentLoaded', function() {
    
    // Initialize mobile filter bar
    const mobileFilterBar = document.querySelector('.wiertla-categories__mobile-filter-bar');
    const mobileFilterModal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    
    if (mobileFilterBar) {
      // Add click event for the filter button
      const filterButton = mobileFilterBar.querySelector('.wiertla-categories__mobile-filter-left');
      if (filterButton) {
        filterButton.addEventListener('click', function() {
          if (mobileFilterModal) {
            mobileFilterModal.classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent scrolling
          }
        });
      }
      
      // Add click events for per page buttons
      const perPageButtons = mobileFilterBar.querySelectorAll('.wiertla-categories__mobile-per-page-button');
      perPageButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          perPageButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          button.classList.add('active');
          
          // Update items per page
          const newItemsPerPage = parseInt(button.getAttribute('data-items'));
          if (newItemsPerPage && !isNaN(newItemsPerPage)) {
            itemsPerPage = newItemsPerPage;
            currentPage = 1; // Reset to first page
            applyFilters(); // Refresh the table
          }
        });
      });
    }
    
    // Handle mobile per-page buttons independently since they might not be in the filter bar
    const mobilePerPageButtons = document.querySelectorAll('.wiertla-categories__mobile-per-page-button');
    mobilePerPageButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Remove active class from all buttons
        mobilePerPageButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Update items per page
        const newItemsPerPage = parseInt(button.getAttribute('data-items') || button.getAttribute('data-value'));
        if (newItemsPerPage && !isNaN(newItemsPerPage)) {
          itemsPerPage = newItemsPerPage;
          currentPage = 1; // Reset to first page
          applyFilters(); // Refresh the table
        }
      });
    });
    
    // Make sure the filter modal close button works
    const filterModalCloseButton = document.querySelector('.wiertla-categories__mobile-filter-close');
    if (filterModalCloseButton) {
      filterModalCloseButton.addEventListener('click', function() {
        if (mobileFilterModal) {
          mobileFilterModal.classList.remove('active');
          document.body.style.overflow = ''; // Allow scrolling again
        }
      });
    }
    
    
    // Initialize product table data
    let allProducts = wiertlaProducts;
    // Create hover preview element
    const hoverPreview = document.createElement('div');
    hoverPreview.className = 'wiertla-categories__hover-preview';
    hoverPreview.innerHTML = `
      <div class="wiertla-categories__hover-preview-inner">
        <img src="" alt="Preview" class="wiertla-categories__hover-preview-img">
        <div class="wiertla-categories__hover-preview-arrow"></div>
      </div>
    `;
    document.body.appendChild(hoverPreview);
    
    // Create new image hover element
    const newImageHover = document.createElement('div');
    newImageHover.className = 'wiertla-categories__image-hover';
    newImageHover.innerHTML = `
      <div class="wiertla-categories__image-hover-inner">
        <img src="" alt="Preview" class="wiertla-categories__image-hover-img">
        <div class="wiertla-categories__image-hover-diamond">
          <img src="{{ 'diamond.svg' | asset_url }}" alt="Diamond" width="14" height="28">
        </div>
      </div>
    `;
    document.body.appendChild(newImageHover);
    
    // Set search input placeholder
    const searchInput = document.querySelector('.wiertla-search__input');
    if (searchInput) {
      searchInput.placeholder = "fi / nazwa / symbol / producent";
    } else {
      console.error('Search input not found');
    }
    
    // Initialize variables
    window.currentPage = 1;
    window.itemsPerPage = {{ section.settings.items_per_page | default: 20 }};
    window.totalPages = 1;
    window.selectedCategory = 'wszystkie';
    window.currentFilters = {
      typ: '',
      crown: '',
      manufacturer: '',
      search: ''
    };
    
    // Detect Shopify language from the html lang attribute
    let shopifyLanguage = document.documentElement.lang || 'pl';
    
    // Initialize translations based on Shopify language
    const translations = {
      'pl': {
        // Table and filters
        'no_results': 'Brak wyników spełniających kryteria',
        'results_format': '{0}-{1} z {2}',
        'show_previous': 'POKAŻ POPRZEDNIE',
        'show_next': 'POKAŻ NASTĘPNE',
        'preview_title': 'ZOBACZ OBRAZ POGLĄDOWY',
        'preview_instruction': 'Najedź kursorem na wiertło w tabeli, aby wyświetlić tu powiększony podgląd',
        'fullscreen_title': 'Przeglądaj wiertła w tabeli',
        'fullscreen_description': 'Stale poszerzamy stan magazynowy, aktualizując ofertę o nowe modele wierteł CNC',
        'close_fullscreen': 'Zamknij tryb pełnoekranowy',
        
        // Categories and filters
        'all': 'Wszystkie',
        'drill_type': 'Typ wiertła',
        'crown_type': 'Wykaz koronek',
        'manufacturer': 'Producent',
        'show': 'Pokaż',
        'per_page': '/ na stronę',
        
        // Table headers
        'type': 'Typ',
        'diameter': '⌀ Fi',
        'length': 'D/mm',
        'symbol': 'Symbol',
        'vendor': 'Producent',
        'price': 'Cena netto',
        
        // Categories
        'crown': 'KORONKOWE',
        'plate': 'PŁYTKOWE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'WSZYSTKIE',
        'show_previous_mobile': 'POPRZEDNIE',
        'show_next_mobile': 'NASTĘPNE'
      },
      'en': {
        // Table and filters
        'no_results': 'No results match your criteria',
        'results_format': '{0}-{1} of {2}',
        'show_previous': 'SHOW PREVIOUS',
        'show_next': 'SHOW NEXT',
        'preview_title': 'VIEW PREVIEW IMAGE',
        'preview_instruction': 'Hover over a drill in the table to display an enlarged preview here',
        'fullscreen_title': 'CNC DRILLS',
        'fullscreen_description': 'Choose the drill you are interested in from our store\'s extensive selection.',
        'close_fullscreen': 'CLOSE FULLSCREEN',
        
        // Categories and filters
        'all': 'All',
        'drill_type': 'Drill type',
        'crown_type': 'Crown type',
        'manufacturer': 'Manufacturer',
        'show': 'Show',
        'per_page': '/ per page',
        
        // Table headers
        'type': 'Type',
        'diameter': '⌀ Diameter',
        'length': 'L/mm',
        'symbol': 'Symbol',
        'vendor': 'Manufacturer',
        'price': 'Net price',
        
        // Categories
        'crown': 'CROWN',
        'plate': 'PLATE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'ALL',
        'show_previous_mobile': 'PREVIOUS',
        'show_next_mobile': 'NEXT'
      },
      'de': {
        'no_results': 'Keine Ergebnisse entsprechen Ihren Kriterien',
        'results_format': '{0}-{1} von {2}',
        'show_previous': 'VORHERIGE ANZEIGEN',
        'show_next': 'NÄCHSTE ANZEIGEN',
        'preview_title': 'VORSCHAUBILD ANZEIGEN',
        'preview_instruction': 'Fahren Sie mit dem Mauszeiger über einen Bohrer in der Tabelle, um hier eine vergrößerte Vorschau anzuzeigen',
        'fullscreen_title': 'CNC-BOHRER',
        'fullscreen_description': 'Wählen Sie den gewünschten Bohrer aus unserem umfangreichen Sortiment.',
        'close_fullscreen': 'VOLLBILD SCHLIESSEN',
        
        // Categories and filters
        'all': 'Alle',
        'drill_type': 'Bohrertyp',
        'crown_type': 'Kronentyp',
        'manufacturer': 'Hersteller',
        'show': 'Zeigen',
        'per_page': '/ pro Seite',
        
        // Table headers
        'type': 'Typ',
        'diameter': '⌀ Durchmesser',
        'length': 'L/mm',
        'symbol': 'Symbol',
        'vendor': 'Hersteller',
        'price': 'Nettopreis',
        
        // Categories
        'crown': 'KRONE',
        'plate': 'PLATTE',
        'vhm': 'VHM',
        'sandvik': 'SANDVIK 880',
        'amec': 'AMEC',
        'ksem': 'KSEM',
        'all_categories': 'ALLE',
        'show_previous_mobile': 'VORHERIGE',
        'show_next_mobile': 'NÄCHSTE'
      }
    };
    
    // Default to Polish if language not supported
    let currentLanguage = translations[shopifyLanguage] ? shopifyLanguage : 'pl';
    
    // Check for stored language preference first, then use Shopify language or default to Polish
    const storedLanguage = localStorage.getItem('shopify_locale');
    if (storedLanguage && translations[storedLanguage]) {
      currentLanguage = storedLanguage;
    } else {
      currentLanguage = translations[shopifyLanguage] ? shopifyLanguage : 'pl';
    }
    
    // Set the HTML lang attribute to match the selected language
    document.documentElement.lang = currentLanguage;
    
    // Watch for language changes in the Shopify language selector
    document.addEventListener('click', function(e) {
      // Look for Shopify language selector links
      const langLink = e.target.closest('.header__lang-links a, [data-disclosure-locale]');
      if (langLink) {
        e.preventDefault(); // Prevent default to avoid page reload
        const lang = langLink.getAttribute('data-lang');
        if (lang && translations[lang]) {
          window.changeLanguage(lang);
        }
      }
    });
    
    // Make necessary functions globally available
    window.handleCategoryChange = function(category) {
      selectedCategory = category;
      currentPage = 1;
      applyFilters();
    };
    
    window.handleItemsPerPageChange = function(newItemsPerPage) {
      itemsPerPage = parseInt(newItemsPerPage);
      currentPage = 1;
      
      // Sync desktop per-page buttons
      document.querySelectorAll('.wiertla-categories__per-page-button').forEach(function(btn) {
        if (parseInt(btn.getAttribute('data-value')) === itemsPerPage) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Sync mobile per-page buttons 
      document.querySelectorAll('.wiertla-categories__mobile-per-page-button').forEach(function(btn) {
        if (parseInt(btn.getAttribute('data-items')) === itemsPerPage) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      applyFilters();
    };
    
    // Function to change language - Remove this in favor of our new translation system
    window.changeLanguage = function(language) {
      // Delegate to our new translation system
      if (window.WiertlaTranslator && typeof window.WiertlaTranslator.changeLanguage === 'function') {
        window.WiertlaTranslator.changeLanguage(language);
      }
    };
    
    // Function to update UI text based on current language
    function updateUILanguage() {
      // Update pagination buttons
      document.querySelectorAll('#prevPage, #fullscreenPrevPage').forEach(btn => {
        const span = btn.querySelector('span');
        if (span) {
          span.textContent = translations[currentLanguage].show_previous;
          span.setAttribute('data-mobile-text', translations[currentLanguage].show_previous_mobile);
        }
      });
      
      document.querySelectorAll('#nextPage, #fullscreenNextPage').forEach(btn => {
        const span = btn.querySelector('span');
        if (span) {
          span.textContent = translations[currentLanguage].show_next;
          span.setAttribute('data-mobile-text', translations[currentLanguage].show_next_mobile);
        }
      });
      
      // Update table headers
      const tableHeaders = document.querySelectorAll('.wiertla-categories__table th');
      if (tableHeaders.length >= 6) {
        tableHeaders[0].textContent = translations[currentLanguage].type;
        tableHeaders[1].textContent = translations[currentLanguage].diameter;
        tableHeaders[2].textContent = translations[currentLanguage].length;
        tableHeaders[3].textContent = translations[currentLanguage].symbol;
        tableHeaders[4].textContent = translations[currentLanguage].vendor;
        tableHeaders[5].textContent = translations[currentLanguage].price;
      }
      
      // Update filter dropdowns
      const typeFilter = document.querySelector('.wiertla-categories__filter[data-filter="type"]');
      if (typeFilter && typeFilter.options.length > 0) {
        typeFilter.options[0].textContent = translations[currentLanguage].drill_type;
      }
      
      const crownFilter = document.querySelector('.wiertla-categories__filter[data-filter="crown"]');
      if (crownFilter && crownFilter.options.length > 0) {
        crownFilter.options[0].textContent = translations[currentLanguage].crown_type;
      }
      
      const manufacturerFilter = document.querySelector('.wiertla-categories__filter[data-filter="manufacturer"]');
      if (manufacturerFilter && manufacturerFilter.options.length > 0) {
        manufacturerFilter.options[0].textContent = translations[currentLanguage].manufacturer;
      }
      
      // Update per-page labels
      document.querySelectorAll('.wiertla-categories__per-page-label').forEach((label, index) => {
        if (index % 2 === 0) {
          label.textContent = translations[currentLanguage].show;
        } else {
          label.textContent = translations[currentLanguage].per_page;
        }
      });
      
      // Update "Wszystkie" button text
      document.querySelectorAll('.wiertla-categories__filter-button[data-filter="wszystkie"]').forEach(btn => {
        btn.textContent = translations[currentLanguage].all;
      });
      
      // Update category icons label text
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
        const label = item.querySelector('.wiertla-categories__icon-label');
        const category = item.getAttribute('data-category');
        
        if (label && category) {
          switch (category) {
            case 'koronkowe':
              label.textContent = translations[currentLanguage].crown;
              break;
            case 'plytkowe':
              label.textContent = translations[currentLanguage].plate;
              break;
            case 'vhm':
              label.textContent = translations[currentLanguage].vhm;
              break;
            case 'sandvik':
              label.textContent = translations[currentLanguage].sandvik;
              break;
            case 'amec':
              label.textContent = translations[currentLanguage].amec;
              break;
            case 'ksem':
              label.textContent = translations[currentLanguage].ksem;
              break;
            case 'wszystkie':
              label.textContent = translations[currentLanguage].all_categories;
              break;
          }
        }
      });
      
      // Update fullscreen elements if they exist
      const fullscreenTitle = document.querySelector('.wiertla-categories__fullscreen-title h2');
      if (fullscreenTitle) {
        fullscreenTitle.textContent = translations[currentLanguage].fullscreen_title;
      }
      
      const fullscreenDesc = document.querySelector('.wiertla-categories__fullscreen-title p');
      if (fullscreenDesc) {
        fullscreenDesc.textContent = translations[currentLanguage].fullscreen_description;
      }
      
      const fullscreenClose = document.querySelector('.wiertla-categories__fullscreen-close span');
      if (fullscreenClose) {
        fullscreenClose.textContent = translations[currentLanguage].close_fullscreen;
      }
      
      // Update preview elements
      const previewTitle = document.querySelector('.wiertla-categories__preview-title');
      if (previewTitle) {
        previewTitle.textContent = translations[currentLanguage].preview_title;
      }
      
      const previewText = document.querySelector('.wiertla-categories__preview-text');
      if (previewText) {
        previewText.textContent = translations[currentLanguage].preview_instruction;
      }
      
      // Update the results text
      const resultsText = document.querySelector('.wiertla-categories__results-text');
      if (resultsText) {
        resultsText.textContent = 'Wyświetlono wyniki ';
      }
      
      // Re-apply filters to update any text in the table
      applyFilters();
    }
    
    // Calculate initial totalPages
    totalPages = Math.ceil(allProducts.length / itemsPerPage);
    
    // Update hover preview position
    function updatePreviewPosition(e) {
      const previewWidth = hoverPreview.offsetWidth;
      const previewHeight = hoverPreview.offsetHeight;
      
      // Get the position of the table row being hovered
      const tableRow = e.currentTarget;
      const tableRowRect = tableRow.getBoundingClientRect();
      
      // Position the preview to the left of the table row, aligned with the row's vertical center
      let top = tableRowRect.top + window.scrollY - (previewHeight / 2) + (tableRowRect.height / 2);
      
      // Make sure preview stays in viewport vertically
      if (top < window.scrollY) {
        top = window.scrollY + 10;
      } else if (top + previewHeight > window.scrollY + window.innerHeight) {
        top = window.scrollY + window.innerHeight - previewHeight - 10;
      }
      
      // Position horizontally to the left of the table
      const tableContainer = document.querySelector('.wiertla-categories__table-container');
      const tableContainerRect = tableContainer.getBoundingClientRect();
      const left = tableContainerRect.left + window.scrollX - previewWidth - 20;
      
      hoverPreview.style.left = left + 'px';
      hoverPreview.style.top = top + 'px';
      
      // Ensure the element is visible
      if (hoverPreview.classList.contains('active')) {
        hoverPreview.style.display = 'block';
      }
    }
    
    // New function to update the position of the new image hover
    function updateNewImageHoverPosition(e) {
      const previewWidth = newImageHover.offsetWidth;
      const previewHeight = newImageHover.offsetHeight;
      
      // Get the position of the table row being hovered
      const tableRow = e.currentTarget;
      const tableRowRect = tableRow.getBoundingClientRect();
      
      // Position the preview to the left of the table row, aligned with the row's vertical center
      let top = tableRowRect.top + window.scrollY - (previewHeight / 2) + (tableRowRect.height / 2);
      
      // Make sure preview stays in viewport vertically
      if (top < window.scrollY) {
        top = window.scrollY + 10;
      } else if (top + previewHeight > window.scrollY + window.innerHeight) {
        top = window.scrollY + window.innerHeight - previewHeight - 10;
      }
      
      // Position horizontally to the left of the table
      const tableContainer = document.querySelector('.wiertla-categories__table-container');
      const tableContainerRect = tableContainer.getBoundingClientRect();
      const left = tableContainerRect.left + window.scrollX - previewWidth - 20;
      
      newImageHover.style.left = left + 'px';
      newImageHover.style.top = top + 'px';
      
      // Ensure the element is visible
      if (newImageHover.classList.contains('active')) {
        newImageHover.style.display = 'block';
      }
    }
    
    // Filter products based on current filters
    function filterProducts() {
      
      let filteredProducts = window.WiertlaCNC?.products || [];

      if (!Array.isArray(filteredProducts) || filteredProducts.length === 0) {
        return [];
      }
      
      
      // Apply tab type filter first (wiertla, plytki, koronki)
      const activeTabType = window.WiertlaCNC.activeTabType || 'wiertla';
      const validPrefixes = window.WiertlaCNC.tabPrefixMapping[activeTabType] || [];
      
      if (validPrefixes.length > 0) {
        let beforeFilterCount = filteredProducts.length;
        
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || '';
          if (!sku || sku.length < 2) {
            return false;
          }
          
          const skuPrefix = sku.substring(0, 2).toUpperCase();
          
          // For koronki tab, also check for specific koronki types
          if (activeTabType === 'koronki') {
            // Include products with KK, KW, etc. prefixes and specific types for koronki
            const koronkiSpecialTypes = ['KSEM', 'IDI', 'P600', 'ICM', 'ICP', '870'];
            const title = product.title || '';
            const hasKoronkiPrefix = validPrefixes.includes(skuPrefix);
            const hasKoronkiType = koronkiSpecialTypes.some(type => 
              sku.toUpperCase().includes(type) || title.toUpperCase().includes(type)
            );
            
            const shouldInclude = hasKoronkiPrefix || hasKoronkiType;
            
           
            
            return shouldInclude;
          } else {
            // For other tabs, just check the prefix
            const shouldInclude = validPrefixes.includes(skuPrefix);
            
            return shouldInclude;
          }
        });
        
        
        // Group filtered products by SKU prefix for verification
        const skuGroups = {};
        filteredProducts.forEach(product => {
          const sku = product.sku || product.custom_symbol || '';
          const prefix = sku.substring(0, 2).toUpperCase();
          if (!skuGroups[prefix]) skuGroups[prefix] = [];
          skuGroups[prefix].push(sku);
        });
        
        
        // Verify expected patterns
        if (activeTabType === 'wiertla') {
          const expectedPrefixes = ['VW', 'WV', 'PR', 'WW', 'PS', 'WK'];
        } else if (activeTabType === 'plytki') {
          const expectedPrefixes = ['PW'];

        } else if (activeTabType === 'koronki') {
          const expectedPrefixes = ['KK', 'KW', 'KI', 'KT', 'KS', 'KA', 'KG'];
        }
      }

      // Apply search filter if exists
      const searchTerm = window.currentFilters?.search?.toLowerCase();
      if (searchTerm) {
        let beforeSearchCount = filteredProducts.length;
        filteredProducts = filteredProducts.filter(product => {
          const searchableFields = [
            product.custom_symbol,
            product.custom_kod_producenta,
            product.custom_manufacturer,
            product.custom_srednica,
            product.custom_fi,
            product.custom_drill_length,
            product.vendor,
            product.title,
            product.sku
          ].filter(Boolean).map(field => field.toString().toLowerCase());

          return searchableFields.some(field => field.includes(searchTerm));
        });
      }
      
      // Apply category filter if not "wszystkie"
      if (window.selectedCategory && window.selectedCategory !== 'wszystkie') {
        let beforeCategoryCount = filteredProducts.length;
        const activeTabType = window.WiertlaCNC.activeTabType || 'wiertla';
        
        // 🐛 DEBUG: Log category filter details
        console.group(`🔍 CATEGORY FILTER DEBUG`);
        console.log(`📂 Selected Category: "${window.selectedCategory}"`);
        console.log(`📑 Active Tab: "${activeTabType}"`);
        console.log(`📊 Products before category filter: ${beforeCategoryCount}`);
        console.log(`🔍 Sample of first product data:`, filteredProducts[0]);
        
        filteredProducts = filteredProducts.filter(product => {
          const productTyp = (product.custom_typ || '').toLowerCase();
          const productRodzaj = (product.rodzaj || '').toLowerCase();
          const categoryLower = window.selectedCategory.toLowerCase();
          
          let matches = false;
          let searchFields = [];
          let searchValues = [];
          
          if (activeTabType === 'wiertla') {
            // For wiertla tab, search in typ field
            searchFields = ['typ'];
            
            if (window.selectedCategory === 'plytkowe') {
              // Special case: search for both "płytkowe" and "plytkowe"
              searchValues = ['płytkowe', 'plytkowe'];
              matches = searchValues.some(value => productTyp.includes(value));
            } else if (window.selectedCategory === 'sandvik') {
              // Special case: search for both "sandvik" and "880" for Sandvik products
              searchValues = ['sandvik', '880'];
              matches = searchValues.some(value => productTyp.includes(value));
            } else {
              // For other categories like amec, ksem, etc., search case-insensitively
              // This will match KSEM, KSem, ksem, AMEC, amec, etc.
              const categoryName = window.selectedCategory.toLowerCase();
              matches = productTyp.includes(categoryName);
              
              // Additional debug for KSEM and AMEC
              if (categoryName === 'ksem' || categoryName === 'amec') {
                console.log(`🔍 Searching for "${categoryName}" in productTyp: "${product.custom_typ}"`);
                console.log(`   productTyp (lowercase): "${productTyp}"`);
                console.log(`   Match result: ${matches}`);
              }
            }
          } else if (activeTabType === 'plytki' || activeTabType === 'koronki') {
            // For plytki and koronki tabs, search in both typ and rodzaj fields
            searchFields = ['typ', 'rodzaj'];
            
            if (window.selectedCategory === 'sandvik') {
              // Special case: search for both "sandvik" and "880" in both fields
              searchValues = ['sandvik', '880'];
              matches = searchValues.some(value => productTyp.includes(value) || productRodzaj.includes(value));
            } else {
              // Case-insensitive search in both typ and rodzaj fields
              const categoryName = window.selectedCategory.toLowerCase();
              matches = productTyp.includes(categoryName) || productRodzaj.includes(categoryName);
              
              // Additional debug for KSEM and AMEC in plytki/koronki tabs
              if (categoryName === 'ksem' || categoryName === 'amec') {
                console.log(`🔍 [${activeTabType}] Searching for "${categoryName}"`);
                console.log(`   productTyp: "${product.custom_typ}" → productTyp (lowercase): "${productTyp}"`);
                console.log(`   productRodzaj: "${product.rodzaj}" → productRodzaj (lowercase): "${productRodzaj}"`);
                console.log(`   Match result: ${matches}`);
              }
            }
          }
          
          // Log each product being checked (show first 5 for brevity)
          const productIndex = filteredProducts.indexOf(product);
          if (productIndex < 5) {
            console.log(`🔍 Product ${productIndex + 1}:`);
            console.log(`   📝 TYP: "${product.custom_typ || 'N/A'}"`);
            console.log(`   🔍 Raw metafields:`, product.metafields);
            console.log(`   🔍 All custom fields:`, {
              custom_typ: product.custom_typ,
              custom_symbol: product.custom_symbol,
              custom_manufacturer: product.custom_manufacturer,
              custom_category: product.custom_category
            });
            if (activeTabType === 'plytki' || activeTabType === 'koronki') {
              console.log(`   🏷️ RODZAJ: "${product.rodzaj || 'N/A'}"`);
            }
            console.log(`   🎯 Searching for: ${searchValues.join(' OR ')} in ${searchFields.join(', ')} field(s)`);
            console.log(`   ${matches ? '✅ MATCH' : '❌ NO MATCH'}`);
          }
          
          return matches;
        });
        
        console.log(`📊 Products after category filter: ${filteredProducts.length}`);
        console.log(`📝 Filter Summary: Looking for "${window.selectedCategory}" in ${activeTabType === 'wiertla' ? 'TYP field' : 'TYP and RODZAJ fields'}`);
        if (window.selectedCategory === 'plytkowe' && activeTabType === 'wiertla') {
          console.log(`🇵🇱 Special case: Searching for both "płytkowe" and "plytkowe" (with/without Polish ł)`);
        }
        if (window.selectedCategory === 'sandvik') {
          console.log(`🔧 Special case: Searching for both "sandvik" and "880" for Sandvik products`);
        }
        console.groupEnd();
      }

      // Apply type filter
      if (window.WiertlaCNC.filters.typ && window.WiertlaCNC.filters.typ !== 'all' && window.WiertlaCNC.filters.typ !== '') {
        let beforeTypeCount = filteredProducts.length;
        
        const expectedTypeValue = window.WiertlaCNC.filters.typ;
        console.log(`🔍 Type filter: ${window.WiertlaCNC.filters.typ} → Expected TYP value: ${expectedTypeValue}`);
        console.log(filteredProducts, expectedTypeValue);
        
        if (expectedTypeValue) {
          filteredProducts = filteredProducts.filter(product => {
            // Check multiple possible field names for TYP
            const typValue = product.custom_typ;
            console.log(typValue,product.metafields.custom.typ);
            const matches = typValue && typValue?.toLowerCase()?.includes(expectedTypeValue?.toLowerCase() || '');
            
            if (matches) {
              console.log(`✅ Type match: Product ${product.sku} has TYP="${typValue}" matches "${expectedTypeValue}"`);
            }
            
            return matches;
          });
          
          console.log(`📊 Type filter: ${beforeTypeCount} → ${filteredProducts.length} products (filter: ${window.WiertlaCNC.filters.typ})`);
        } else {
          console.log(`❌ No mapping found for type filter: ${window.WiertlaCNC.filters.typ}`);
        }
      }
      
      // If we're in koronki tab, apply filter for specific koronki types
      if (window.WiertlaCNC.activeTabType === 'koronki' && window.WiertlaCNC.filters.category && window.WiertlaCNC.filters.category !== '' && window.WiertlaCNC.filters.category !== 'wszystkie') {
        const koronkiType = window.WiertlaCNC.filters.category;
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || '';
          const title = product.title || '';
          
          // Check if the product contains the selected koronki type in SKU or title
          return sku.toUpperCase().includes(koronkiType) || title.toUpperCase().includes(koronkiType);
        });
      }
      
      // If crown type filter exists (KK, KI, etc.), apply it
      if (window.WiertlaCNC.activeTabType === 'koronki' && window.WiertlaCNC.filters.crown && window.WiertlaCNC.filters.crown !== 'all') {
        const crownType = window.WiertlaCNC.filters.crown;
        filteredProducts = filteredProducts.filter(product => {
          const sku = product.sku || product.custom_symbol || '';
          return sku.includes(crownType);
        });
      }

      // Apply manufacturer filter
      if (window.WiertlaCNC.filters.manufacturer && window.WiertlaCNC.filters.manufacturer !== 'all') {
        const manufacturerMapping = {
          'sandvik': 'Sandvik',
          'iscar': 'ISCAR',
          'walter': 'Walter',
          'kennametal': 'KENNAMETAL',
          'dsk': 'DSK',
          'amec': 'AMEC'
        };
        const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer.toLowerCase()];
        if (expectedManufacturer) {
          filteredProducts = filteredProducts.filter(product => {
            return product.vendor === expectedManufacturer;
          });
        }
      }

      // Tab-specific sorting
      if (activeTabType === 'wiertla') {
      filteredProducts.sort((a, b) => {
          const typeA = (a.type || '').toUpperCase();
          const typeB = (b.type || '').toUpperCase();
          if (typeA < typeB) return -1;
          if (typeA > typeB) return 1;
          return 0;
        });
      } else if (activeTabType === 'plytki' || activeTabType === 'koronki') {
        filteredProducts.sort((a, b) => {
          // Use rodzaj field if present, otherwise fallback to title
          const rodzajA = (a.rodzaj || a.title || '').toUpperCase();
          const rodzajB = (b.rodzaj || b.title || '').toUpperCase();
          if (rodzajA < rodzajB) return -1;
          if (rodzajA > rodzajB) return 1;
          return 0;
        });
      }

      // Sort by FI (diameter) in ascending order (rosnąco) for all tab types
      filteredProducts.sort((a, b) => {
        // Get FI values from different possible fields
        const getFiValue = (product) => {
          let fi = product.custom_fi || product.custom_srednica || '';
          if (typeof fi === 'string') {
            // Remove any non-numeric characters except decimal point
            fi = fi.replace(/[^0-9.,]/g, '').replace(',', '.');
          }
          const numValue = parseFloat(fi);
          return isNaN(numValue) ? 0 : numValue;
        };
        
        const fiA = getFiValue(a);
        const fiB = getFiValue(b);
        
        // Sort in ascending order (smallest to largest)
        return fiA - fiB;
      });

      return filteredProducts;
    }
    
    // Update filter functions
       
        // Make filterProducts globally accessible
    window.filterProducts = filterProducts;
    
    // Add a temporary filter function that can be called from the console
    window.tempFilterByTitle = function(searchTerm) {
      // Store the original allProducts
      if (!window._originalProducts) {
        window._originalProducts = [...allProducts];
      }
      
      // Filter products by title
      allProducts = window._originalProducts.filter(product => {
        const title = (product.title || '').toLowerCase();
        return title.includes(searchTerm.toLowerCase());
      });
      
      // Apply filters to update the table
      applyFilters();
      
      // Log the number of filtered products
    };
    
    // Function to reset the temporary filter
    window.resetTempFilter = function() {
      if (window._originalProducts) {
        allProducts = [...window._originalProducts];
        applyFilters();
      }
    };
    
    // Apply filters and pagination
    function applyFilters() {
      // Debug logging
      
      // Get filtered products using filterProducts function
      const filteredProducts = filterProducts();
      
      
      // Update pagination
      window.totalPages = Math.ceil(filteredProducts.length / window.itemsPerPage);
      
      // Reset page if needed
      if (window.currentPage > window.totalPages) {
        window.currentPage = window.totalPages > 0 ? window.totalPages : 1;
      }
      
      // Calculate slice indexes for pagination
      const startIndex = (window.currentPage - 1) * window.itemsPerPage;
      const endIndex = startIndex + window.itemsPerPage;
      const productsToShow = filteredProducts.slice(startIndex, endIndex);
      
      
      // Generate table with filtered and paginated products
      generateTable(productsToShow);
      updatePaginationButtons();
      
      // Update results count
      const resultsCount = document.querySelector('.wiertla-categories__results-count');
      const resultsNumbers = document.querySelector('#resultsCount');
      
      if (resultsCount && resultsNumbers) {
        const startDisplay = filteredProducts.length > 0 ? startIndex + 1 : 0;
        const endDisplay = Math.min(endIndex, filteredProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsNumbers.textContent = format.replace('{0}', startDisplay)
                                         .replace('{1}', endDisplay)
                                         .replace('{2}', filteredProducts.length);
      }
      
      // Synchronize active states for category icons
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
        const itemCategory = item.dataset.category;
        if (itemCategory === window.selectedCategory) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
      
      // Synchronize active states for filter buttons
      document.querySelectorAll('.wiertla-categories__filter-button').forEach(btn => {
        const btnFilter = btn.getAttribute('data-filter');
        if (btnFilter === window.selectedCategory) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
      
      // Update fullscreen mode if active
      const fullscreenMode = document.querySelector('.wiertla-categories__fullscreen-mode');
      if (fullscreenMode && fullscreenMode.classList.contains('active')) {
        applyFullscreenFilters();
      }
      
      // Update URL parameters
      updateUrlParams();
    }
    
    // Make it globally available
    window.applyFilters = applyFilters;
    
    // Update pagination button states
    function updatePaginationButtons() {
      const prevButton = document.getElementById('prevPage');
      const nextButton = document.getElementById('nextPage');
      
      if (prevButton) {
        prevButton.disabled = window.currentPage <= 1;
      } else {
        console.error('Previous button not found');
      }
      
      if (nextButton) {
        nextButton.disabled = window.currentPage >= window.totalPages;
      } else {
        console.error('Next button not found');
      }
    }
    
    // Handle pagination button clicks
    const prevButton = document.getElementById('prevPage');
    const nextButton = document.getElementById('nextPage');
    
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        if (window.currentPage > 1) {
          window.currentPage--;
          applyFilters();
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function() {
        if (window.currentPage < window.totalPages) {
          window.currentPage++;
          applyFilters();
        }
      });
    }
    
    // Handle search input
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        window.currentFilters.search = this.value.trim();
        window.currentPage = 1;
        applyFilters();
      });
    }
    
    // Handle fullscreen button
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');
    const fullscreenMode = document.querySelector('.wiertla-categories__fullscreen-mode');
    const fullscreenClose = document.querySelector('.wiertla-categories__fullscreen-close');
    const fullscreenContent = document.querySelector('.wiertla-categories__fullscreen-content');
    
    if (fullscreenBtn && fullscreenMode && fullscreenContent) {
      fullscreenBtn.addEventListener('click', function() {
        // Add fullscreen header with proper translation elements
        const fullscreenHeader = document.createElement('div');
        fullscreenHeader.className = 'wiertla-categories__fullscreen-header';
        
        fullscreenHeader.innerHTML = `
          <div class="wiertla-categories__fullscreen-title">
            <h2>${translations[currentLanguage].fullscreen_title}</h2>
            <p>${translations[currentLanguage].fullscreen_description}</p>
          </div>
          <button class="wiertla-categories__fullscreen-close">
            <span>${translations[currentLanguage].close_fullscreen}</span>
            <img src="{{ 'zoom_out_map.svg' | asset_url }}" alt="Exit Fullscreen" width="24" height="24">
          </button>
        `;
        
        // Replace existing fullscreen content
        fullscreenMode.innerHTML = '';
        fullscreenMode.appendChild(fullscreenHeader);
        
        // Create container for the content
        const fullscreenContainer = document.createElement('div');
        fullscreenContainer.className = 'wiertla-categories__fullscreen-container';
        fullscreenMode.appendChild(fullscreenContainer);
    
        // Clone filters and table
        const filters = document.querySelector('.wiertla-categories__filters').cloneNode(true);
        const tableContainer = document.querySelector('.wiertla-categories__table-container').cloneNode(true);
        const resultsContainer = document.querySelector('.wiertla-categories__results').cloneNode(true);
    
        // Update IDs in cloned content to avoid duplicates
        const newTableBody = tableContainer.querySelector('#productsTableBody');
        if (newTableBody) {
          newTableBody.id = 'fullscreenProductsTableBody';
        }
    
        const newResultsCount = resultsContainer.querySelector('#resultsCount');
        if (newResultsCount) {
          newResultsCount.id = 'fullscreenResultsCount';
        }
    
        const newPrevButton = resultsContainer.querySelector('#prevPage');
        if (newPrevButton) {
          newPrevButton.id = 'fullscreenPrevPage';
          // Set translation text
          newPrevButton.setAttribute('data-text', translations[currentLanguage].show_previous);
        }
    
        const newNextButton = resultsContainer.querySelector('#nextPage');
        if (newNextButton) {
          newNextButton.id = 'fullscreenNextPage';
          // Set translation text
          newNextButton.setAttribute('data-text', translations[currentLanguage].show_next);
        }
    
        // Create fullscreen layout
        const fullscreenLayout = document.createElement('div');
        fullscreenLayout.className = 'wiertla-categories__fullscreen-layout';
    
        // Create left and right columns
        const leftColumn = document.createElement('div');
        leftColumn.className = 'wiertla-categories__fullscreen-left';
    
        const rightColumn = document.createElement('div');
        rightColumn.className = 'wiertla-categories__fullscreen-right';
    
        // Add preview component to left column
        leftColumn.innerHTML = `
          <div class="wiertla-categories__preview">
            <h3 class="wiertla-categories__preview-title">${translations[currentLanguage].preview_title}</h3>
            <div class="wiertla-categories__preview-image">
              <img src="{{ 'custom_icons.png' | asset_url }}" alt="Preview" class="wiertla-categories__preview-img" width="300" height="200">
            </div>
            <p class="wiertla-categories__preview-text">${translations[currentLanguage].preview_instruction}</p>
          </div>
        `;
    
        // Add filters and table to right column
        rightColumn.appendChild(filters);
        rightColumn.appendChild(tableContainer);
    
        // Assemble the layout
        fullscreenLayout.appendChild(leftColumn);
        fullscreenLayout.appendChild(rightColumn);
    
        // Clear and update fullscreen content
        fullscreenContainer.innerHTML = '';
        fullscreenContainer.appendChild(fullscreenLayout);
        fullscreenContainer.appendChild(resultsContainer);
    
        // Show fullscreen mode
        fullscreenMode.classList.add('active');
        document.body.style.overflow = 'hidden';
    
        // Re-apply filters to the cloned table
        applyFullscreenFilters();
    
        // Add event listeners to cloned elements
        addFullscreenEventListeners();
    
        // Add close button event listener
        const newCloseButton = fullscreenMode.querySelector('.wiertla-categories__fullscreen-close');
        if (newCloseButton) {
          newCloseButton.addEventListener('click', function() {
            fullscreenMode.classList.remove('active');
            document.body.style.overflow = '';
          });
        }
      });
    }
    
    function applyFullscreenFilters() {
      const filteredProducts = filterProducts();
      const startIndex = (window.currentPage - 1) * window.itemsPerPage;
      const endIndex = startIndex + window.itemsPerPage;
      const productsToShow = filteredProducts.slice(startIndex, endIndex);
      
      const tableBody = document.getElementById('fullscreenProductsTableBody');
      if (!tableBody) {
        console.error('Fullscreen table body element not found!');
        return;
      }
      
      tableBody.innerHTML = '';
      
      if (productsToShow.length === 0) {
        const noResultsRow = document.createElement('tr');
        noResultsRow.innerHTML = `<td colspan="7" style="text-align: center; padding: 20px;">${translations[currentLanguage].no_results}</td>`;
        tableBody.appendChild(noResultsRow);
        return;
      }
      
      productsToShow.forEach(product => {
        const row = document.createElement('tr');
        row.className = 'wiertla-categories__table-row';
        row.setAttribute('data-product-id', product.id);
        
        // Add data attributes for filtering
        row.setAttribute('data-category', product.custom_category || '');
        row.setAttribute('data-status', product.rentable ? 'true' : 'false');
        row.setAttribute('data-type', product.type || '');
        row.setAttribute('data-crown', product.custom_crown || '');
        row.setAttribute('data-vendor', product.vendor || product.custom_manufacturer || '');
        row.setAttribute('data-sku', product.sku || product.custom_symbol || product.custom_kod_producenta || '');
        
        row.innerHTML = `
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
            <img src="${product.typeIcon}" alt="${product.type}" class="wiertla-categories__type-icon">
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
            ${product.diameter || '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
            ${product.length || '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
            ${product.symbol || '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor" data-href="/products/${product.handle || ''}">
            ${product.vendor || product.custom_manufacturer || '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
            ${product.price ? `${product.price} zł` : '-'}
          </td>
          <td class="wiertla-categories__table-cell wiertla-categories__table-cell--name">
            ${product.name || '-'}
          </td>
        `;
        
        if (product.image) {
          row.setAttribute('data-image', product.large_image);
          
          // Using mouseover for fullscreen mode to avoid conflicts
          row.addEventListener('mouseover', function() {
            const image = this.getAttribute('data-image');
            const hoverElement = document.querySelector('.wiertla-categories__preview-hover');
            const hoverImage = document.querySelector('.wiertla-categories__preview-hover-img');
            
            if (hoverImage) {
              hoverImage.src = image;
              hoverElement.style.display = 'block';
            }
          });
          
          row.addEventListener('mouseout', function() {
            const hoverElement = document.querySelector('.wiertla-categories__preview-hover');
            if (hoverElement) {
              hoverElement.style.display = 'none';
            }
          });
        }
        
        row.addEventListener('click', function(e) {
          if (e.target.tagName !== 'A' && e.target.tagName !== 'IMG') {
            const link = this.querySelector('.wiertla-categories__product-link');
            if (link) {
              window.location.href = link.getAttribute('href');
            }
          }
        });
        
        tableBody.appendChild(row);
      });
      
      // Update result count in fullscreen mode
      const resultsCount = document.getElementById('fullscreenResultsCount');
      if (resultsCount) {
        const startIndex = (window.currentPage - 1) * window.itemsPerPage + 1;
        const endIndex = Math.min(startIndex + productsToShow.length - 1, filteredProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsCount.textContent = format.replace('{0}', startIndex).replace('{1}', endIndex).replace('{2}', filteredProducts.length);
      }
      
      // Update pagination buttons
      const prevButton = document.getElementById('fullscreenPrevPage');
      const nextButton = document.getElementById('fullscreenNextPage');
      
      if (prevButton) {
        prevButton.disabled = window.currentPage <= 1;
      }
      
      if (nextButton) {
        nextButton.disabled = window.currentPage >= window.totalPages;
      }
      
      // Synchronize active states for category icons in fullscreen view
      document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__icon-item').forEach(item => {
        const itemCategory = item.dataset.category;
        if (itemCategory === window.selectedCategory) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
      
      // Synchronize active states for filter buttons in fullscreen view
      document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button').forEach(btn => {
        const btnFilter = btn.getAttribute('data-filter');
        if (btnFilter === window.selectedCategory) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }
    
    function addFullscreenEventListeners() {
      // Handle fullscreen pagination
      const prevButton = document.getElementById('fullscreenPrevPage');
      const nextButton = document.getElementById('fullscreenNextPage');
      
      if (prevButton) {
        prevButton.addEventListener('click', function() {
          if (window.currentPage > 1) {
            window.currentPage--;
            applyFilters(); // Update main view
            applyFullscreenFilters(); // Update fullscreen view
          }
        });
      }
      
      if (nextButton) {
        nextButton.addEventListener('click', function() {
          if (window.currentPage < window.totalPages) {
            window.currentPage++;
            applyFilters(); // Update main view
            applyFullscreenFilters(); // Update fullscreen view
          }
        });
      }
      
      // Handle fullscreen filters
      const filterSelects = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter');
      
      filterSelects.forEach(select => {
        select.addEventListener('change', function() {
          const filterType = this.getAttribute('data-filter');
          currentFilters[filterType] = this.value;
          window.currentPage = 1;
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen per-page buttons
      const perPageButtons = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__per-page-button');
      perPageButtons.forEach(button => {
        button.addEventListener('click', function() {
          const value = parseInt(this.getAttribute('data-value'));
          
          // Update active button
          perPageButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Update items per page
          window.itemsPerPage = value;
          window.currentPage = 1;
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen filter buttons
      const filterButtons = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button');
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          const filterType = this.getAttribute('data-filter');
          
          // Update active button
          filterButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Update selected category
          window.selectedCategory = filterType;
          window.currentPage = 1;
          
          // If "Wszystkie" is clicked, reset all filters
          if (filterType === 'wszystkie') {
            currentFilters = {
              type: '',
              crown: '',
              manufacturer: '',
              search: ''
            };
            
            // Reset filter dropdowns in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter dropdowns in main view as well
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Clear search input
            const searchInput = document.querySelector('.wiertla-search__input');
            if (searchInput) {
              searchInput.value = '';
            }
          }
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
      
      // Handle fullscreen icon items
      const iconItems = document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__icon-item');
      iconItems.forEach(item => {
        item.addEventListener('click', function() {
          // Remove active class from all icons in fullscreen view
          iconItems.forEach(icon => icon.classList.remove('active'));
          
          // Add active class to clicked icon
          this.classList.add('active');
          
          // Get category from data attribute
          const category = this.dataset.category || 'wszystkie';
          
          // Update selected category
          window.selectedCategory = category;
          window.currentPage = 1;
          // If "Wszystkie" is clicked, reset all filters
          if (category === 'wszystkie') {
            currentFilters = {
              type: '',
              crown: '',
              manufacturer: '',
              search: ''
            };
            
            // Reset filter dropdowns in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter dropdowns in main view as well
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter').forEach(filter => {
              filter.value = '';
            });
            
            // Reset filter buttons in fullscreen view
            document.querySelectorAll('.wiertla-categories__fullscreen-content .wiertla-categories__filter-button').forEach(btn => {
              btn.classList.remove('active');
              if (btn.getAttribute('data-filter') === 'wszystkie') {
                btn.classList.add('active');
              }
            });
            
            // Reset filter buttons in main view
            document.querySelectorAll('.wiertla-categories__filters .wiertla-categories__filter-button').forEach(btn => {
              btn.classList.remove('active');
              if (btn.getAttribute('data-filter') === 'wszystkie') {
                btn.classList.add('active');
              }
            });
            
            // Clear search input
            const searchInput = document.querySelector('.wiertla-search__input');
            if (searchInput) {
              searchInput.value = '';
            }
          }
          
          applyFilters(); // Update main view
          applyFullscreenFilters(); // Update fullscreen view
        });
      });
    }
    
    // Add event delegation for filter icons
    document.addEventListener('click', function(event) {
      const iconItem = event.target.closest('.wiertla-categories__icon-item');
      if (iconItem) {
        // Remove active class from all icons in both icon containers
        document.querySelectorAll('.wiertla-categories__icon-item').forEach(item => {
          item.classList.remove('active');
        });
        
        // Add active class to clicked icon
        iconItem.classList.add('active');
        
        const category = iconItem.dataset.category || 'wszystkie';
        
        // 🐛 DEBUG: Log icon click details
        console.group(`🖱️ ICON CLICK DEBUG`);
        console.log(`📂 Clicked Category: "${category}"`);
        console.log(`🏷️ Icon Element:`, iconItem);
        console.log(`📝 Data Attribute: data-category="${iconItem.dataset.category}"`);
        console.log(`🔄 Will trigger filtering with selectedCategory = "${category}"`);
        console.groupEnd();
        
        // If the clicked item is "Wszystkie", reset all filters except pagination
        if (category === 'wszystkie' || !category) {
          currentFilters = {
            type: '',
            crown: '',
            manufacturer: '',
            search: ''
          };
          
          // Reset filter dropdowns
          document.querySelectorAll('.wiertla-categories__filter').forEach(filter => {
            filter.value = '';
          });
          
          // Reset filter buttons
          document.querySelectorAll('.wiertla-categories__filter-button').forEach(btn => {
            btn.classList.remove('active');
          });
          
          // Set "Wszystkie" button to active
          const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
          if (wszystkieBtn) {
            wszystkieBtn.classList.add('active');
          }
          
          // Clear search input
          const searchInput = document.querySelector('.wiertla-search__input');
          if (searchInput) {
            searchInput.value = '';
          }
        } else {
          // Set the appropriate filter based on the category
          currentFilters.type = category;
        }
        
        // Update selected category and apply filters
        window.selectedCategory = category;
        window.currentPage = 1;
        
        // 🐛 DEBUG: Log before applying filters
        console.log(`🚀 About to call applyFilters() with selectedCategory = "${window.selectedCategory}"`);
        
        applyFilters();
    
      }
    });
    
    // Add event delegation for filter buttons and dropdowns
    document.addEventListener('click', function(event) {
      const filterButton = event.target.closest('.wiertla-categories__filter-button');
      if (filterButton) {
        const allFilterButtons = document.querySelectorAll('.wiertla-categories__filter-button');
        allFilterButtons.forEach(btn => btn.classList.remove('active'));
        filterButton.classList.add('active');
        
        window.selectedCategory = filterButton.getAttribute('data-filter');
        window.currentPage = 1;
        
        // If clicking on "Wszystkie" button, reset all filters
        if (window.selectedCategory === 'wszystkie') {
          // Reset filter state
          currentFilters = {
            type: '',
            crown: '',
            manufacturer: '',
            search: ''
          };
          
          // Reset all dropdown filters to default values
          document.querySelectorAll('.wiertla-categories__filter').forEach(filter => {
            filter.value = '';
          });
          
          // Clear search input
          const searchInput = document.querySelector('.wiertla-search__input');
          if (searchInput) {
            searchInput.value = '';
          }
        }
        
        applyFilters();
      }
      
      const perPageButton = event.target.closest('.wiertla-categories__per-page-button');
      if (perPageButton) {
        const allPerPageButtons = document.querySelectorAll('.wiertla-categories__per-page-button');
        allPerPageButtons.forEach(btn => btn.classList.remove('active'));
        perPageButton.classList.add('active');
        
        window.itemsPerPage = parseInt(perPageButton.getAttribute('data-value'));
        window.currentPage = 1;
        applyFilters();
      }
    });
    
    
    // Add change event listeners for all filter dropdowns
    document.addEventListener('change', function(event) {
      const filterSelect = event.target.closest('.wiertla-categories__filter');
      if (filterSelect) {
        // Skip processing during category resets to prevent interference
        if (window.isResettingCategories) {
          console.log(`🚫 Skipping dropdown change during category reset`);
          return;
        }
        
        const filterType = filterSelect.getAttribute('data-filter');
        if (filterType) {
          // Update filters whether value is changed to something or cleared
          if (currentFilters[filterType] !== filterSelect.value) {
            currentFilters[filterType] = filterSelect.value;
            
            // Also sync to WiertlaCNC.filters to ensure type filtering works
            if (!window.WiertlaCNC.filters) {
              window.WiertlaCNC.filters = {};
            }
            window.WiertlaCNC.filters[filterType] = filterSelect.value;
            
            console.log(`🔄 Filter changed: ${filterType} = "${filterSelect.value}"`);
            console.log(`📋 Current WiertlaCNC.filters:`, window.WiertlaCNC.filters);
            
            // Sync with category icons based on filter type
            if (filterType === 'typ') {
              syncTypeFilterWithIcons(filterSelect.value, 'typ');
            } else if (filterType === 'rodzaj') {
              syncRodzajFilterWithIcons(filterSelect.value);
            }
            
            window.currentPage = 1;
            
            // Remove active class from "Wszystkie" button when a filter is selected
            if (filterSelect.value !== '') {
              const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
              if (wszystkieBtn) {
                wszystkieBtn.classList.remove('active');
              }
            }
            
            applyFilters();
          }
        }
      }
    });
    
    // Add dummy product data if none exists
    if (allProducts.length === 0) {
      allProducts = [
        {
          id: 1,
          title: "Example Drill Bit",
          url: "#",
          type: "VW",
          vendor: "Sandvik",
          price: "120,00 zł",
          available: true,
          fi: "12",
          length: "85",
          symbol: "VW-12-85",
          rentable: true,
          image: "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          large_image: "{{ 'ico_big_koronkowe.svg' | asset_url }}"
        },
        {
          id: 2,
          title: "Płytkowy Wiertło",
          url: "#",
          type: "PR",
          vendor: "Komet",
          price: "145,50 zł",
          available: true,
          fi: "8",
          length: "65",
          symbol: "PR-8-65",
          rentable: false,
          image: "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          large_image: "{{ 'ico_big_koronkowe.svg' | asset_url }}"
        }
      ];
    }
    
    // Move the preview container creation up, before calling applyFilters
    // Create a separate preview container that shows on row hover
    const previewContainer = document.querySelector('.wiertla-categories__preview-image img');
    if (previewContainer) {
      // Set default image
      previewContainer.src = "{{ 'custom_icons.png' | asset_url }}";
      
      // Add event delegation for row hover to update preview image
      const tableBody = document.getElementById('productsTableBody');
      if (tableBody) {
        // Function to update preview image
        function updatePreviewImage(imageUrl, showActive = true) {
          // Find all preview images in both main and fullscreen views
          const previewImages = document.querySelectorAll('.wiertla-categories__preview-image img');
          previewImages.forEach(img => {
            img.src = imageUrl;
          });
          
          // Update active state on preview containers
          const previewSections = document.querySelectorAll('.wiertla-categories__preview');
          previewSections.forEach(section => {
            if (showActive) {
              section.classList.add('active');
            } else {
              section.classList.remove('active');
            }
          });
        }
      
        // Add event delegation for table rows hover
        tableBody.addEventListener('mouseover', function(e) {
          const row = e.target.closest('tr.wiertla-categories__table-row');
          if (row) {
            const imageUrl = row.getAttribute('data-image');
            if (imageUrl && imageUrl !== 'undefined' && imageUrl !== 'null') {
              updatePreviewImage(imageUrl, true);
            }
          }
        });
        
        // Add event delegation for mouseleave to reset preview image
        tableBody.addEventListener('mouseout', function(e) {
          const row = e.target.closest('tr.wiertla-categories__table-row');
          if (row && !tableBody.contains(e.relatedTarget)) {
            updatePreviewImage("{{ 'custom_icons.png' | asset_url }}", false);
          }
        });
        
        // Also handle the fullscreen table body
        document.addEventListener('mouseover', function(e) {
          const fullscreenTableBody = document.querySelector('#temp-fullscreen-view tbody');
          if (fullscreenTableBody && fullscreenTableBody.contains(e.target)) {
            const row = e.target.closest('tr');
            if (row) {
              const imageUrl = row.getAttribute('data-image');
              if (imageUrl && imageUrl !== 'undefined' && imageUrl !== 'null') {
                updatePreviewImage(imageUrl, true);
              }
            }
          }
        });
      }
      
      // Create a separate preview container that shows on row hover
      const tablePreviewContainer = document.createElement('div');
      tablePreviewContainer.className = 'wiertla-categories__table-preview desktop';
      tablePreviewContainer.innerHTML = `
        <div class="wiertla-categories__preview-image">
          <img src="{{ 'custom_icons.png' | asset_url }}" alt="Preview" class="wiertla-categories__preview-img">
        </div>
      `;
      
      // Append to the left column, after the main preview
      const leftColumn = document.querySelector('.wiertla-categories__left-column');
      if (leftColumn) {
        leftColumn.appendChild(tablePreviewContainer);
      }
    }
    
    // Initial table population
    applyFilters();
    
    // Set "Wszystkie" icon as active by default in both icon containers
    document.querySelectorAll('.wiertla-categories__icon-item').forEach((item, index, array) => {
      // Add active class to last icon in icon set (Wszystkie) or one with data-category="wszystkie"
      const isWszystkie = item.querySelector('.wiertla-categories__icon-label')?.textContent.trim().toUpperCase() === 'WSZYSTKIE' ||
                         item.dataset.category === 'wszystkie';
      
      if (isWszystkie || (index === array.length - 1 && array.length > 0)) {
        item.classList.add('active');
      } else {
        item.classList.remove('active');
      }
    });
    
    // Also set the "Wszystkie" filter button to active
    const wszystkieBtn = document.querySelector('.wiertla-categories__filter-button[data-filter="wszystkie"]');
    if (wszystkieBtn) {
      wszystkieBtn.classList.add('active');
    }
    
    // Initialize UI with current language
    updateUILanguage();
    
    // Set active language button
    document.querySelectorAll('.wiertla-categories__language-btn').forEach(btn => {
      if (btn.getAttribute('data-lang') === currentLanguage) {
        btn.classList.add('active');
      }
    });
    
    // Connect header language switcher to our translation system
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to header language links
      document.querySelectorAll('.header__lang-links a').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const lang = this.getAttribute('data-lang');
          if (lang && translations[lang]) {
            window.changeLanguage(lang);
            
            // Update active state in the header language links
            document.querySelectorAll('.header__lang-links a').forEach(l => {
              if (l.getAttribute('data-lang') === lang) {
                l.classList.add('active');
              } else {
                l.classList.remove('active');
              }
            });
          }
        });
      });
      
      // Set initial active state for the header language links
      document.querySelectorAll('.header__lang-links a').forEach(link => {
        if (link.getAttribute('data-lang') === currentLanguage) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    });
    
    // Watch for language changes in the header
    document.addEventListener('click', function(e) {
      // Look for header language links
      const langLink = e.target.closest('.header__lang-links a');
      if (langLink) {
        e.preventDefault(); // Prevent default to avoid page reload
        const lang = langLink.getAttribute('data-lang');
        if (lang && translations[lang]) {
          window.changeLanguage(lang);
          
          // Update active state in the header language links
          document.querySelectorAll('.header__lang-links a').forEach(l => {
            if (l.getAttribute('data-lang') === lang) {
              l.classList.add('active');
            } else {
              l.classList.remove('active');
            }
          });
        }
      }
    });
    
    // After DOM is fully loaded, force a redraw based on current size
    document.addEventListener('DOMContentLoaded', function() {
      const currentIsMobileView = window.innerWidth <= 768;
      // Update global isMobileView
      isMobileView = currentIsMobileView;
      
      // Force a redraw after DOM is fully loaded
      setTimeout(function() {
        applyFilters();
      }, 100);
    });
    
    // Add ONE resize handler
    let resizeTimeout;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(function() {
        // Use the same approach as in generateTable
        const currentIsMobileView = window.innerWidth <= 768;
        if (currentIsMobileView !== isMobileView) {
          isMobileView = currentIsMobileView;
          applyFilters(); // This will regenerate the table with the correct view
        }
      }, 250);
    });
    
    // Define the missing showProductImage and hideProductImage functions
    function showProductImage(row) {
      const image = row.getAttribute('data-image');
      if (!image) return;
      
      // Update both hover previews
      const hoverPreview = document.querySelector('.wiertla-categories__hover-preview');
      if (hoverPreview) {
        const imageElement = hoverPreview.querySelector('img');
        if (imageElement) {
          imageElement.src = image;
          hoverPreview.classList.add('active');
          hoverPreview.style.display = 'block';
        }
      }
      
      const newImageHover = document.querySelector('.wiertla-categories__image-hover');
      if (newImageHover) {
        const imageElement = newImageHover.querySelector('img');
        if (imageElement) {
          imageElement.src = image;
          newImageHover.classList.add('active');
          newImageHover.style.display = 'block';
        }
      }
      
      // Also update preview area in layout
      const previewContainer = document.querySelector('.wiertla-categories__preview-image img');
      if (previewContainer) {
        previewContainer.src = image;
      }
    }
    function formatSymbol(symbol) {
      if (!symbol || symbol === '-') return '-';
      
      // Get current window width
      const isMobile = window.innerWidth <= 768;
      
      // Maximum length for symbols before truncation
      const maxLength = isMobile ? 8 : 13;
      
      // If symbol is longer than max length, truncate and add ellipsis
      if (symbol.length > maxLength) {
        return symbol.substring(0, maxLength) + '...';
      }
      
      return symbol;
    }
    function hideProductImage() {
      // Hide both hover previews
      const hoverPreview = document.querySelector('.wiertla-categories__hover-preview');
      if (hoverPreview) {
        hoverPreview.classList.remove('active');
        hoverPreview.style.display = 'none';
      }
      
      const newImageHover = document.querySelector('.wiertla-categories__image-hover');
      if (newImageHover) {
        newImageHover.classList.remove('active');
        newImageHover.style.display = 'none';
      }
      
      // Reset preview back to default
      const previewContainer = document.querySelector('.wiertla-categories__preview-image img');
      if (previewContainer) {
        previewContainer.src = "{{ 'custom_icons.png' | asset_url }}";
      }
    }
    
    // Only have ONE generateTable function
    function generateTable(products) {
      const tableBody = document.querySelector('.wiertla-categories__table tbody');
      if (!tableBody) {
        console.error('Table body element not found');
        return;
      }

      // Clear existing table content
      tableBody.innerHTML = '';

      // Check if products array is valid
      if (!Array.isArray(products) || products.length === 0) {
        const noResultsRow = document.createElement('tr');
        noResultsRow.innerHTML = `
          <td colspan="7" class="wiertla-categories__table-cell" style="text-align: center; padding: 20px;">
            ${translations[currentLanguage].no_results || 'Brak wyników'}
          </td>
        `;
        tableBody.appendChild(noResultsRow);
        return;
      }

      // Products are already sorted by diameter (FI) in the filterProducts function
     
      // Create preview container if it doesn't exist
      let previewContainer = document.querySelector('.wiertla-categories__preview-container');
      if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.className = 'wiertla-categories__preview-container';
        previewContainer.style.cssText = `
          position: fixed;
          left: 0;
          top: 0;
          width: 300px;
          height: 100vh;
          background: white;
          z-index: 1000;
          padding: 20px;
          display: none;
          box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        `;
        previewContainer.innerHTML = `
          <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
            <img src="" alt="" style="max-width: 100%; max-height: 100%; object-fit: contain;">
          </div>
        `;
        document.body.appendChild(previewContainer);
      }

      // Generate table rows using the provided products
      products.forEach((product, index) => {
        if (!product) {
          console.warn('Invalid product data at index:', index);
          return;
        }

        const row = document.createElement('tr');
        row.className = 'wiertla-categories__table-row';
        row.setAttribute('data-product-id', product.id || '');
        row.setAttribute('data-href', product.url || '');
        
        // Add data attributes for filtering
        row.setAttribute('data-category', product.custom_category || '');
        row.setAttribute('data-status', product.rentable ? 'true' : 'false');
        row.setAttribute('data-type', product.type || '');
        row.setAttribute('data-crown', product.custom_crown || '');
        row.setAttribute('data-vendor', product.vendor || product.custom_manufacturer || '');
        row.setAttribute('data-sku', product.sku || product.custom_symbol || product.custom_kod_producenta || '');

        // Always set image data for the row preview functionality
        // Try different properties for image, with fallbacks
        const imageUrl = product.image || product.large_image || product.featured_image || '{{ "custom_icons.png" | asset_url }}';
        row.setAttribute('data-image', imageUrl);
        
        // Remove individual event listeners since we're using event delegation now

        // Define icon mapping
        const iconMap = {
          'VW': "{{ 'image-8.png' | asset_url }}",
          'PR': "{{ 'image-10.png' | asset_url }}",
          'WW': "{{ 'image-12.png' | asset_url }}",
          'PS': "{{ 'image-9.png' | asset_url }}",
          'WK': "{{ 'image-13.png' | asset_url }}",
          'WV': "{{ 'image-11.png' | asset_url }}",
          'IS': "{{ 'ico_big_koronkowe.svg' | asset_url }}",
          'WA': "{{ 'ico_big_vhm.svg' | asset_url }}"
        };
        function getActiveTabType() {
          const activeTab = document.querySelector('.wiertla-categories__tab.active');
          return activeTab ? activeTab.getAttribute('data-tab-type') : 'wiertla';
        }
        
        // Get SKU prefix for icon
        const skuPrefix = product.sku?.substring(0, 2) || '';
        const iconUrl = iconMap[skuPrefix] || product.image || '';
        const activeTabType = getActiveTabType();
        // Generate row content based on screen width
        if (window.innerWidth <= 768) {
          if (activeTabType === 'wiertla') {
            row.innerHTML = `
              <td class="wiertla-categories__table-cell">
                <button type="button" class="wiertla-categories__mobile-card" data-product-id="${product.id || ''}" data-product-url="${product.url || ''}">
                  <div class="wiertla-categories__mobile-top">
                    <div class="wiertla-categories__mobile-image">
                      ${iconUrl ? `<img src="${iconUrl}" alt="${product.type || 'Product'}" width="34" height="34" loading="lazy">` : '-'}
                    </div>
                    <div class="wiertla-categories__mobile-fi">
                      <span class="mobile-label">Fi ⌀</span>
                      <span class="mobile-value">${(() => {
                        const fi = product.custom_fi;
                        const srednica = product.custom_srednica;
                        
                        if (fi && fi !== 'null' && fi !== 'undefined' && fi.trim() !== '') {
                          return '⌀ ' + fi;
                        }
                        if (srednica && srednica !== 'null' && srednica !== 'undefined' && srednica.trim() !== '') {
                          return '⌀ ' + srednica;
                        }
                        return '-';
                      })()}</span>
                    </div>
                    <div class="wiertla-categories__mobile-dimension">
                      ${product.metafields.custom.custom_working_length || product.custom_working_length || product.custom_xd || '-'}
                    </div>
                  </div>
                  <div class="wiertla-categories__mobile-bottom">
                    <div class="wiertla-categories__mobile-vendor">
                      ${formatSymbol(product.vendor || product.custom_manufacturer || '-')}
                    </div>
                    <div class="wiertla-categories__mobile-symbol">
                      ${formatSymbol(product.custom_symbol || product.custom_kod_producenta || '-')}
                    </div>
                    <div class="wiertla-categories__mobile-price-wrapper">
                      <div class="wiertla-categories__mobile-price">
                        ${product.price}
                      </div>
                      ${product.custom_rent ? `
                        <button class="wiertla-categories__mobile-rent-button" data-product-id="${product.id}">
                          <span>RENT A TOOL</span>
                        </button>
                      ` : ''}
                    </div>
                  </div>
                </button>
              </td>
            `;
          } else {
            // Mobile view for Plytki/Koronki tabs - show different layout
            row.innerHTML = `
              <td class="wiertla-categories__table-cell">
                <button type="button" class="wiertla-categories__mobile-card" data-product-id="${product.id || ''}" data-product-url="${product.url || ''}">
                  <div class="wiertla-categories__mobile-top">
                    <div class="wiertla-categories__mobile-image">
                      ${iconUrl ? `<img src="${iconUrl}" alt="${product.type || 'Product'}" width="34" height="34" loading="lazy">` : '-'}
                    </div>
                    <div class="wiertla-categories__mobile-fi">
                      <span class="mobile-label">Gniazdo</span>
                      <span class="mobile-value">${product.custom_gniazdo || '-'}</span>
                    </div>
                    <div class="wiertla-categories__mobile-dimension">
                      ${product.custom_rodzaj || '-'}
                    </div>
                  </div>
                  <div class="wiertla-categories__mobile-bottom">
                    <div class="wiertla-categories__mobile-vendor">
                      ${formatSymbol(product.custom_manufacturer || product.vendor || '-')}
                    </div>
                    <div class="wiertla-categories__mobile-symbol">
                      ${formatSymbol(product.custom_kod_producenta || '-')}
                    </div>
                    <div class="wiertla-categories__mobile-price-wrapper">
                      <div class="wiertla-categories__mobile-price">
                        ${product.price}
                      </div>
                      <div class="wiertla-categories__mobile-quantity">
                        Ilość: ${product.custom_szt || '-'}
                      </div>
                    </div>
                  </div>
                </button>
              </td>
            `;
          }
          const mobileCard = row.querySelector('.wiertla-categories__mobile-card');
          if (mobileCard) {
            // Remove the old conflicting click handler - let the JavaScript file handle it
          }
        } else {
          if (activeTabType === 'wiertla') {
            // Desktop view for Wiertla: Typ | ⌀ Fi | D/mm | Symbol | Producent | Cena netto
            row.innerHTML = `
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${iconUrl ? `<img src="${iconUrl}" alt="${product.type || 'Product'}" width="34" height="34" loading="lazy">` : '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${(() => {
                  const fi = product.custom_fi;
                  const srednica = product.custom_srednica;
                  
                  if (fi && fi !== 'null' && fi !== 'undefined' && fi.trim() !== '') {
                    return '⌀ ' + fi;
                  }
                  if (srednica && srednica !== 'null' && srednica !== 'undefined' && srednica.trim() !== '') {
                    return '⌀ ' + srednica;
                  }
                  return '-';
                })()}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${product.metafields.custom.custom_working_length || product.custom_working_length || product.custom_xd || '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.custom_symbol  || product.custom_kod_producenta || '-')}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.vendor || product.custom_manufacturer || '-')}
              </td>
               <td class="wiertla-categories__table-cell">
                <div class="wiertla-categories__price-wrapper">
                  <span class="wiertla-categories__price" data-href="/products/${product.handle}">${product.price}</span>
                  ${product.custom_rent ? `
                    <button class="wiertla-categories__rent-button" data-product-id="${product.id}">
                      <span>RENT A TOOL</span>
                    </button>
                  ` : ''}
                </div>
              </td>
            `;
          } else {
            // Desktop view for Plytki/Koronki: Gniazdo | Producent | Kod producenta | Rodzaj | Ilość | Cena netto
            row.innerHTML = `
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${product.custom_gniazdo || '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.custom_manufacturer || product.vendor || '-')}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${formatSymbol(product.custom_kod_producenta || '-')}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${product.custom_rodzaj || '-'}
              </td>
              <td class="wiertla-categories__table-cell" data-href="/products/${product.handle || ''}">
                ${product.custom_szt || '-'}
              </td>
               <td class="wiertla-categories__table-cell">
                <div class="wiertla-categories__price-wrapper">
                  <span class="wiertla-categories__price" data-href="/products/${product.handle}">${product.price}</span>
                </div>
              </td>
            `;
          }
        }

        // Add click handlers for table cells
        const cells = row.querySelectorAll('.wiertla-categories__table-cell[data-href]');
        cells.forEach(cell => {
          cell.addEventListener('click', function(e) {
            if (!e.target.closest('.wiertla-categories__rent-button')) {
              const url = this.getAttribute('data-href');
              if (url) {
                window.location.href = url;
              }
            }
          });
        });

        // Add click handler for rent button
        const rentButton = row.querySelector('.wiertla-categories__rent-button');
        if (rentButton) {
          rentButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const productId = this.getAttribute('data-product-id');
            
            if (window.WiertlaCNC && window.WiertlaCNC.products) {
              const product = window.WiertlaCNC.products.find(p => p.id === Number(productId));
              if (product) {
                window.WiertlaCNC.openRentModal(product);
              }
            }
          });
        }

        tableBody.appendChild(row);
      });

      // Update results count
      const resultsCount = document.getElementById('resultsCount');
      if (resultsCount) {
        const startIndex = (window.currentPage - 1) * window.itemsPerPage + 1;
        const endIndex = Math.min(startIndex + products.length - 1, allProducts.length);
        const format = translations[currentLanguage].results_format;
        resultsCount.textContent = format.replace('{0}', startIndex).replace('{1}', endIndex).replace('{2}', allProducts.length);
      }
    }
    
      });
    
      
      // Make the openFilterModal function globally available
      window.openFilterModal = function() {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      // Force all style properties directly
      modal.style.display = "block";
      modal.style.visibility = "visible";
      modal.style.opacity = "1";
      modal.style.pointerEvents = "auto";
      modal.classList.add("active");
      document.body.style.overflow = "hidden";
    } else {
      console.error("Modal not found in global function");
    }
    return false;
      };
      
      // Close modal function
      window.closeFilterModal = function() {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      modal.style.display = "none";
      modal.style.visibility = "hidden";
      modal.style.opacity = "0";
      modal.style.pointerEvents = "none";
      modal.classList.remove("active");
      document.body.style.overflow = "";
    }
      };
      
      // Wait for full DOM loading
      document.addEventListener('DOMContentLoaded', function() {
    
    // Direct targeting of the filter button by ID
    const filterButtonTrigger = document.getElementById('mobile-filter-button-trigger');
    
    const mobileFilterModal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    
    // Direct click handler for the ID-based button
    if (filterButtonTrigger) {
      filterButtonTrigger.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        window.openFilterModal();
      });
    }
    
    // Also check all buttons with class
    const filterButtons = document.querySelectorAll('.wiertla-categories__mobile-filter-button');
    
    filterButtons.forEach(function(btn, index) {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        window.openFilterModal();
      });
    });
    
    // Close buttons
    const closeButtons = document.querySelectorAll('.wiertla-categories__mobile-filter-close, .wiertla-categories__mobile-filter-close-wrapper');
    closeButtons.forEach(function(btn) {
      btn.addEventListener('click', function() {
        window.closeFilterModal();
      });
    });
    
    // Close when clicking outside
    if (mobileFilterModal) {
      mobileFilterModal.addEventListener('click', function(e) {
        if (e.target === mobileFilterModal) {
          window.closeFilterModal();
        }
      });
    }
      });
    
      document.addEventListener('DOMContentLoaded', function() {
    // Add click handlers for mobile categories
    const mobileTypeItems = document.querySelectorAll('.wiertla-categories-mobile-types__item');
    
    mobileTypeItems.forEach(item => {
      item.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        
        // Set active class
        mobileTypeItems.forEach(el => el.classList.remove('active'));
        this.classList.add('active');
        
        // Call the global filter function
        if (typeof window.handleCategoryChange === 'function') {
          window.handleCategoryChange(category);
        }
      });
    });
      });

      // Initialize tab from URL parameter on page load
      function initializeTabFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const mainType = urlParams.get('mainType');
        
        if (mainType && ['wiertla', 'plytki', 'koronki'].includes(mainType)) {
          // Find and activate the correct tab
          const targetTab = document.querySelector(`.wiertla-categories__tab[data-tab-type="${mainType}"]`);
          if (targetTab) {
            // Remove active from all tabs
            document.querySelectorAll('.wiertla-categories__tab').forEach(tab => {
              tab.classList.remove('active');
            });
            // Activate target tab
            targetTab.classList.add('active');
            window.WiertlaCNC.activeTabType = mainType;
          }
        }
      }

      // Call initialization on DOM ready
      initializeTabFromURL();
  </script>

  {% assign drill_stats_nav = sections['drill-stats-nav'] %}
  {% render 'drill-stats-nav' %}
{% endpaginate %}

{% schema %}
{
  "name": "Wiertla Categories",
  "tag": "section",
  "class": "wiertla-categories-section",
  "settings": [
    {
      "type": "collection",
      "id": "selected_collection",
      "label": "Select Collection to Display",
      "info": "Choose which collection's products to display in this section"
    },
    {
      "type": "range",
      "id": "items_per_page",
      "label": "Products per page",
      "default": 20,
      "min": 10,
      "max": 100,
      "step": 10
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Wiertla Categories"
    }
  ],
  "presets": [
    {
      "name": "Wiertla Categories",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<script>
  // Make the openFilterModal function globally available
  window.openFilterModal = function () {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      // Force all style properties directly
      modal.style.display = 'block';
      modal.style.visibility = 'visible';
      modal.style.opacity = '1';
      modal.style.pointerEvents = 'auto';
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      console.error('Modal not found in global function');
    }
    return false;
  };

  // Close modal function
  window.closeFilterModal = function () {
    const modal = document.querySelector('.wiertla-categories__mobile-filter-modal');
    if (modal) {
      modal.style.display = 'none';
      modal.style.visibility = 'hidden';
      modal.style.opacity = '0';
      modal.style.pointerEvents = 'none';
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }
  };

  // Wait for full DOM loading
  document.addEventListener('DOMContentLoaded', function () {
    // Direct targeting of the filter button by ID
    const filterButtonTrigger = document.getElementById('mobile-filter-button-trigger');

    const mobileFilterModal = document.querySelector('.wiertla-categories__mobile-filter-modal');

    // Direct click handler for the ID-based button
    if (filterButtonTrigger) {
      filterButtonTrigger.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        window.openFilterModal();
      });
    }

    // Also check all buttons with class
    const filterButtons = document.querySelectorAll('.wiertla-categories__mobile-filter-button');

    filterButtons.forEach(function (btn, index) {
      btn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        window.openFilterModal();
      });
    });

    // Close buttons
    const closeButtons = document.querySelectorAll(
      '.wiertla-categories__mobile-filter-close, .wiertla-categories__mobile-filter-close-wrapper'
    );
    closeButtons.forEach(function (btn) {
      btn.addEventListener('click', function () {
        window.closeFilterModal();
      });
    });

    // Close when clicking outside
    if (mobileFilterModal) {
      mobileFilterModal.addEventListener('click', function (e) {
        if (e.target === mobileFilterModal) {
          window.closeFilterModal();
        }
      });
    }
  });
</script>

<!-- Direct Modal Fallback -->
<div id="wiertla-filter-modal-fallback" class="wiertla-filter-modal">
  <div class="wiertla-filter-modal__content">
    <div class="wiertla-filter-modal__header">
      <div class="wiertla-filter-modal__icon">
        <img src="{{ 'icon_filter.svg' | asset_url }}" alt="Filter" width="24" height="24">
      </div>
      <div class="wiertla-filter-modal__title">filtruj wiertła w tabeli</div>
      <div class="wiertla-filter-modal__close" onclick="closeFilterModal()">
        <img src="{{ 'closee.svg' | asset_url }}" alt="Close" width="24" height="24">
      </div>
    </div>

    <div class="wiertla-filter-modal__buttons">
      <button class="wiertla-filter-modal__button wiertla-filter-modal__button--active" data-filter="type">
        Typ wiertła
      </button>
      <button class="wiertla-filter-modal__button" data-filter="crown">Wykaz koronek</button>
      <button class="wiertla-filter-modal__button" data-filter="manufacturer">Producent</button>
    </div>

    <div class="wiertla-filter-modal__section">
      <div class="wiertla-filter-modal__section-title">Pokaż</div>
      <div class="wiertla-filter-modal__dropdown" onclick="toggleDropdown('show-all')">
        <span>Wszystkie</span>
        <img
          src="{{ 'Arrow_drop_down_24dp_5F6368_FILL0_wght400_GRAD0_opsz copy.svg' | asset_url }}"
          alt="Dropdown"
          width="16"
          height="16"
        >
      </div>
      <div id="show-all-dropdown" class="wiertla-filter-modal__dropdown-content">
        <div class="wiertla-filter-modal__dropdown-item" onclick="clearAllFilters()">Wyczyść wszystkie filtry</div>
        <div class="wiertla-filter-modal__dropdown-item" onclick="selectAllItems()">Zaznacz wszystkie</div>
        <div class="wiertla-filter-modal__dropdown-item" onclick="deselectAllItems()">Odznacz wszystkie</div>
      </div>
    </div>

    <div class="wiertla-filter-modal__section">
      <div class="wiertla-filter-modal__section-title">Sortuj</div>
      <div class="wiertla-filter-modal__dropdown" onclick="toggleDropdown('sort')">
        <span>Wybierz sortowanie</span>
        <img
          src="{{ 'Arrow_drop_down_24dp_5F6368_FILL0_wght400_GRAD0_opsz copy.svg' | asset_url }}"
          alt="Dropdown"
          width="16"
          height="16"
        >
      </div>
      <div id="sort-dropdown" class="wiertla-filter-modal__dropdown-content">
        <div class="wiertla-filter-modal__dropdown-item" onclick="sortTable('name')">Nazwa (A-Z)</div>
        <div class="wiertla-filter-modal__dropdown-item" onclick="sortTable('name-desc')">Nazwa (Z-A)</div>
        <div class="wiertla-filter-modal__dropdown-item" onclick="sortTable('manufacturer')">Producent (A-Z)</div>
        <div class="wiertla-filter-modal__dropdown-item" onclick="sortTable('manufacturer-desc')">Producent (Z-A)</div>
      </div>
    </div>

    <div class="wiertla-filter-modal__section">
      <button class="wiertla-filter-modal__sort-button" onclick="applyFilters()">
        <span>Sortuj wiertła</span>
        <img src="{{ 'icon_filter.svg' | asset_url }}" alt="Sort" width="24" height="24">
      </button>
    </div>
  </div>
    </div>
</div>

<div class="wiertla-categories__fullscreen-view" style="display: none;">
  <div class="wiertla-categories__fullscreen-header">
    <div class="wiertla-categories__fullscreen-title">
      <h2>Przeglądaj wiertła w tabeli</h2>
      <p>Stale poszerzamy stan magazynowy, aktualizując ofertę o nowe modele wierteł CNC</p>
    </div>
    <button class="wiertla-categories__fullscreen-btn">
      <img
        src="{{ 'zoom_out_map.svg' | asset_url }}"
        alt="Close fullscreen"
        class="wiertla-categories__fullscreen-icon"
        width="24"
        height="24"
      >
      <span>Zamknij tryb pełnoekranowy</span>
    </button>
  </div>

  <div class="wiertla-categories__fullscreen-filters">
    {% render 'wiertla-categories-filters' %}
  </div>

  <div class="wiertla-categories__fullscreen-content">
    <div class="wiertla-categories__fullscreen-layout">
      <div class="wiertla-categories__fullscreen-left">
        {% render 'wiertla-categories-search' %}
      </div>
      <div class="wiertla-categories__fullscreen-right">
        {% render 'wiertla-categories-table' %}
      </div>
    </div>
  </div>
</div>

<!-- Fullscreen functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Toggle fullscreen functionality
    const fullscreenView = document.querySelector('.wiertla-categories__fullscreen-view');

    // Use a broader selector to find the open buttons
    const openFullscreenBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-btn:not(.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn)'
    );

    // Use a more specific selector for the close button
    const closeFullscreenBtn = document.querySelector(
      '.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn'
    );

    // Normal and fullscreen table elements
    const mainTableBody = document.getElementById('productsTableBody');
    const fullscreenTableBody = document.querySelector('.wiertla-categories__fullscreen-right tbody');

    // Fullscreen pagination elements
    const fullscreenResultsCount = document.querySelector(
      '.wiertla-categories__fullscreen-right .wiertla-categories__results-numbers'
    );
    const fullscreenPrevPage = document.querySelector('.wiertla-categories__fullscreen-right #prevPage');
    const fullscreenNextPage = document.querySelector('.wiertla-categories__fullscreen-right #nextPage');

    // Fullscreen search and filters
    const fullscreenSearch = document.querySelector('.wiertla-categories__fullscreen-left #CategorySearch');
    const fullscreenCategoryBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__icon-item'
    );
    const fullscreenFilterSelects = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__filter'
    );
    const fullscreenPerPageBtns = document.querySelectorAll(
      '.wiertla-categories__fullscreen-filters .wiertla-categories__per-page-button'
    );

    // Fullscreen state
    let fullscreenFilters = {
      category: 'wszystkie',
      type: '',
      crown: '',
      manufacturer: '',
      search: '',
      itemsPerPage: 20,
      currentPage: 1,
    };

    // Force initialize the fullscreen element correctly
    if (fullscreenView) {
      fullscreenView.style.display = 'none';
    }

    // Toggle fullscreen view
    function toggleFullscreen() {
      // Check if fullscreen is currently hidden
      const isHidden =
        fullscreenView.style.display === 'none' || window.getComputedStyle(fullscreenView).display === 'none';

      if (isHidden) {
        // EXTREME APPROACH: Add a completely new fullscreen view that will definitely work
        // Create temporary element with very forceful styling
        const tempFullscreen = document.createElement('div');
        tempFullscreen.id = 'temp-fullscreen-view';
        tempFullscreen.style.cssText = `
           position: fixed;
           top: 0;
           left: 0;
           right: 0;
           bottom: 0;
           width: 100%;
           height: 100%;
           background-color: #F5F5F8;
           z-index: 999999;
           overflow: auto;
           display: block !important;
           padding: 20px;
           box-sizing: border-box;
         `;

        // Clone the fullscreen content into this new container
        tempFullscreen.innerHTML = fullscreenView.innerHTML;

        // Remove the icons from the fullscreen view
        const iconsContainer = tempFullscreen.querySelector('.wiertla-categories__icons');
        if (iconsContainer) {
          iconsContainer.parentNode.removeChild(iconsContainer);
        }

        document.body.appendChild(tempFullscreen);

        // Get references to elements in the new container
        const tempTableBody = tempFullscreen.querySelector('tbody');
        const tempCloseButton = tempFullscreen.querySelector(
          '.wiertla-categories__fullscreen-header .wiertla-categories__fullscreen-btn'
        );
        const tempCategoryBtns = tempFullscreen.querySelectorAll('.wiertla-categories__filter-button');
        const tempFilterSelects = tempFullscreen.querySelectorAll('.wiertla-categories__filter');
        const tempPerPageBtns = tempFullscreen.querySelectorAll('.wiertla-categories__per-page-button');
        const tempSearchInput = tempFullscreen.querySelector('input.wiertla-search__input');
        // Use let instead of const for variables that will be reassigned
        let tempPrevButton = tempFullscreen.querySelector('#prevPage');
        let tempNextButton = tempFullscreen.querySelector('#nextPage');
        const tempResultsCount = tempFullscreen.querySelector('.wiertla-categories__results-numbers');

        // Get all product data directly from the window object for the fullscreen table
        // This will let us access all 235 products instead of just the paginated 20 in the main table
        if (tempTableBody) {
          // Check if we have access to the full products data via window object
          if (window.wiertlaProducts && window.wiertlaProducts.length > 0) {
            // Clear the table first
            tempTableBody.innerHTML = '';

            // For each product, create a table row with all data
            window.wiertlaProducts.forEach((product) => {
              const row = document.createElement('tr');

              // Get all possible field values from various property names that might be used
              const sku = product.sku || product.symbol || product.custom_symbol || '';
              const vendor = product.vendor || product.custom_manufacturer || '';
              const type = product.type || '';

              // Get diameter (Fi) correctly from all possible fields
              let diameter = '';
              if (
                product.custom_fi &&
                product.custom_fi !== 'null' &&
                product.custom_fi !== 'undefined' &&
                product.custom_fi.trim &&
                product.custom_fi.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_fi;
              } else if (
                product.custom_srednica &&
                product.custom_srednica !== 'null' &&
                product.custom_srednica !== 'undefined' &&
                product.custom_srednica.trim &&
                product.custom_srednica.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_srednica;
              } else if (product.diameter) {
                diameter = product.diameter;
              } else if (product.fi) {
                diameter = product.fi;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.diameter) {
                diameter = product.metafields.custom.diameter;
              }

              // Get length/depth correctly from all possible fields
              let length = '';
              if (
                product.custom_working_length &&
                product.custom_working_length !== 'null' &&
                product.custom_working_length !== 'undefined' &&
                product.custom_working_length.trim &&
                product.custom_working_length.trim() !== ''
              ) {
                length = product.custom_working_length;
              } else if (
                product.custom_xd &&
                product.custom_xd !== 'null' &&
                product.custom_xd !== 'undefined' &&
                product.custom_xd.trim &&
                product.custom_xd.trim() !== ''
              ) {
                length = product.custom_xd;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.working_length) {
                length = product.metafields.custom.working_length;
              } else if (product.length) {
                length = product.length;
              } else if (product.d) {
                length = product.d;
              } else if (product.depth) {
                length = product.depth;
              } else if (product.custom_drill_length) {
                length = product.custom_drill_length;
              }

              // Set data attributes for filtering
              row.setAttribute('data-sku', sku);
              row.setAttribute('data-vendor', vendor);
              row.setAttribute('data-type', type);

              // Format price safely
              let formattedPrice = '';
              const price = product.price || product.price_numeric || product.compare_at_price || '';
              if (price !== undefined && price !== null && price !== '') {
                // Check if price is a number or can be converted to one
                const priceNum = typeof price === 'number' ? price : parseFloat(price);

                if (!isNaN(priceNum)) {
                  formattedPrice = priceNum.toFixed(2) + ' zł';
                } else {
                  // If it's not a number, just use as is
                  formattedPrice = price + (String(price).includes('zł') ? '' : ' zł');
                }
              }

              // Determine the icon URL based on product type
              // Get the first two characters of the symbol to determine the type icon
              let typeIcon = '';
              if (sku && sku.length >= 2) {
                const skuPrefix = sku.substring(0, 2).toUpperCase();
                const iconMapping = {
                  VW: '{{ "image-8.png" | asset_url }}',
                  PR: '{{ "image-10.png" | asset_url }}',
                  WW: '{{ "image-12.png" | asset_url }}',
                  PS: '{{ "image-9.png" | asset_url }}',
                  WK: '{{ "image-13.png" | asset_url }}',
                  WV: '{{ "image-11.png" | asset_url }}',
                  IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                  WA: '{{ "ico_big_vhm.svg" | asset_url }}',
                };
                typeIcon = iconMapping[skuPrefix] || '';
              }

              // Create table cells with product data
              row.innerHTML = `
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
                     ${typeIcon ? `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">` : type}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
                     ${diameter || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
                     ${length || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
                     ${sku || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor">
                     ${vendor || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
                     ${formattedPrice || '-'}
                   </td>
                 `;

              // Add the row to the table
              tempTableBody.appendChild(row);
            });
          } else if (window.products && window.products.length > 0) {
            // Clear the table first
            tempTableBody.innerHTML = '';

            window.products.forEach((product) => {
              const row = document.createElement('tr');

              // Get all possible field values from various property names that might be used
              const sku = product.sku || product.symbol || product.custom_symbol || '';
              const vendor = product.vendor || product.custom_manufacturer || '';
              const type = product.type || '';

              // Get diameter (Fi) correctly from all possible fields
              let diameter = '';
              if (
                product.custom_fi &&
                product.custom_fi !== 'null' &&
                product.custom_fi !== 'undefined' &&
                product.custom_fi.trim &&
                product.custom_fi.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_fi;
              } else if (
                product.custom_srednica &&
                product.custom_srednica !== 'null' &&
                product.custom_srednica !== 'undefined' &&
                product.custom_srednica.trim &&
                product.custom_srednica.trim() !== ''
              ) {
                diameter = '⌀ ' + product.custom_srednica;
              } else if (product.diameter) {
                diameter = product.diameter;
              } else if (product.fi) {
                diameter = product.fi;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.diameter) {
                diameter = product.metafields.custom.diameter;
              }

              // Get length/depth correctly from all possible fields
              let length = '';
              if (
                product.custom_working_length &&
                product.custom_working_length !== 'null' &&
                product.custom_working_length !== 'undefined' &&
                product.custom_working_length.trim &&
                product.custom_working_length.trim() !== ''
              ) {
                length = product.custom_working_length;
              } else if (
                product.custom_xd &&
                product.custom_xd !== 'null' &&
                product.custom_xd !== 'undefined' &&
                product.custom_xd.trim &&
                product.custom_xd.trim() !== ''
              ) {
                length = product.custom_xd;
              } else if (product.metafields && product.metafields.custom && product.metafields.custom.working_length) {
                length = product.metafields.custom.working_length;
              } else if (product.length) {
                length = product.length;
              } else if (product.d) {
                length = product.d;
              } else if (product.depth) {
                length = product.depth;
              } else if (product.custom_drill_length) {
                length = product.custom_drill_length;
              }

              // Set data attributes for filtering
              row.setAttribute('data-sku', sku);
              row.setAttribute('data-vendor', vendor);
              row.setAttribute('data-type', type);

              // Format price safely
              let formattedPrice = '';
              const price = product.price || product.price_numeric || product.compare_at_price || '';
              if (price !== undefined && price !== null && price !== '') {
                // Check if price is a number or can be converted to one
                const priceNum = typeof price === 'number' ? price : parseFloat(price);

                if (!isNaN(priceNum)) {
                  formattedPrice = priceNum.toFixed(2) + ' zł';
                } else {
                  // If it's not a number, just use as is
                  formattedPrice = price + (String(price).includes('zł') ? '' : ' zł');
                }
              }

              // Determine the icon URL based on product type
              // Get the first two characters of the symbol to determine the type icon
              let typeIcon = '';
              if (sku && sku.length >= 2) {
                const skuPrefix = sku.substring(0, 2).toUpperCase();
                const iconMapping = {
                  VW: '{{ "image-8.png" | asset_url }}',
                  PR: '{{ "image-10.png" | asset_url }}',
                  WW: '{{ "image-12.png" | asset_url }}',
                  PS: '{{ "image-9.png" | asset_url }}',
                  WK: '{{ "image-13.png" | asset_url }}',
                  WV: '{{ "image-11.png" | asset_url }}',
                  IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                  WA: '{{ "ico_big_vhm.svg" | asset_url }}',
                };
                typeIcon = iconMapping[skuPrefix] || '';
              }

              // Create table cells with product data
              row.innerHTML = `
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--type">
                     ${typeIcon ? `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">` : type}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--diameter">
                     ${diameter || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--length">
                     ${length || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--symbol">
                     ${sku || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--vendor">
                     ${vendor || '-'}
                   </td>
                   <td class="wiertla-categories__table-cell wiertla-categories__table-cell--price">
                     ${formattedPrice || '-'}
                   </td>
                 `;

              // Add the row to the table
              tempTableBody.appendChild(row);
            });
          } else if (mainTableBody && mainTableBody.children.length > 0) {
            // Fallback to copying from main table if no product data is available in window

            // Copy inner HTML and make sure all cells have proper CSS classes
            tempTableBody.innerHTML = mainTableBody.innerHTML;

            // Make sure cells have the proper CSS classes
            const tempRows = tempTableBody.querySelectorAll('tr');
            tempRows.forEach((row) => {
              const cells = row.querySelectorAll('td');
              if (cells.length >= 6) {
                if (!cells[0].classList.contains('wiertla-categories__table-cell--type')) {
                  cells[0].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--type';
                }
                if (!cells[1].classList.contains('wiertla-categories__table-cell--diameter')) {
                  cells[1].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--diameter';
                }
                if (!cells[2].classList.contains('wiertla-categories__table-cell--length')) {
                  cells[2].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--length';
                }
                if (!cells[3].classList.contains('wiertla-categories__table-cell--symbol')) {
                  cells[3].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--symbol';
                }
                if (!cells[4].classList.contains('wiertla-categories__table-cell--vendor')) {
                  cells[4].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--vendor';
                }
                if (!cells[5].classList.contains('wiertla-categories__table-cell--price')) {
                  cells[5].className = 'wiertla-categories__table-cell wiertla-categories__table-cell--price';
                }
              }
            });

            // Make sure all rows have proper data attributes for filtering
            const rows = tempTableBody.querySelectorAll('tr');
            rows.forEach((row) => {
              // Log each row's data attributes to debug
              const sku = row.getAttribute('data-sku') || '';
              const vendor = row.getAttribute('data-vendor') || '';
              const type = row.getAttribute('data-type') || '';

              // If we're missing data attributes, try to extract them from content
              if (!sku || !vendor) {
                // Get text content from cells (assumes a specific order)
                const cells = row.querySelectorAll('td');
                if (cells.length >= 6) {
                  // Add data attributes if they don't exist
                  if (!row.hasAttribute('data-sku') && cells[3]) {
                    const symbol = cells[3].textContent.trim();
                    row.setAttribute('data-sku', symbol);

                    // Also update the type icon based on the SKU
                    if (symbol && symbol.length >= 2 && cells[0]) {
                      const skuPrefix = symbol.substring(0, 2).toUpperCase();
                      const iconMapping = {
                        VW: '{{ "image-8.png" | asset_url }}',
                        PR: '{{ "image-10.png" | asset_url }}',
                        WW: '{{ "image-12.png" | asset_url }}',
                        PS: '{{ "image-9.png" | asset_url }}',
                        WK: '{{ "image-13.png" | asset_url }}',
                        WV: '{{ "image-11.png" | asset_url }}',
                        IS: '{{ "ico_big_koronkowe.svg" | asset_url }}',
                        WA: '{{ "ico_big_vhm.svg" | asset_url }}',
                      };
                      const typeIcon = iconMapping[skuPrefix] || '';
                      if (typeIcon) {
                        cells[0].innerHTML = `<img src="${typeIcon}" alt="${type}" class="wiertla-categories__type-icon">`;
                      }
                    }
                  }

                  if (!row.hasAttribute('data-vendor') && cells[4]) {
                    const vendorName = cells[4].textContent.trim();
                    row.setAttribute('data-vendor', vendorName);
                  }

                  if (!row.hasAttribute('data-type') && cells[0]) {
                    const typeText = cells[0].textContent.trim();
                    row.setAttribute('data-type', typeText);
                  }
                }
              }
            });
          }
        }

        // Keep track of temp fullscreen filters
        const tempFilters = {
          category: 'wszystkie',
          type: '',
          crown: '',
          manufacturer: '',
          search: '',
          itemsPerPage: 20, // Default items per page - explicitly set to 20
          currentPage: 1,
        };

        // Set the active per page button based on the current itemsPerPage value
        const activeItemsPerPage = tempFilters.itemsPerPage;
        if (tempPerPageBtns) {
          tempPerPageBtns.forEach((btn) => {
            const btnValue = parseInt(btn.getAttribute('data-value'));
            if (btnValue === activeItemsPerPage) {
              btn.classList.add('active');
            } else {
              btn.classList.remove('active');
            }
          });
        }

        // Function to filter products in the temp fullscreen
        function filterTempProducts() {
          if (!tempTableBody) return;

          const rows = tempTableBody.querySelectorAll('tr');

          let visibleCount = 0;
          let startIndex = (tempFilters.currentPage - 1) * tempFilters.itemsPerPage;
          let endIndex = startIndex + tempFilters.itemsPerPage - 1;
          let displayedItems = 0;

          // Debug function to check why a row is visible or not
          function logRowDebug(row, filters, isVisible) {
            const sku = row.getAttribute('data-sku') || '';
            const vendor = row.getAttribute('data-vendor') || '';
            const cells = Array.from(row.querySelectorAll('td')).map((cell) => cell.textContent.trim());
          }

          // First pass: Apply all filters to determine visible rows
          const visibleRows = [];
          let debuggedRows = 0;

          rows.forEach((row) => {
            // Extract data attributes or cell content directly for filtering
            const cells = row.querySelectorAll('td');
            const sku = row.getAttribute('data-sku') || '';
            const vendor = row.getAttribute('data-vendor') || '';
            const type = row.getAttribute('data-type') || '';
            const crown = row.getAttribute('data-crown') || '';
            const rowText = row.textContent.toLowerCase();
            const searchText = tempFilters.search.toLowerCase();

            let show = true;

            // Debug the first few rows to see what data we have
            if (debuggedRows < 3) {
              debuggedRows++;
            }

            // Apply category filter if not "wszystkie"
            if (tempFilters.category && tempFilters.category !== 'wszystkie') {
              // Direct match on attribute if it exists
              if (row.hasAttribute('data-category')) {
                show = show && row.getAttribute('data-category') === tempFilters.category;
              } else {
                // Check category prefix based on the main filters logic
                const categoryPrefixMap = {
                  koronkowe: 'VW',
                  plytkowe: 'PR',
                  vhm: 'WW',
                  sandvik: 'PS',
                  ksem: 'WK',
                  amec: 'WV',
                };

                const prefix = categoryPrefixMap[tempFilters.category];
                if (prefix) {
                  // Match on SKU attribute or cell content
                  const symbolText = sku || (cells[3] ? cells[3].textContent.trim() : '');

                  show = show && symbolText.startsWith(prefix);
                }
              }
            }

            // Apply type filter - the type dropdown actually selects items by SKU prefix
            if (tempFilters.type) {
              // Get the SKU from various possible sources
              let symbolText = '';

              // First try data attribute
              if (sku) {
                symbolText = sku;
              }
              // Then try the symbol/sku cell (4th column)
              else if (cells && cells.length > 3) {
                symbolText = cells[3].textContent.trim();
              }

              // Check if SKU starts with the selected type prefix
              if (symbolText) {
                show = show && symbolText.startsWith(tempFilters.type);
              } else {
                // If we can't find the SKU, don't match
                show = false;
              }
            }

            // Apply crown filter
            if (tempFilters.crown) {
              show = show && crown === tempFilters.crown;
            }

            // Apply manufacturer filter
            if (tempFilters.manufacturer) {
              const vendorText = vendor || (cells[4] ? cells[4].textContent.trim() : '');

              // Try direct match first
              if (vendorText === tempFilters.manufacturer) {
                // Direct match
                show = true;
              } else {
                // Check with manufacturer mapping
                show = show && vendorText.toLowerCase() === tempFilters.manufacturer.toLowerCase();
              }
            }

            // Apply search
            if (searchText) {
              show = show && rowText.toLowerCase().includes(searchText);
            }

            // Add to visible rows if it passes all filters
            if (show) {
              visibleRows.push(row);
            } else if (debuggedRows <= 5) {
              // Log first few filtered rows for debugging
              logRowDebug(row, tempFilters, false);
            }

            // Hide all rows initially
            row.style.display = 'none';
          });

          // Second pass: Apply pagination to visible rows
          visibleCount = visibleRows.length;

          // Reset all rows to hidden first
          rows.forEach((row) => {
            row.style.display = 'none';
          });

          // Then show only the rows for current page
          visibleRows.forEach((row, index) => {
            // Check if this row should be visible based on current page
            if (index >= startIndex && index <= endIndex) {
              row.style.display = '';
              displayedItems++;
            }
          });

          // Update pagination UI
          if (tempResultsCount) {
            const totalPages = Math.ceil(visibleCount / tempFilters.itemsPerPage);
            const endPosition = Math.min(startIndex + displayedItems, visibleCount);
            const startPosition = visibleCount > 0 ? startIndex + 1 : 0;

            tempResultsCount.textContent = `${startPosition}-${endPosition} z ${visibleCount}`;

            if (tempPrevButton) {
              tempPrevButton.disabled = tempFilters.currentPage <= 1;
            }

            if (tempNextButton) {
              const isLastPage = tempFilters.currentPage >= totalPages;
              tempNextButton.disabled = isLastPage;
            }

            // Update per-page buttons UI
            if (tempPerPageBtns) {
              tempPerPageBtns.forEach((btn) => {
                const btnValue = parseInt(btn.getAttribute('data-value'));
                if (btnValue === tempFilters.itemsPerPage) {
                  btn.classList.add('active');
                } else {
                  btn.classList.remove('active');
                }
              });
            }
          }
        }

        // Copy active filters from main table to temp fullscreen
        // Find active category from main table
        const activeMainCategoryBtn = document.querySelector('.wiertla-categories__filter-button.active');
        if (activeMainCategoryBtn) {
          const activeCategory = activeMainCategoryBtn.getAttribute('data-filter') || 'wszystkie';
          tempFilters.category = activeCategory;

          // Set active class in temp fullscreen
          const matchingTempBtn = tempFullscreen.querySelector(
            `.wiertla-categories__filter-button[data-filter="${activeCategory}"]`
          );
          if (matchingTempBtn) {
            tempCategoryBtns.forEach((el) => el.classList.remove('active'));
            matchingTempBtn.classList.add('active');
          }
        }

        // Copy filter values from main table
        const mainFilterSelects = document.querySelectorAll('.wiertla-categories__filter');
        mainFilterSelects.forEach((select) => {
          const filterType = select.getAttribute('data-filter');
          if (filterType && select.value) {
            tempFilters[filterType] = select.value;

            // Set same value in temp fullscreen
            const matchingTempSelect = tempFullscreen.querySelector(
              `.wiertla-categories__filter[data-filter="${filterType}"]`
            );
            if (matchingTempSelect) {
              matchingTempSelect.value = select.value;
            }
          }
        });

        // Add event listeners to elements in the temp fullscreen
        if (tempCategoryBtns) {
          tempCategoryBtns.forEach((btn) => {
            btn.addEventListener('click', function () {
              const category = this.getAttribute('data-filter') || 'wszystkie';

              // Update UI
              tempCategoryBtns.forEach((el) => el.classList.remove('active'));
              this.classList.add('active');

              // Update filters
              tempFilters.category = category;
              tempFilters.currentPage = 1;

              filterTempProducts();
            });
          });
        }

        if (tempFilterSelects) {
          tempFilterSelects.forEach((select) => {
            select.addEventListener('change', function () {
              const filterType = this.getAttribute('data-filter');
              const selectedValue = this.value;

              // Always reset to page 1 when any filter changes
              tempFilters.currentPage = 1;

              // Handle both 'category' and 'type' selects identically since they both use the same SKU prefix logic
              if (filterType === 'category' || filterType === 'type') {
                // Reset type filter regardless of which filter is changing
                // This ensures we start fresh
                tempFilters.type = '';

                if (selectedValue) {
                  if (filterType === 'category') {
                    // For category dropdown, map the value to category name for the UI sync
                    const categoryMapping = {
                      VW: 'koronkowe',
                      PR: 'plytkowe',
                      WW: 'vhm',
                      PS: 'sandvik',
                      WK: 'ksem',
                      WV: 'amec',
                    };

                    // If we have a value and it's in the mapping, use it
                    if (categoryMapping[selectedValue]) {
                      tempFilters.category = categoryMapping[selectedValue];
                    } else {
                      tempFilters.category = 'wszystkie';
                    }

                    // For filtering, we also set the type value which controls the SKU prefix filter
                    tempFilters.type = selectedValue;

                    // Also update UI - find the corresponding category button and activate it
                    if (tempCategoryBtns) {
                      tempCategoryBtns.forEach((btn) => {
                        btn.classList.remove('active');
                        if (btn.getAttribute('data-filter') === tempFilters.category) {
                          btn.classList.add('active');
                        }
                      });
                    }
                  } else if (filterType === 'type') {
                    // For type dropdown, set the type directly
                    // This is the key prefix (VW, PR, etc.) that will be used to filter SKUs
                    tempFilters.type = selectedValue;

                    // Update corresponding category for UI
                    const typeToCategory = {
                      VW: 'koronkowe',
                      PR: 'plytkowe',
                      WW: 'vhm',
                      PS: 'sandvik',
                      WK: 'ksem',
                      WV: 'amec',
                    };

                    if (typeToCategory[selectedValue]) {
                      tempFilters.category = typeToCategory[selectedValue];

                      // Also update category buttons UI
                      if (tempCategoryBtns) {
                        tempCategoryBtns.forEach((btn) => {
                          btn.classList.remove('active');
                          if (btn.getAttribute('data-filter') === tempFilters.category) {
                            btn.classList.add('active');
                          }
                        });
                      }
                    }
                  }
                } else {
                  // Clear filters if empty
                  tempFilters.type = '';
                  tempFilters.category = 'wszystkie';
                }
              } else {
                // Normal filter type (manufacturer, crown, etc.)
                tempFilters[filterType] = selectedValue;
              }

              // Reset to page 1 when changing filters
              tempFilters.currentPage = 1;

              // Apply filters
              filterTempProducts();
            });
          });
        }

        // Handle per-page buttons
        if (tempPerPageBtns && tempPerPageBtns.length > 0) {
          // Define handler function
          function handlePerPageClick(e) {
            if (e) e.preventDefault();

            // Remove active class from all buttons
            tempPerPageBtns.forEach((btn) => btn.classList.remove('active'));

            // Add active class to clicked button
            this.classList.add('active');

            // Update items per page value
            const newItemsPerPage = parseInt(this.getAttribute('data-value'));

            // Only update if value actually changed
            if (tempFilters.itemsPerPage !== newItemsPerPage) {
              tempFilters.itemsPerPage = newItemsPerPage;
              tempFilters.currentPage = 1; // Reset to first page
              filterTempProducts();
            }
          }

          // First, set the correct active button and add event listeners
          let foundActiveButton = false;

          tempPerPageBtns.forEach((btn) => {
            // Clear existing event listeners by cloning
            const oldBtn = btn;
            const newBtn = oldBtn.cloneNode(true);

            // Set active state
            const btnValue = parseInt(newBtn.getAttribute('data-value'));
            if (btnValue === 20) {
              // Force 20 as the default active button
              newBtn.classList.add('active');
              tempFilters.itemsPerPage = 20; // Force itemsPerPage to 20
              foundActiveButton = true;
            } else {
              newBtn.classList.remove('active');
            }

            // Add new click handler
            newBtn.onclick = handlePerPageClick;

            // Replace old button
            if (oldBtn.parentNode) {
              oldBtn.parentNode.replaceChild(newBtn, oldBtn);
            }
          });
        }

        if (tempSearchInput) {
          tempSearchInput.addEventListener('input', function () {
            tempFilters.search = this.value.trim();
            tempFilters.currentPage = 1;
            filterTempProducts();
          });
        }

        // Define direct click handlers for pagination buttons
        function handlePrevClick(e) {
          if (e) e.preventDefault();
          if (tempFilters.currentPage > 1) {
            tempFilters.currentPage--;
            filterTempProducts();
          }
        }

        function handleNextClick(e) {
          if (e) e.preventDefault();
          const rows = tempTableBody.querySelectorAll('tr');
          const totalRows = rows.length;
          const totalPages = Math.ceil(totalRows / tempFilters.itemsPerPage);

          if (tempFilters.currentPage < totalPages) {
            tempFilters.currentPage++;
            filterTempProducts();
          }
        }

        // Add event listeners for pagination buttons
        if (tempPrevButton) {
          // Completely replace the button to remove any existing handlers
          const oldPrevBtn = tempPrevButton;
          const newPrevBtn = document.createElement('button');
          newPrevBtn.className = oldPrevBtn.className;
          newPrevBtn.id = oldPrevBtn.id;
          newPrevBtn.innerHTML = oldPrevBtn.innerHTML;
          newPrevBtn.disabled = tempFilters.currentPage <= 1;

          // Add new click event listener
          newPrevBtn.onclick = handlePrevClick;

          // Replace the old button
          if (oldPrevBtn.parentNode) {
            oldPrevBtn.parentNode.replaceChild(newPrevBtn, oldPrevBtn);
            tempPrevButton = newPrevBtn;
          }
        }

        if (tempNextButton) {
          // Completely replace the button to remove any existing handlers
          const oldNextBtn = tempNextButton;
          const newNextBtn = document.createElement('button');
          newNextBtn.className = oldNextBtn.className;
          newNextBtn.id = oldNextBtn.id;
          newNextBtn.innerHTML = oldNextBtn.innerHTML;

          // Initialize button state
          const totalRows = tempTableBody.querySelectorAll('tr').length;
          const totalPages = Math.ceil(totalRows / tempFilters.itemsPerPage);
          newNextBtn.disabled = tempFilters.currentPage >= totalPages || totalPages <= 1;

          // Add new click event listener
          newNextBtn.onclick = handleNextClick;

          // Replace the old button
          if (oldNextBtn.parentNode) {
            oldNextBtn.parentNode.replaceChild(newNextBtn, oldNextBtn);
            tempNextButton = newNextBtn;
          }
        }

        // Apply initial filtering
        filterTempProducts();

        // Add event listener to the close button in the new container
        if (tempCloseButton) {
          tempCloseButton.addEventListener('click', function () {
            document.body.removeChild(tempFullscreen);
            document.body.style.overflow = '';
          });
        }

        document.body.style.overflow = 'hidden';
      } else {
        // Close fullscreen
        fullscreenView.style.cssText = 'display: none !important;';
        document.body.style.overflow = '';

        // Also remove temp fullscreen if it exists
        const tempFullscreen = document.getElementById('temp-fullscreen-view');
        if (tempFullscreen) {
          document.body.removeChild(tempFullscreen);
        }
      }
    }

    // Filter products in fullscreen view
    function filterFullscreenProducts() {
      if (!fullscreenTableBody) return;
      // Function implementation would go here
    }

    // Missing updateUrlParams function
    function updateUrlParams() {
      const url = new URL(window.location);

      // Update mainType parameter
      if (window.WiertlaCNC.activeTabType) {
        url.searchParams.set('mainType', window.WiertlaCNC.activeTabType);
      }

      // Update category parameter
      if (window.selectedCategory) {
        url.searchParams.set('category', window.selectedCategory);
      }

      // Update typ parameter
      if (window.WiertlaCNC.filters && window.WiertlaCNC.filters.typ && window.WiertlaCNC.filters.typ !== '') {
        url.searchParams.set('typ', window.WiertlaCNC.filters.typ);
      } else {
        url.searchParams.delete('typ');
      }

      // Update perPage parameter
      if (window.itemsPerPage && window.itemsPerPage !== 20) {
        url.searchParams.set('perPage', window.itemsPerPage);
      }

      // Update the URL without reloading the page
      window.history.replaceState({}, '', url);
    }

    // Add a global click handler for all fullscreen buttons
    document.addEventListener('click', function (event) {
      // Check if clicked element is a fullscreen button or inside one
      const clickedFullscreenBtn = event.target.closest('.wiertla-categories__fullscreen-btn');

      if (clickedFullscreenBtn) {
        event.preventDefault();
        event.stopPropagation();

        // Call the toggle function
        toggleFullscreen();
      }
    });

    // Also add direct event listeners to buttons
    if (openFullscreenBtns && openFullscreenBtns.length) {
      openFullscreenBtns.forEach((btn) => {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          e.stopPropagation();
          toggleFullscreen();
        });
      });
    } else {
      console.error('No open fullscreen buttons found');
    }

    // Event listener for close fullscreen button
    if (closeFullscreenBtn) {
      closeFullscreenBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        toggleFullscreen();
      });
    } else {
      console.error('No close fullscreen button found');
    }

    // Event listeners for search
    if (fullscreenSearch) {
      fullscreenSearch.addEventListener('input', function () {
        fullscreenFilters.search = this.value.trim();
        fullscreenFilters.currentPage = 1;
        filterFullscreenProducts();
      });
    }

    // Event listeners for category icons
    if (fullscreenCategoryBtns) {
      fullscreenCategoryBtns.forEach((btn) => {
        btn.addEventListener('click', function () {
          const category = this.getAttribute('data-category');

          // Set active class
          fullscreenCategoryBtns.forEach((el) => el.classList.remove('active'));
          this.classList.add('active');

          // Update filter and reapply
          fullscreenFilters.category = category;
          fullscreenFilters.currentPage = 1;
          filterFullscreenProducts();
        });
      });
    }

    // Event listeners for filter selects
    if (fullscreenFilterSelects) {
      fullscreenFilterSelects.forEach((select) => {
        select.addEventListener('change', function () {
          const filterType = this.getAttribute('data-filter');
          fullscreenFilters[filterType] = this.value;
          fullscreenFilters.currentPage = 1;
          filterFullscreenProducts();
        });
      });
    }

    // Event listeners for items per page
    if (fullscreenPerPageBtns) {
      fullscreenPerPageBtns.forEach((btn) => {
        btn.addEventListener('click', function () {
          // Set active class
          fullscreenPerPageBtns.forEach((el) => el.classList.remove('active'));
          this.classList.add('active');

          // Update filter and reapply
          fullscreenFilters.itemsPerPage = parseInt(this.getAttribute('data-value'));
          fullscreenFilters.currentPage = 1;
          filterFullscreenProducts();
        });
      });
    }

    // Event listeners for pagination
    if (fullscreenPrevPage) {
      fullscreenPrevPage.addEventListener('click', function () {
        if (fullscreenFilters.currentPage > 1) {
          fullscreenFilters.currentPage--;
          filterFullscreenProducts();
        }
      });
    }

    if (fullscreenNextPage) {
      fullscreenNextPage.addEventListener('click', function () {
        const rows = fullscreenTableBody.querySelectorAll('tr');
        const totalVisible = Array.from(rows).filter((row) => {
          const style = window.getComputedStyle(row);
          return style.display !== 'none';
        }).length;

        const totalPages = Math.ceil(totalVisible / fullscreenFilters.itemsPerPage);

        if (fullscreenFilters.currentPage < totalPages) {
          fullscreenFilters.currentPage++;
          filterFullscreenProducts();
        }
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Status filter functionality
    const statusFilters = document.querySelectorAll(
      '.wiertla-categories__status-filters.desktop .wiertla-categories__status-filter'
    );

    // Remove any initial active states
    statusFilters.forEach((filter) => {
      filter.classList.remove('active');
    });

    // Check URL parameters for condition
    const params = new URLSearchParams(window.location.search);
    const conditionFromUrl = params.get('condition');

    if (conditionFromUrl) {
      // Find and activate the matching filter
      statusFilters.forEach((filter) => {
        if (filter.textContent.trim().toLowerCase() === conditionFromUrl.toLowerCase()) {
          filter.classList.add('active');
        }
      });
    }

    // Rest of your existing code...
  });
  const desktopTabs = document.querySelectorAll('.wiertla-categories__tabs.desktop .wiertla-categories__tab');

  // Add click event listener to each tab
  desktopTabs.forEach((tab) => {
    tab.addEventListener('click', function () {
      // Remove active class from all tabs
      desktopTabs.forEach((t) => t.classList.remove('active'));

      // Add active class to clicked tab
      this.classList.add('active');

      // Get the tab text to use as a filter
      const tabText = this.textContent.trim();

      // Set the filter state based on the tab
      if (tabText.includes('PŁYTKI')) {
        filterState.type = 'plate';
      } else if (tabText.includes('KORONKI')) {
        filterState.type = 'crown';
      } else if (tabText.includes('REGENERACJA')) {
        filterState.type = 'regeneration';
      }

      // Apply filters to update the table
      applyFilters();
    });
  });
</script>

<script>
  function toggleFullscreen() {
    const fullscreenView = document.querySelector('.wiertla-categories__fullscreen-view');
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');

    if (!fullscreenView || !fullscreenBtn) return;

    if (fullscreenView.style.display === 'none') {
      // Enter fullscreen
      fullscreenView.style.display = 'block';
      fullscreenBtn.innerHTML = `
        <img src="{{ 'zoom_out_map.svg' | asset_url }}" alt="Close fullscreen" class="wiertla-categories__fullscreen-icon" width="24" height="24">
        <span>Zamknij tryb pełnoekranowy</span>
      `;
      document.body.style.overflow = 'hidden';
    } else {
      // Exit fullscreen
      fullscreenView.style.display = 'none';
      fullscreenBtn.innerHTML = `
        <img src="{{ 'zoom_in_map.svg' | asset_url }}" alt="Fullscreen" class="wiertla-categories__fullscreen-icon">
        <span>Wyświetl tabelę na całej stronie</span>
      `;
      document.body.style.overflow = '';
    }
  }

  // Add event listener to the fullscreen button
  document.addEventListener('DOMContentLoaded', function () {
    const fullscreenBtn = document.querySelector('.wiertla-categories__fullscreen-btn');
    if (fullscreenBtn) {
      fullscreenBtn.addEventListener('click', toggleFullscreen);
    }
  });
</script>

<script>
  // Update category mappings
  window.WiertlaCNC.categoryMappings = {
    // Wiertła categories
    'koronkowe': 'VW',  // First
    'plytkowe': 'PR',   // Second
    'vhm': 'WW',        // Third - fixing from VH to WW
    'sandvik': 'PS',    // Fourth - fixing from SANDVIK to PS
    'ksem': 'WK',       // Fifth
    'amec': 'WV',       // Sixth
    'iscar': 'IS',
    'walter': 'WA',
    
    // Płytki categories
    'plytki': 'PW',
    
    // Koronki categories
    'koronki_kk': 'KK',
    'koronki_kw': 'KW',
    'koronki_ki': 'KI',
    'koronki_kt': 'KT',
    'koronki_ks': 'KS',
    'koronki_ka': 'KA',
    'koronki_kg': 'KG',
    
    // Other manufacturers
    'GÜHRING': 'GÜHRING',
    'wnt': 'WNT',
    'mikrontool': 'MIKRONTOOL',
    'taegutec': 'TaeguTec'
  };
  
        // Define dropdown options for each tab type
      window.WiertlaCNC.tabTypeOptions = {
        'wiertla': [
          { value: '', text: 'Typ wiertła' },
          { value: 'VW', text: 'Koronkowe' },
          { value: 'PR', text: 'Płytkowe' },
          { value: 'WW', text: 'VHM' },
          { value: 'PS', text: 'Sandvik 880' },
          { value: 'WK', text: 'KSEM' },
          { value: 'WV', text: 'AMEC' }
        ],
        'plytki': [
          { value: '', text: 'Typ płytki' },
          { value: 'PW', text: 'Płytki wiertarskie' }
        ],
        'koronki': [
          { value: '', text: 'Typ koronki' },
          { value: 'KSEM', text: 'KSEM' },
          { value: 'IDI', text: 'IDI' },
          { value: 'P600', text: 'P600' },
          { value: 'ICM', text: 'ICM' },
          { value: 'ICP', text: 'ICP' },
          { value: '870', text: '870' }
        ]
      };
      
      // Define manufacturer options
      window.WiertlaCNC.manufacturerOptions = [
        { value: '', text: 'Producent' },
        { value: 'Sandvik', text: 'SANDVIK' },
        { value: 'Walter', text: 'WALTER' },
        { value: 'ISCAR', text: 'ISCAR' },
        { value: 'KENNAMETAL', text: 'KENNAMETAL' },
        { value: 'DSK', text: 'DSK' },
        { value: 'AMEC', text: 'AMEC' }
      ];
      
      // Function to update dropdowns based on active tab
      function updateDropdowns() {
        const tabType = window.WiertlaCNC.activeTabType;
        
        // Update category dropdowns
        const categoryDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="category"]');
        if (categoryDropdowns.length > 0 && window.WiertlaCNC.tabTypeOptions[tabType]) {
          categoryDropdowns.forEach(dropdown => {
            // Clear existing options
            dropdown.innerHTML = '';
            
            // Add new options based on tab type
            window.WiertlaCNC.tabTypeOptions[tabType].forEach(option => {
              const optionElement = document.createElement('option');
              optionElement.value = option.value;
              optionElement.textContent = option.text;
              dropdown.appendChild(optionElement);
            });
          });
        }
        
        // Update manufacturer dropdowns
        const manufacturerDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="manufacturer"]');
        if (manufacturerDropdowns.length > 0 && window.WiertlaCNC.manufacturerOptions) {
          manufacturerDropdowns.forEach(dropdown => {
            // Clear existing options
            dropdown.innerHTML = '';
            
            // Add manufacturer options
            window.WiertlaCNC.manufacturerOptions.forEach(option => {
              const optionElement = document.createElement('option');
              optionElement.value = option.value;
              optionElement.textContent = option.text;
              dropdown.appendChild(optionElement);
            });
          });
        }
      }
      
      // Function to show/hide category icons based on active tab
      function updateCategoryIcons() {
        const tabType = window.WiertlaCNC.activeTabType;
        const allIcons = document.querySelectorAll('.wiertla-categories__icon-item');
        
        // Define categories per tab exactly as specified
        const wiertlaCategories = ['koronkowe', 'plytkowe', 'vhm', 'sandvik', 'ksem', 'amec'];
        const plytkiCategories = ['wcmx', 'lcmx', '811', 'dft', '880', 'wogx', 'spgx', 'p284'];
        const koronkiCategories = ['ksem', 'idi', 'p600', 'icm', 'icp', '870', 'amec', 'ktip'];
        
        let visibleIcons = [];
        let currentTabCategories = [];
        let currentTabClass = '';
        
        // Determine which categories and tab class to show for current tab
        if (tabType === 'wiertla') {
          currentTabCategories = wiertlaCategories;
          currentTabClass = 'wiertla-tab-wiertla';
        } else if (tabType === 'plytki') {
          currentTabCategories = plytkiCategories;
          currentTabClass = 'wiertla-tab-plytki';
        } else if (tabType === 'koronki') {
          currentTabCategories = koronkiCategories;
          currentTabClass = 'wiertla-tab-koronki';
        }
        
        
        allIcons.forEach(icon => {
          const category = icon.getAttribute('data-category');
          
          // Always show "wszystkie" (all) category regardless of tab
          if (category === 'wszystkie') {
            icon.style.display = '';
            visibleIcons.push(category);
            return;
          }
          
          // Check if icon belongs to current tab AND has correct category
          const belongsToCurrentTab = icon.classList.contains(currentTabClass);
          const hasCorrectCategory = currentTabCategories.includes(category);
          
          if (belongsToCurrentTab && hasCorrectCategory) {
              icon.style.display = '';
            visibleIcons.push(category);
            } else {
              icon.style.display = 'none';
          }
        });
        
        
      
      }

  // Update icon mappings
  window.WiertlaCNC.iconMappings = {
    'koronkowe': '{{ 'ico_big_koronkowe.svg' | asset_url }}',
    'plytkowe': '{{ 'ico_big_plytkowe.svg' | asset_url }}',
    'vhm': '{{ 'ico_big_vhm.svg' | asset_url }}',
    'sandvik': '{{ 'ico_big_sandvik.svg' | asset_url }}',
    'amec': '{{ 'ico_big_amec.svg' | asset_url }}',
    'ksem': '{{ 'ico_big_ksem.svg' | asset_url }}',
    'iscar': '{{ 'ico_big_koronkowe.svg' | asset_url }}', // Fallback to existing icon
    'walter': '{{ 'ico_big_vhm.svg' | asset_url }}',      // Fallback to existing icon
    'dsk': '{{ 'ico_big_plytkowe.svg' | asset_url }}'     // Fallback to existing icon
  };

  function applyFilters() {
    const selectedCategory = document.querySelector('.wiertla-categories__icon-item.active')?.getAttribute('data-category');
    const selectedStatus = document.querySelector('.wiertla-categories__status-item.active')?.getAttribute('data-status');
    let filteredProducts = window.WiertlaCNC.products;
    
    // Apply category filter
    if (selectedCategory && selectedCategory !== 'wszystkie') {
      const categoryCode = window.WiertlaCNC.categoryMappings[selectedCategory];
      filteredProducts = filteredProducts.filter(product => {
        return product.custom_category === categoryCode;
      });
    }
    
    // Apply status filter
    if (selectedStatus && selectedStatus !== 'all') {
      filteredProducts = filteredProducts.filter(product => {
        if (selectedStatus === 'rentable') {
          return product.rentable === true;
        } else if (selectedStatus === 'non-rentable') {
          return product.rentable === false;
        }
        return true;
      });
    }
    
    // Apply manufacturer filter
    if (window.WiertlaCNC.filters.manufacturer && window.WiertlaCNC.filters.manufacturer !== 'all') {
      const manufacturerMapping = {
        'sandvik': 'Sandvik',
        'iscar': 'ISCAR',
        'walter': 'Walter',
        'kennametal': 'KENNAMETAL',
        'amec': 'AMEC',
        'guhring': 'GÜHRING',
        'wnt': 'WNT',
        'mikrontool': 'MIKRONTOOL',
        'taegutec': 'TaeguTec'
      };
      const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer.toLowerCase()];
      if (expectedManufacturer) {
        filteredProducts = filteredProducts.filter(product => {
          return product.vendor === expectedManufacturer;
        });
      }
    }
    
    // Update table with filtered products
    generateTable(filteredProducts);
    
    // Update results count
    const resultsCount = document.querySelector('.wiertla-categories__results-count');
    if (resultsCount) {
      resultsCount.textContent = `${filteredProducts.length} wyników`;
    }
  }

  // Add event listeners for category icons
  document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
    icon.addEventListener('click', function() {
      // Remove active class from all icons
      document.querySelectorAll('.wiertla-categories__icon-item').forEach(i => i.classList.remove('active'));
      // Add active class to clicked icon
      this.classList.add('active');
      // Apply filters
      applyFilters();
    });
  });

  // Add missing sync functions for category dropdown and icons
  
  // Function to sync filter dropdown with category icons (works for both typ and rodzaj)
  function syncTypeFilterWithIcons(filterValue, filterType = 'typ') {
    console.log(`🔄 Syncing ${filterType} filter "${filterValue}" with category icons`);
    
    // Remove active class from all category icons
    document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
      icon.classList.remove('active');
    });
    
    let categoryName = 'wszystkie';
    
    if (filterType === 'typ') {
      // Map typ filter values to category names (for wiertla tab)
      const filterToCategory = {
        'koronkowe': 'koronkowe',
        'plytkowe': 'plytkowe', 
        'VHM': 'vhm',
        'Sandvik 880': 'sandvik',
        'KSEM': 'ksem',
        'AMEC': 'amec',
        '': 'wszystkie'
      };
      categoryName = filterToCategory[filterValue] || 'wszystkie';
    } else if (filterType === 'rodzaj') {
      // Map rodzaj filter values to category names (for plytki/koronki tabs)
      const rodzajToCategory = {
        // Plytki values
        'WCMX': 'wcmx',
        'LCMX': 'lcmx',
        '811': '811', 
        'DFT': 'dft',
        '880': '880',
        'WOGX': 'wogx',
        'SPGX': 'spgx',
        'P284': 'p284',
        // Koronki values
        'KSEM': 'ksem',
        'IDI': 'idi',
        'P600': 'p600',
        'ICM': 'icm',
        'ICP': 'icp',
        '870': '870',
        'AMEC': 'amec',
        'ktip': 'ktip',
        '': 'wszystkie'
      };
      categoryName = rodzajToCategory[filterValue] || 'wszystkie';
    }
    
    // Set selectedCategory for the filtering system
    window.selectedCategory = categoryName;
    
    // Find and activate the matching category icon
    const matchingIcon = document.querySelector(`.wiertla-categories__icon-item[data-category="${categoryName}"]`);
    if (matchingIcon) {
      matchingIcon.classList.add('active');
      console.log(`✅ Activated category icon: ${categoryName}`);
    } else {
      // If no specific icon found, activate "wszystkie"
      const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
      if (wszystkieIcon) {
        wszystkieIcon.classList.add('active');
        console.log(`✅ Activated default "wszystkie" icon`);
      }
    }
  }
  
  // Function to sync rodzaj filter dropdown with category icons
  function syncRodzajFilterWithIcons(filterValue) {
    syncTypeFilterWithIcons(filterValue, 'rodzaj');
  }
  
  // Function to sync category icons with appropriate filter dropdown based on active tab
  function syncIconsWithTypeFilter(categoryName) {
    const activeTab = window.WiertlaCNC.activeTabType || 'wiertla';
    console.log(`🔄 Syncing category "${categoryName}" with filter dropdown for tab: ${activeTab}`);
    
    if (activeTab === 'wiertla') {
      // For wiertla tab, use typ filter
      const categoryToFilter = {
        'koronkowe': 'koronkowe',
        'plytkowe': 'plytkowe',
        'vhm': 'VHM', 
        'sandvik': 'Sandvik 880',
        'ksem': 'ksem',
        'amec': 'amec',
        'wszystkie': ''
      };
      
      const filterValue = categoryToFilter[categoryName] || '';
      
      const typeFilter = document.querySelector('.wiertla-categories__filter[data-filter="typ"]');
      if (typeFilter) {
        typeFilter.value = filterValue;
        console.log(`✅ Set typ filter dropdown to: "${filterValue}"`);
        
        if (!window.WiertlaCNC.filters) {
          window.WiertlaCNC.filters = {};
        }
        window.WiertlaCNC.filters.typ = filterValue;
      }
    } else {
      // For plytki/koronki tabs, use rodzaj filter
      const categoryToRodzaj = {
        // Plytki categories
        'wcmx': 'WCMX',
        'lcmx': 'LCMX', 
        '811': '811',
        'dft': 'DFT',
        '880': '880',
        'wogx': 'WOGX',
        'spgx': 'SPGX',
        'p284': 'P284',
        // Koronki categories  
        'ksem': 'KSEM',
        'idi': 'IDI',
        'p600': 'P600',
        'icm': 'ICM',
        'icp': 'ICP',
        '870': '870',
        'amec': 'amec',
        'ksem': 'ksem',
        'ktip': 'ktip',
        'wszystkie': ''
      };
      
      const filterValue = categoryToRodzaj[categoryName] || '';
      
      const rodzajFilter = document.querySelector(`.wiertla-categories__filter[data-filter="rodzaj"][data-tab="${activeTab}"]`);
      if (rodzajFilter) {
        rodzajFilter.value = filterValue;
        console.log(`✅ Set rodzaj filter dropdown to: "${filterValue}" for tab: ${activeTab}`);
        
        if (!window.WiertlaCNC.filters) {
          window.WiertlaCNC.filters = {};
        }
        window.WiertlaCNC.filters.rodzaj = filterValue;
      }
    }
  }
  
  // Function to reset categories when switching tabs
  function resetCategoriesOnTabSwitch(newTabType) {
    console.log(`🔄 Resetting categories for tab switch to: ${newTabType}`);
    
    // Set reset flag to prevent interference from other handlers
    window.isResettingCategories = true;
    
    // FIRST: Reset selectedCategory to "wszystkie"
    window.selectedCategory = 'wszystkie';
    
    // SECOND: Clear ALL filter states to ensure clean reset
    if (!window.WiertlaCNC.filters) {
      window.WiertlaCNC.filters = {};
    }
    window.WiertlaCNC.filters.typ = '';
    window.WiertlaCNC.filters.rodzaj = '';
    window.WiertlaCNC.filters.category = '';
    
    // THIRD: Clear currentFilters as well
    if (!window.currentFilters) {
      window.currentFilters = {};
    }
    window.currentFilters.typ = '';
    window.currentFilters.rodzaj = '';
    window.currentFilters.category = '';
    
    // FOURTH: Clear ALL filter dropdowns (both typ and rodzaj) - force clear
    const allFilterDropdowns = document.querySelectorAll('.wiertla-categories__filter[data-filter="typ"], .wiertla-categories__filter[data-filter="rodzaj"]');
    allFilterDropdowns.forEach(dropdown => {
      dropdown.value = '';
      dropdown.selectedIndex = 0; // Force reset to first option
    });
    
    // FIFTH: Remove active class from all category icons and activate "wszystkie"
    document.querySelectorAll('.wiertla-categories__icon-item').forEach(icon => {
      icon.classList.remove('active');
    });
    
    const wszystkieIcon = document.querySelector('.wiertla-categories__icon-item[data-category="wszystkie"]');
    if (wszystkieIcon) {
      wszystkieIcon.classList.add('active');
    }
    
    // SIXTH: Reset page to 1
    window.currentPage = 1;
    
    console.log(`🔍 After reset - selectedCategory: "${window.selectedCategory}"`);
    console.log(`🔍 After reset - WiertlaCNC.filters:`, window.WiertlaCNC.filters);
    console.log(`🔍 After reset - currentFilters:`, window.currentFilters);
    
    // SEVENTH: Double-check and force clear any lingering filter values
    setTimeout(() => {
      // Final safety check - force clear all filter values again
      window.WiertlaCNC.filters.typ = '';
      window.WiertlaCNC.filters.rodzaj = '';
      window.WiertlaCNC.filters.category = '';
      
      console.log(`🔄 Final check before applying filters - WiertlaCNC.filters:`, window.WiertlaCNC.filters);
      console.log(`🔄 Applying filters after tab switch to: ${newTabType}`);
      applyFilters();
      
      // Clear reset flag after everything is done
      window.isResettingCategories = false;
    }, 150);
    
    console.log(`✅ Categories reset for tab: ${newTabType}`);
  }
  
  // Make sync functions globally available
  window.syncTypeFilterWithIcons = syncTypeFilterWithIcons;
  window.syncRodzajFilterWithIcons = syncRodzajFilterWithIcons;
  window.syncIconsWithTypeFilter = syncIconsWithTypeFilter;
  window.resetCategoriesOnTabSwitch = resetCategoriesOnTabSwitch;
  
  // Update the existing tab switching function to reset categories
  const originalInitializeTabs = initializeTabs;
  function initializeTabs() {
    // Function to switch tabs
    function switchTab(tabType) {
      const previousTab = window.WiertlaCNC.activeTabType;
      
      console.log(`🔄 TAB SWITCH: ${previousTab} → ${tabType}`);
      
      window.WiertlaCNC.activeTabType = tabType;

      // Reset categories when switching tabs
      if (previousTab && previousTab !== tabType) {
        console.log(`🔄 Calling resetCategoriesOnTabSwitch because tabs changed: ${previousTab} → ${tabType}`);
        resetCategoriesOnTabSwitch(tabType);
      } else {
        console.log(`🔄 Not resetting categories (first load or same tab): ${previousTab} → ${tabType}`);
      }

      // Update tab visual states
      document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
        tab.classList.remove('active');
        if (tab.getAttribute('data-tab-type') === tabType) {
          tab.classList.add('active');
        }
      });

      // Update dropdowns
      updateDropdowns();

      // Update category icons
      updateCategoryIcons();

      // Update URL parameter
      const url = new URL(window.location);
      url.searchParams.set('mainType', tabType);
      window.history.replaceState({}, '', url);
      
      // Apply filters after tab switch (only if reset wasn't called, to avoid double filtering)
      if (!previousTab || previousTab === tabType) {
        console.log(`🔄 Applying filters after tab switch (no reset was called)`);
        applyFilters();
      }
    }

    // Add event listeners for tab buttons
    document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
      tab.addEventListener('click', function () {
        const tabType = this.getAttribute('data-tab-type');
        switchTab(tabType);
      });
    });

    // Initialize from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainType = urlParams.get('mainType') || 'wiertla';
    switchTab(mainType);
  }
  
  // Enhanced icon click handler to sync with dropdown
  document.addEventListener('click', function(e) {
    const iconItem = e.target.closest('.wiertla-categories__icon-item');
    if (iconItem) {
      const category = iconItem.dataset.category;
      if (category) {
        // Skip sync during tab resets to prevent overriding the reset
       
        
        // Update selectedCategory
        window.selectedCategory = category;
        
        // Sync with type filter dropdown
        syncIconsWithTypeFilter(category);
        
        // The existing icon click handler will take care of visual updates and filtering
      }
    }
  });

</script>
<script>
  // Global filter state
  window.WiertlaCNC.filters = {
    category: 'wszystkie',
    status: 'all',
    type: 'all',
    crown: 'all',
    manufacturer: 'all',
    page: 1,
    perPage: 10,
  };

  // Function to update URL parameters
  function updateUrlParams() {
    const params = new URLSearchParams(window.location.search);

    // Update all filter parameters
    const filterKeys = ['category', 'status', 'type', 'crown', 'manufacturer', 'page', 'perPage'];
    filterKeys.forEach((key) => {
      if (window.WiertlaCNC.filters[key] !== 'all' && window.WiertlaCNC.filters[key] !== 1) {
        params.set(key, window.WiertlaCNC.filters[key]);
      } else {
        params.delete(key);
      }
    });

    const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
    window.history.replaceState({}, '', newUrl);
  }

  // Function to read parameters from URL
  function readUrlParams() {
    const params = new URLSearchParams(window.location.search);
    window.WiertlaCNC.filters = {
      category: params.get('category') || 'wszystkie',
      status: params.get('status') || 'all',
      type: params.get('type') || 'all',
      crown: params.get('crown') || 'all',
      manufacturer: params.get('manufacturer') || 'all',
      page: parseInt(params.get('page')) || 1,
      perPage: parseInt(params.get('perPage')) || 10,
    };
  }

  // Function to apply filters
  function applyFilters() {
    const filteredProducts = window.products.filter((product) => {
      // Category filter
      if (window.WiertlaCNC.filters.category && product.custom_category !== window.WiertlaCNC.filters.category) {
        return false;
      }

      // Manufacturer filter
      if (window.WiertlaCNC.filters.manufacturer) {
        const manufacturerMapping = {
          sandvik: 'Sandvik',
          iscar: 'ISCAR',
          walter: 'Walter',
          kennametal: 'KENNAMETAL',
          amec: 'AMEC',
          guhring: 'GÜHRING',
          wnt: 'WNT',
          mikrontool: 'MIKRONTOOL',
          taegutec: 'TaeguTec',
        };
        const expectedManufacturer = manufacturerMapping[window.WiertlaCNC.filters.manufacturer];
        if (!expectedManufacturer) return false;
        if (!product.vendor || !product.vendor.toLowerCase().includes(expectedManufacturer.toLowerCase())) {
          return false;
        }
      }

      // Status filter
      if (window.WiertlaCNC.filters.status) {
        if (window.WiertlaCNC.filters.status === 'rentable' && !product.rentable) {
          return false;
        }
        if (window.WiertlaCNC.filters.status === 'non-rentable' && product.rentable) {
          return false;
        }
      }

      return true;
    });

    // Update pagination
    window.totalPages = Math.ceil(filteredProducts.length / window.WiertlaCNC.filters.perPage);
    if (window.WiertlaCNC.filters.page > window.totalPages) {
      window.WiertlaCNC.filters.page = 1;
    }

    // Update URL parameters
    updateUrlParams();

    // Generate table with filtered products
    generateTable(filteredProducts);
  }

  // Function to update pagination controls
  function updatePaginationControls(totalItems) {
    const totalPages = Math.ceil(totalItems / window.WiertlaCNC.filters.perPage);
    const paginationContainer = document.querySelector('.wiertla-categories__pagination');

    if (paginationContainer) {
      let paginationHTML = '';

      // Previous button
      paginationHTML += `
        <button class="wiertla-categories__pagination-btn ${window.WiertlaCNC.filters.page === 1 ? 'disabled' : ''}" 
                onclick="changePage(${window.WiertlaCNC.filters.page - 1})">
          Poprzednia
        </button>
      `;

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        paginationHTML += `
          <button class="wiertla-categories__pagination-btn ${window.WiertlaCNC.filters.page === i ? 'active' : ''}" 
                  onclick="changePage(${i})">
            ${i}
          </button>
        `;
      }

      // Next button
      paginationHTML += `
        <button class="wiertla-categories__pagination-btn ${
          window.WiertlaCNC.filters.page === totalPages ? 'disabled' : ''
        }" 
                onclick="changePage(${window.WiertlaCNC.filters.page + 1})">
          Następna
        </button>
      `;

      paginationContainer.innerHTML = paginationHTML;
    }
  }

  // Function to change page
  function changePage(newPage) {
    window.WiertlaCNC.filters.page = newPage;
    applyFilters();
  }

  // Initialize filters from URL on page load
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize active tab type from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainTypeFromUrl = urlParams.get('mainType');
    if (mainTypeFromUrl && ['wiertla', 'plytki', 'koronki'].includes(mainTypeFromUrl)) {
      window.WiertlaCNC.activeTabType = mainTypeFromUrl;
    } else {
      window.WiertlaCNC.activeTabType = 'wiertla';
    }

    // Read initial parameters from URL
    readUrlParams();

    // Synchronize selectedCategory with URL parameter
    const categoryFromUrl = urlParams.get('category');
    if (categoryFromUrl) {
      window.selectedCategory = categoryFromUrl;
    } else {
      window.selectedCategory = 'wszystkie';
    }

    // Set active states based on URL parameters
    const filterTypes = ['category', 'status', 'type', 'crown', 'manufacturer'];
    filterTypes.forEach((type) => {
      const element = document.querySelector(
        `.wiertla-categories__${type}-item[data-${type}="${window.WiertlaCNC.filters[type]}"]`
      );
      if (element) {
        element.classList.add('active');
      }
    });

    // Apply initial filters
    applyFilters();

    // Add event listeners for all filter types
    filterTypes.forEach((type) => {
      document.querySelectorAll(`.wiertla-categories__${type}-item`).forEach((item) => {
        item.addEventListener('click', function () {
          // Remove active class from all items of this type
          document.querySelectorAll(`.wiertla-categories__${type}-item`).forEach((i) => i.classList.remove('active'));
          // Add active class to clicked item
          this.classList.add('active');
          // Reset to first page when changing filters
          window.WiertlaCNC.filters.page = 1;
          // Apply filters
          applyFilters();
        });
      });
    });

    // Initialize tab functionality
    initializeTabs();

    // Call updateDropdowns to populate manufacturer dropdown
    updateDropdowns();
  });

  // Function to initialize tab functionality
  function initializeTabs() {
    // Function to switch tabs
    function switchTab(tabType) {
      const previousTab = window.WiertlaCNC.activeTabType;
      window.WiertlaCNC.activeTabType = tabType;

      // Reset categories when switching tabs
      if (previousTab !== tabType) {
        resetCategoriesOnTabSwitch(tabType);
      }

      // Update tab visual states
      document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
        tab.classList.remove('active');
        if (tab.getAttribute('data-tab-type') === tabType) {
          tab.classList.add('active');
        }
      });

      // Update dropdowns
      updateDropdowns();

      // Update category icons
      updateCategoryIcons();

      // Update URL parameter
      const url = new URL(window.location);
      url.searchParams.set('mainType', tabType);
      window.history.replaceState({}, '', url);
      
      // Apply filters after tab switch
      applyFilters();
    }

    // Add event listeners for tab buttons
    document.querySelectorAll('.wiertla-categories__tab').forEach((tab) => {
      tab.addEventListener('click', function () {
        const tabType = this.getAttribute('data-tab-type');
        switchTab(tabType);
      });
    });

    // Initialize from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const mainType = urlParams.get('mainType') || 'wiertla';
    switchTab(mainType);
  }

  // Add event listener for category select
  const categorySelect = document.querySelector('.wiertla-categories__filter[data-filter="category"]');
  categorySelect?.addEventListener('change', function () {
    const value = this.value;
    const categoryMapping = {
      VW: 'koronkowe',
      PR: 'plytkowe',
      WW: 'vhm',
      PS: 'sandvik',
      WK: 'ksem',
      WV: 'amec',
    };

    window.selectedCategory = value ? categoryMapping[value] : 'wszystkie';

    // Update active states
    document.querySelectorAll('.wiertla-categories__icon-item').forEach((item) => {
      item.classList.remove('active');
      if (item.getAttribute('data-category') === window.selectedCategory) {
        item.classList.add('active');
      }
    });

    // Reset to first page when changing filters
    window.WiertlaCNC.filters.page = 1;
    // Apply filters
    applyFilters();
  });

  // Add event listener for manufacturer select
  document
    .querySelector('.wiertla-categories__filter[data-filter="manufacturer"]')
    .addEventListener('change', function () {
      const value = this.value;
      const manufacturerMapping = {
        AMEC: 'amec',
        GÜHRING: 'guhring',
        ISCAR: 'iscar',
        KENNAMETAL: 'kennametal',
        MIKRONTOOL: 'mikrontool',
        Sandvik: 'sandvik',
        TaeguTec: 'taegutec',
        Walter: 'walter',
        WNT: 'wnt',
      };

      window.WiertlaCNC.filters.manufacturer = value ? manufacturerMapping[value] : '';

      // Reset to first page when changing filters
      window.WiertlaCNC.filters.page = 1;
      // Apply filters
      applyFilters();
    });
</script>
<script>
  // Add styles for rent button

  // Add click handlers for rent buttons
  document.addEventListener('click', function (e) {
    if (e.target.closest('.wiertla-categories__rent-button, .wiertla-categories__mobile-rent-button')) {
      e.preventDefault();
      e.stopPropagation();
      const button = e.target.closest('.wiertla-categories__rent-button, .wiertla-categories__mobile-rent-button');
      const productId = button.dataset.productId;
      const product = window.WiertlaCNC.products.find((p) => p.id === productId);
      if (product) {
        window.WiertlaCNC.openRentModal(product);
      } else {
        console.error('Product not found with ID:', productId);
      }
    }
  });
</script>
<!-- Rent Modal -->
<div id="rent-modal" class="rent-modal">
  <div class="rent-modal__content">
    <div class="rent-modal__header">
      <h2 class="rent-modal__title"></h2>
      <button class="rent-modal__close">
        <img src="{{ 'ico_close.svg' | asset_url }}" alt="Close" width="24" height="24">
      </button>
    </div>
    <div class="rent-modal__body">
      <div class="rent-modal__price"></div>
      <div class="rent-modal__description"></div>
      <div class="rent-modal__form">
        <form id="rent-form">
          <div class="rent-modal__form-group">
            <label for="rent-start-date">Start Date</label>
            <input type="date" id="rent-start-date" name="start-date" required>
          </div>
          <div class="rent-modal__form-group">
            <label for="rent-end-date">End Date</label>
            <input type="date" id="rent-end-date" name="end-date" required>
          </div>
          <button type="submit" class="rent-modal__submit">Rent Now</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Include the mobile filter modal JavaScript -->

{% render 'wiertla-styles' %}

    // Debug function for any filter type
    window.debugFilter = function(filterName) {
      const filter = filterName.toLowerCase();
      console.log(`=== ${filter.toUpperCase()} DEBUG ===`);
      console.log('Total products loaded:', allProducts.length);
      
      // Find all products with the filter name in their typ field (case-insensitive)
      const matchingProducts = allProducts.filter(product => {
        const typ = (product.custom_typ || '').toLowerCase();
        const rodzaj = (product.rodzaj || '').toLowerCase();
        return typ.includes(filter) || rodzaj.includes(filter);
      });
      
      console.log(`Products with "${filter}" in typ/rodzaj field:`, matchingProducts.length);
      matchingProducts.forEach((product, index) => {
        console.log(`${filter.toUpperCase()} Product ${index + 1}:`, {
          sku: product.sku,
          title: product.title,
          custom_typ: product.custom_typ,
          rodzaj: product.rodzaj,
          vendor: product.vendor
        });
      });
      
      // Check current filtering state
      console.log('Current selectedCategory:', window.selectedCategory);
      console.log('Current WiertlaCNC.filters:', window.WiertlaCNC?.filters);
      console.log('Current activeTabType:', window.WiertlaCNC?.activeTabType);
      
      // Test filtering
      window.selectedCategory = filter;
      const filteredProducts = filterProducts();
      console.log(`After setting selectedCategory to "${filter}", filtered products:`, filteredProducts.length);
      
      console.log(`=== END ${filter.toUpperCase()} DEBUG ===`);
      return {
        totalProducts: allProducts.length,
        matchingProducts: matchingProducts.length,
        filteredProducts: filteredProducts.length,
        matchingProductsList: matchingProducts
      };
    };
    
    // Shortcut for KSEM
    window.debugKSEM = () => debugFilter('ksem');
    
    // Shortcut for AMEC
    window.debugAMEC = () => debugFilter('amec');
